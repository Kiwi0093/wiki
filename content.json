{"meta":{"title":"Kiwi's Wiki","subtitle":null,"description":"","author":"Kiwi","url":"http://Kiwi0093.github.io/wiki","root":"/wiki/"},"pages":[{"title":"About","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"about/index.html","permalink":"http://kiwi0093.github.io/wiki/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"categories/index.html","permalink":"http://kiwi0093.github.io/wiki/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"tags/index.html","permalink":"http://kiwi0093.github.io/wiki/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"source/about/index.html","permalink":"http://kiwi0093.github.io/wiki/source/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"source/categories/index.html","permalink":"http://kiwi0093.github.io/wiki/source/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"source/tags/index.html","permalink":"http://kiwi0093.github.io/wiki/source/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Tmux + Oh My Tmux","slug":"Misc/Tmux/1-Tmux+oh-my-tmux","date":"2024-03-22T08:52:20.422Z","updated":"2024-03-22T09:21:40.701Z","comments":true,"path":"wiki/Misc/Tmux/1-Tmux+oh-my-tmux/","permalink":"http://kiwi0093.github.io/wiki/wiki/Misc/Tmux/1-Tmux+oh-my-tmux/","excerpt":"前言 以前我很喜歡用screen指令，不過現在都改用tmux,加上oh-my-tmux後整個就高大上了","text":"前言 以前我很喜歡用screen指令，不過現在都改用tmux,加上oh-my-tmux後整個就高大上了 基本安裝 tmux 1yay -S tmux 這個基本上沒難度 oh-my-tmux 1234cdgit clone https://github.com/gpakosz/.tmux.gitln -s -f .tmux/.tmux.confcp .tmux/.tmux.conf.local . 基本使用 Hotkey Hotkey 按鍵方式 內容 Prefix Ctl+a or Ctl+b 組合鍵起手勢 Prefix C-c Ctl+a -&gt; Ctl+c 開一個新的Session Prefix - Ctl+a -&gt; - 開一個垂直的Pane Prefix _ Ctl+a -&gt; _ 開一個水平的Pane Prefix m Ctl+a -&gt; m 開啟/關閉滑鼠 Prefix , Ctl+a -&gt; . 重新命名這個Session","categories":[{"name":"Misc","slug":"Misc","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/"},{"name":"Tmux","slug":"Misc/Tmux","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Tmux/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://kiwi0093.github.io/wiki/tags/Markdown/"}]},{"title":"WSL & WSLg Tips for ArchWSL","slug":"Linux/WSL/3-WSL_&_WSLg_Tip_for_ArchWSL","date":"2024-03-22T03:04:05.152Z","updated":"2024-03-25T10:08:11.156Z","comments":true,"path":"wiki/Linux/WSL/3-WSL_&_WSLg_Tip_for_ArchWSL/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/WSL/3-WSL_&_WSLg_Tip_for_ArchWSL/","excerpt":"前言 現在WSLg基本上已經內建在WSL安裝內，所以不再需要弄個GWSL來進行設定 順便紀錄一下ArchWSL的一些設定以免忘記","text":"前言 現在WSLg基本上已經內建在WSL安裝內，所以不再需要弄個GWSL來進行設定 順便紀錄一下ArchWSL的一些設定以免忘記 Basic Setting 基本上沒打算用GUI的同學只需要弄這塊就好了 Archlinux-keyring 123456# 初始化keyringsudo pacman-key --init# Poplutae keyringsudo pacman-key --populate# 套用及更新 (若需要調整mirrorlist，可以先修改/etc/pacman.d/mirrorlist)sudo pacman -Syu 這一步驟是ArchWSL必備的，不然沒有正確的keyring什麼都沒辦法裝 /etc/wsl.conf 123456# 使用systemd[boot]systemd=true# 設定預設的使用者[users]default=&lt;username&gt; yay 12345# 需要先安裝上go, git, base-develcd &lt;what ever you like&gt;git clone https://aur.archlinux.org/yay.gitcd yaymakepkg -si yay為目前安裝AUR最方便的工具所以強烈建議裝上 zsh &amp; manjaro-zsh-config (Optional) 請參考其他篇wiki進行設定 Tmux + oh-my-tmux (Optional) 請參考其他篇wiki進行設定 NeoVim + NvChad (Optional) 這個在其他篇wiki內有寫請參考 npm + npm-check-update …etc(Optional) 這個是我個人喜歡用這個來管理我在Github上的Blog &amp; Wiki所需 請參考其他的wiki內容 GUI(WSLg) X server 參考資料： Bug of WSL Preview - Empty /mnt/wslg/.X11-unix &amp; /tmp/.X11-unix Directory 1234567891011# 檢查Display為:0echo $DISPLAY:0# 檢查/mnt/wslg/.X11-unix存在，以及是否為 /tmp/.X11-unix -&gt; /mnt/wslg/.X11-unixls -la /mnt/wslgls -la /tmp#若/mnt/wslg/.X11-unix存在但沒有link到/tmp/.X11-unixsudo rm -r /tmp/.X11-unixln -s /mnt/wslg/.X11-unix /tmp/.X11-unix 然後測試你的GUI軟體是否可以正確的執行若可以執行下一步，若不行…請翻文件… 12345/etc/tmpfiles.d/wslg.conf---# TYPE PATH Mode UID GID Age ArgumentL+ /tmp/.X11-unix - - - - /mnt/wslg/.X11unix @powershell &gt; wsl --shutdown 然後重新進入WSL就可以了 dolphin + breeze (Optional) Dolphin是KDE的文件管理器(類似windows的explore) 只裝dolphin會有缺icon的問題發生所以要裝上KDE的theme - breeze才會正常 1yay -S breeze dolphin Remmina + freerdp (Optional) 這個是個很好用的rdp client，不過remmina只是個皮，要裝上freerdp才能RDP到其他RDP server 1yay -S remmina freerdp Brave (Optional) 總要有瀏覽器…不然GUI要幹麻 1yay -S brave-bin Fcitx (Optional) 基本上因為我們不會在WSL內安裝完整的桌面環境所以在挑選Fcitx的時候只能用Fcitx4的版本所以不要假會去裝Fcitx5… 詳細的內容我放在其他的wiki內，請參考","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"WSL","slug":"Linux/WSL","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/WSL/"}],"tags":[{"name":"Linunx","slug":"Linunx","permalink":"http://kiwi0093.github.io/wiki/tags/Linunx/"},{"name":"Windows","slug":"Windows","permalink":"http://kiwi0093.github.io/wiki/tags/Windows/"}]},{"title":"Traefik","slug":"VM&Container/Service Container/Common/2-traefik","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/Common/2-traefik/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/Common/2-traefik/","excerpt":"前言 雖然之前有講過可以用Nginx Proxy Manager來進行內外網路的轉址不過那些還要真的Mapping出來才能用,使用Traefik的話就不需要這麼麻煩了","text":"前言 雖然之前有講過可以用Nginx Proxy Manager來進行內外網路的轉址不過那些還要真的Mapping出來才能用,使用Traefik的話就不需要這麼麻煩了 基本概念 其實就是一堆virtual host只是它不用去寫一堆設定檔,可以在docker-compose.yml內用label定義後直接就可以用了 Traek本體 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# Docker-compose.ymlversion: &quot;3.3&quot;services: traefik: image: &quot;traefik:v2.5&quot; container_name: &quot;traefik&quot; networks: - backend command: #### Traefik CLI commands to configure Traefik! #### - --api.insecure=false # &lt;== DisEnabling insecure api. Default is ture. - --api.dashboard=true # &lt;== Enabling the dashboard to view services, middlewares, routers, etc... - --api.debug=true # &lt;== Enabling additional endpoints for debugging and profiling ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ## - --providers.docker=true # &lt;== Enabling docker as the provider for traefik - --providers.docker.exposedbydefault=false # &lt;== Don&#x27;t expose every container to traefik, only expose enabled ones ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ## - --entrypoints.web.address=:80 # &lt;== Defining an entrypoint for port :80 named web - --entrypoints.web-secured.address=:443 # &lt;== Defining an entrypoint for https on port :443 named web-secured - --certificatesresolvers.myresolver.acme.httpchallenge=true - --certificatesresolvers.myresolver.acme.tlschallenge=true - --certificatesresolvers.myresolver.acme.email=kiwi@kaienroid.com&quot; - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json&quot; ports: - 80:80 - 443:443 - 8080:8080 volumes: - /var/lib/docker/volumes/traefik/letsencrypt:/letsencrypt - /var/run/docker.sock:/var/run/docker.sock:ro labels: #### Labels define the behavior and rules of the traefik proxy for this container #### traefik.enable: true # &lt;== Enable traefik on itself to view dashboard and assign subdomain to view it #redirecting ALL HTTP to HTTPS traefik.http.routers.http_catchall.rule: hostregexp(`&#123;host:.*&#125;`) traefik.http.routers.http_catchall.entryPoints: web traefik.http.routers.http_catchall.middlewares: redirect_https # &lt;== apply redirect_https middleware which is defined in the below #dashboard traefik.http.routers.traefik.rule: Host(`traefik.example.com`) # &lt;== Setting the domain for the dashboard traefik.http.routers.traefik.entryPoints: web-secured traefik.http.routers.traefik.tls: true traefik.http.routers.traefik.tls.certresolver: myresolver traefik.http.routers.traefik.service: api@internal #to define middlewares traefik.http.middlewares.redirect_https.redirectscheme.scheme: https # &lt;== define a https redirection middlewarenetworks: backend: driver: bridge 其實是可以把command裡的指令改用traefik.toml載入也可以,簡單說明如下(雖然裡面的說明很多了) Docker Network 這個其實沒差,只是一般來說有多到需要Traefik的Server一般來說還是會整理一下Docker Network才不會那麼亂 Command 這個指令其實是讓docker container啟動後自動執行的指令裡可以從上面看得出來幾乎都是定義環境的 Volumes 這裡特別說明一下為什麼SSL要另外找地方放,因為Traefik是用ACME.Json的形式來存所有的SSL Key,另外一個要對應docker.sock很常見就是要知道你哪些container在跑 labels 這個就是traefik的精華部份了,traefik就是利用labels定義讓他自動產生virtual host這樣container一打開就會自動弄好非常方便連NPM的操作都免了 對應App的設定方式 docker-compose.yml相關設定 123456789# 不需要定義Port Mapping# 須讓該app加入Traefik的網路中所以要在docker-compose.yml內加上services: # ...networks: default: external: true name: my-pre-existing-network Labels範例 123456# V2ray traefik labelslabels: traefik.enable: true # 表示這個container需要啟動Traefik traefik.http.routers.v2ray.rule: Host(`v2ray.example.com`) # 定義對應的virtual Host traefik.http.routers.v2ray.tls: true # 使用tls確認用https traefik.http.routers.v2ray.tls.certresolver: myresolver # SSL證書的簽發單位,要對應traefik本體Command定義的 可以看得出來基本的邏輯是 1traefik.&lt;主要服務,http/tcp/udp&gt;.&lt;子項,routers/services/middlewares&gt;.&lt;App Name&gt;.&lt;label item&gt;: &lt;define&gt; 注意事項 在Traefik後的服務請不要跑SSL,把前端的部份都交給Traefik就好了","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"Common","slug":"VM-Container/Service-Container/Common","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/Common/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"}]},{"title":"ZSH / Powerlevel10k","slug":"Misc/Zsh/1-Zsh&Powerlevel10k","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-22T08:49:19.921Z","comments":true,"path":"wiki/Misc/Zsh/1-Zsh&Powerlevel10k/","permalink":"http://kiwi0093.github.io/wiki/wiki/Misc/Zsh/1-Zsh&Powerlevel10k/","excerpt":"前言 自從用過Manjaro KDE後被他的zsh console風格吸引,接著就繼續無性繁殖同樣的設定","text":"前言 自從用過Manjaro KDE後被他的zsh console風格吸引,接著就繼續無性繁殖同樣的設定 ZSH安裝 這個很簡單,基本上依靠系統的package manager安裝就好了 12345678# Archlinux系sudo pacman -S zsh或yay -S zsh# yum系yum install zsh# FreeBSDpkg install zsh Manjaro-zsh-config @ Archlinux 因為manjaro-zsh-config在AUR內,只要安裝這個package就會自動把相關的都裝上所以問題不大 123456# Archlinux系# 這個在AUR內所以git clone https://aur.archlinux.org/manjaro-zsh-config.gitcd manjaro-zsh-config &amp;&amp; makepkg -si或是更簡單的yay -S manjaro-zsh-config 記得要把/etc/zsh/zshrc-manjaro/.zshrc複製到~/.zshrc這樣才會生效 其他作業系統 packages for manjaro-zsh-config zsh-completions zsh-autosuggestions zsh-history-substring-search zsh-syntax-highlighting zsh-theme-powerlevel10k ttf-noto-nerd (Noto Nerd Fonts) zsh-theme-powerlevel10k安裝 1234567# Archlinux系sudo pacman -S zsh-theme-powerlevel10koryay -S zsh-theme-powerlevel10k# 其他系統 - Manual Installationsudo git clone --depth=1 https://github.com/romkatv/powerlevel10k.git /usr/share/# 因為後面要搭配manjaro的設定檔,所以安裝位置固定 gitstatus安裝 12sudo git clone --depth=1 https://github.com/romkatv/gitstatus.git /usr/share/zsh-theme-powerlevel10k/# 因為後面要搭配manjaro的設定檔,所以安裝位置固定 Manjaro-zsh-config的設定檔 因為沒有可直接安裝的package,所以請用以下的script跑 123456789git clone https://github.com/Chrysostomus/manjaro-zsh-configsudo cp -Rv manjaro-zsh-config/manjaro-zsh-prompt /usr/share/zsh/sudo cp -Rv manjaro-zsh-config/zsh-maia-prompt /usr/share/zsh/sudo cp -Rv manjaro-zsh-config/p10k.zsh /usr/share/zsh/sudo cp -Rv manjaro-zsh-config/p10k-portable.zsh /usr/share/zsh/sudo cp -Rv manjaro-zsh-config/command-not-found.zsh /usr/share/zsh/functions/sudo cp -Rv manjaro-zsh-config/.zshrc /etc/zsh/zshrc-manjarosudo cp -r manjaro-zsh-config/base16-shell /usr/share/zsh/scripts/sudo chmod a+x /usr/share/zsh/scripts/base16-shell/ 然後把.zshrc放到~/執行zsh就好了 Windows Terminal Nerd Fonts Dsiplay 安裝Nerd Fonts 但是因為是WSL所以除了裡面的系統要安裝noto-nerd-font以外,外面的Windows也是要安裝nerd font 不然不能正確顯示 Nerd Fonts收集各種Nerd font的網頁 到Download內挑自己喜歡的版本下載 我個人喜歡用noto-nerd-font 下載後請記得解開Zip檔後安裝字型 設定Windows Terminal字型 在設定內選擇你的ArchWSL選項然後選擇外觀 將字型改成你下載的Nerd Font然後記得保存你的變更後就好了","categories":[{"name":"Misc","slug":"Misc","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/"},{"name":"Zsh","slug":"Misc/Zsh","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Zsh/"}],"tags":[{"name":"FreeBSD","slug":"FreeBSD","permalink":"http://kiwi0093.github.io/wiki/tags/FreeBSD/"},{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"}]},{"title":"Hexo介紹與整體規劃","slug":"Network/Hexo/1.introduce","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/Network/Hexo/1.introduce/","permalink":"http://kiwi0093.github.io/wiki/wiki/Network/Hexo/1.introduce/","excerpt":"目標 利用Hexo + Github Page實現個人Blog + Wiki的搭建","text":"目標 利用Hexo + Github Page實現個人Blog + Wiki的搭建 基本架構 說明 這裡利用了Github Page的幾個特性 在.github.io這個repo的master內的index.html會產生https://.github.io/這個有效網址 在其他repo中,Github Page會把branch:gh-pages內的index.thml產生出https://.github.io/&lt;其他repo&gt;/這個有效網址 所以可以將Blog的網頁產生到.github.io這個repo的master裡面作為主網頁,將其他想要的theme的網頁產生到其他repo的gh-pages內作為其他子網站使用 雖然可以利用Hexo指令可以跑特定_config.yml的方法可以把兩個放在一起,但是其實原理上跟上表是一樣的只是可以把Hexo Wiki 跟Hexo Blog存在同一個目錄裡面將git同步管理這點整合 參考資料 Hexo官方文件 OHLIA’s Wiki 別院牧志 風月 途探生靈","categories":[{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/categories/Network/"},{"name":"Hexo","slug":"Network/Hexo","permalink":"http://kiwi0093.github.io/wiki/categories/Network/Hexo/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://kiwi0093.github.io/wiki/tags/Git/"},{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/tags/Network/"},{"name":"Server","slug":"Server","permalink":"http://kiwi0093.github.io/wiki/tags/Server/"},{"name":"Blog","slug":"Blog","permalink":"http://kiwi0093.github.io/wiki/tags/Blog/"},{"name":"Wiki","slug":"Wiki","permalink":"http://kiwi0093.github.io/wiki/tags/Wiki/"}]},{"title":"Hexo安裝","slug":"Network/Hexo/2-installation","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/Network/Hexo/2-installation/","permalink":"http://kiwi0093.github.io/wiki/wiki/Network/Hexo/2-installation/","excerpt":"前言 Hexo是個很簡單好用的靜態網頁產生工具,基本上就是需要npm+node.js","text":"前言 Hexo是個很簡單好用的靜態網頁產生工具,基本上就是需要npm+node.js 相關工具 Git Linux Arch系列 1sudo pacman -S git Debian/Ubuntu系 1sudo apt-get install git-core 由於Github Desktop Linux版的安裝比較麻煩,尤其是在強國天朝內沒有翻牆的情況下安裝比較累 所以會建議用Command Line的git就好了,大不了寫成script還是很方便 Windows Windows下建議直接下載Github Desktop會比較方便,可以在官方網頁上下載安裝也可以透過chocolatey安裝 1choco install github-desktop node.js &amp; npm Linux Arch系列 1sudo pacman -S nodejs npm Debian/Ubuntu系 1sudo apt-get install -y nodejs npm Windows 同Github Desktop,可以去node.js下載安裝,裝的時候就會包含npm一起裝了,或是透過chocolatey安裝 1choco install nodejs Hexo安裝 Hexo是利用npm安裝的,我沒在WIndows下安裝過,但是我想應該都是一樣的 1npm install -g hexo-cli 跑完就裝好了","categories":[{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/categories/Network/"},{"name":"Hexo","slug":"Network/Hexo","permalink":"http://kiwi0093.github.io/wiki/categories/Network/Hexo/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://kiwi0093.github.io/wiki/tags/Git/"},{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/tags/Network/"},{"name":"Server","slug":"Server","permalink":"http://kiwi0093.github.io/wiki/tags/Server/"},{"name":"Blog","slug":"Blog","permalink":"http://kiwi0093.github.io/wiki/tags/Blog/"},{"name":"Wiki","slug":"Wiki","permalink":"http://kiwi0093.github.io/wiki/tags/Wiki/"}]},{"title":"Hexo的Plugin與使用","slug":"Network/Hexo/4-Hexo-plugin","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/Network/Hexo/4-Hexo-plugin/","permalink":"http://kiwi0093.github.io/wiki/wiki/Network/Hexo/4-Hexo-plugin/","excerpt":"Plugin安裝方法 Hexo Plugin官方網頁:https://hexo.io/plugins/","text":"Plugin安裝方法 Hexo Plugin官方網頁:https://hexo.io/plugins/ 基本命令 123456#安裝npm install &lt;plugin&gt; --save#解除安裝npm uninstall &lt;plugin&gt; --save#更新plugin &amp; Framework(under Hexo Dir)npm update 追加指令 先安裝npm-check-update 12#Manjaro環境pacman -S npm-check-update 有用的指令 123456789#確認哪些package過期了npm outdate#確認是否有最新的packagenpm-check-update#update package.jsonncu -u#更新packagenpm install 另外,當git clone下整個Blog(包含package.json)時可以不用重新下安裝指令 12#依照package.json更新整個node_modulenpm update 本站有安裝的Plugin hexo-deployer-git hexo-renderer-markdown-it-plus hexo-html-minifier 相關設定 Render-markdown-it-plus Section 12345678910markdown_it_plus: highlight: true html: true xhtmlOut: true breaks: true langPrefix: linkify: true typographer: quotes: “”‘’ pre_class: highlight Deployment Section 1234deploy: type: git repo: https://github.com/&lt;Username&gt;/&lt;username&gt;.github.io branch: &lt;branch_name&gt; Hexo-html-minifier 1234567891011html_minifier: collapseBooleanAttributes: true collapseWhitespace: true # Ignore &#x27;&lt;!-- more --&gt;&#x27; https://hexo.io/docs/tag-plugins#Post-Excerpt ignoreCustomComments: [ !!js/regexp /^\\s*more/] removeComments: true removeEmptyAttributes: true removeScriptTypeAttributes: true removeStyleLinkTypeAttributes: true minifyJS: true minifyCSS: true","categories":[{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/categories/Network/"},{"name":"Hexo","slug":"Network/Hexo","permalink":"http://kiwi0093.github.io/wiki/categories/Network/Hexo/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://kiwi0093.github.io/wiki/tags/Git/"},{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/tags/Network/"},{"name":"Server","slug":"Server","permalink":"http://kiwi0093.github.io/wiki/tags/Server/"},{"name":"Blog","slug":"Blog","permalink":"http://kiwi0093.github.io/wiki/tags/Blog/"},{"name":"Wiki","slug":"Wiki","permalink":"http://kiwi0093.github.io/wiki/tags/Wiki/"}]},{"title":"Hexo基本設定與使用","slug":"Network/Hexo/3-Hexo-setting","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/Network/Hexo/3-Hexo-setting/","permalink":"http://kiwi0093.github.io/wiki/wiki/Network/Hexo/3-Hexo-setting/","excerpt":"Hexo本體設定 Hexo本體的設定均在&lt;folder&gt;/_config.yml裡面,大多數的設定都可以直接沿用很方便只有一些部分需要修改調整 詳細的Hexo Configuration","text":"Hexo本體設定 Hexo本體的設定均在&lt;folder&gt;/_config.yml裡面,大多數的設定都可以直接沿用很方便只有一些部分需要修改調整 詳細的Hexo Configuration #Site Section 12345678# Sitetitle: Kiwi&#x27;s Blogsubtitle: 中年大叔的自言自語description: &#x27;&#x27;keywords:author: Kiwi language: zh_TWtimezone: 設定 描述 title 網站標題 subtitle 網站副標題 description 網站描述 keywords 網站的關鍵詞。支援多個關鍵詞。 author 您的名字 language 網站使用的語言，參考 2-lettter ISO-639-1 code，預設為 en timezone 網站時區，Hexo 預設使用您電腦的時區，您可以在 時區列表 尋找適當的時區，例如 America/New_York 、 Japan 與 UTC #URL Section 如果您的網站存放在子目錄中，例如 http://example.org/blog，請將您的 url 設為 http://example.org/blog 並把 root 設為 /blog/。 12345678# URLurl: https://kiwi0093.github.io/root: /permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls: trailing_index: true trailing_html: true 設定 描述 預設值 url 網站的網址，must starts with http:// or https:// root 網站的根目錄 permalink 文章 永久連結 的格式 :year/:month/:day/:title/ permalink_defaults permalink 中各區段的預設值 pretty_urls 改寫 permalink 的值來美化 URL pretty_urls.trailing_index 是否在永久鏈接中保留尾部的 index.html，設置為 false 時去除 true pretty_urls.trailing_html 是否在永久鏈接中保留尾部的 .html, 設置為 false 時去除 (對尾部的 index.html無效) true #Directory Section 123456789# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render: 設定 描述 預設值 source_dir 原始檔案資料夾，這個資料夾用於存放您的內容 source public_dir 靜態檔案資料夾，這個資料夾用於存放建立完畢的檔案 public tag_dir 標籤資料夾 tags archive_dir 彙整資料夾 archives category_dir 分類資料夾 categories code_dir Include code 資料夾 downloads/code i18n_dir 國際化（i18n）資料夾 :lang skip_render 跳過指定檔案的渲染，您可使用 glob 表達式 來配對路徑 # Writing Section 12345678910111213141516171819202122232425# Writingnew_post_name: :title.mddefault_layout: posttitlecase: falseexternal_link: enable: true field: site exclude: &#x27;&#x27;filename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: &#x27;&#x27; wrap: true hljs: falseprismjs: enable: false preprocess: true line_number: true tab_replace: &#x27;&#x27; 設定 描述 預設值 new_post_name 新文章的檔案名稱 :title.md default_layout 預設佈局 post auto_spacing 在西方文字與東方文字中加入空白 false titlecase 把標題轉換為 title case false external_link 在新頁籤中開啟連結 true external_link.enable 在新頁籤中開啟連結 true external_link.field Applies to the whole site or post only site external_link.exclude Exclude hostname. Specify subdomain when applicable, including www [] filename_case 把檔案名稱轉換為: 1 小寫或 2 大寫 0 render_drafts 顯示草稿 false post_asset_folder 啟動 Asset 資料夾 false relative_link 把連結改為與根目錄的相對位址 false future 顯示未來的文章 true highlight 程式碼區塊的設定, see Highlight.js section for usage guide prismjs 程式碼區塊的設定, see PrismJS section for usage guide # Homepage Section 12345678# Home page setting# path: Root path for your blogs index page. (default = &#x27;&#x27;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: &#x27;&#x27; per_page: 10 order_by: -date # Category &amp; Tag Section 1234# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map: 設定 描述 預設值 default_category 預設分類 uncategorized category_map 分類別名 tag_map 標籤別名 # Date &amp; Time Section 12345678# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;updated_option: &#x27;mtime&#x27; # Pagination Section 123# Paginationper_page: 10pagination_dir: page 設定 描述 預設值 per_page 一頁顯示的文章量 (0 = 關閉分頁功能) 10 pagination_dir 分頁目錄 page # Include / Exclude Section 12345# Include / Exclude file(s)## include:/exclude: options only apply to the &#x27;source/&#x27; folderinclude:exclude:ignore: 設定 描述 include Hexo 預設會忽略隱藏檔與隱藏資料夾，但列在這個欄位中的檔案，Hexo 仍然會去處理 exclude 列在這裡的檔案將會被 Hexo 忽略 ignore Ignore files/folders # Extension Section 1234567891011# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: https://github.com/Kiwi0093/Kiwi0093.github.io branch: master 設定 描述 theme 使用主題名稱, 設為 false 表示關閉主題功能 deploy 佈署設定 #Update 2021/8/16 因為Github修改了政策,所以無法直接在https模式下用帳號/密碼登入,所以deloy的設定得改成以下 123456# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: https://&lt;token&gt;@github.com/Kiwi0093/Kiwi0093.github.io branch: master 要注意這樣設定的話hexo d -g就不用在輸入username/password但是一旦這個token流出去也會很有問題,最簡單的解就是把整個repo改成private這樣可以多少減少問題 Hexo使用方式 12345678#清除建立好的資料hexo clean#建立靜態網頁hexo g#啟動Local Serverhexo s#Deploy到Server上hexo d Hexo剛建好的時候需要手動建立以下頁面 新增一個分類主頁：hexo new page categories 新增一個Tag主頁：hexo new page tags 在 source/tags/index.md 编辑: 123---type: &quot;tags&quot;--- Hexo使用其他config.yml的方法 12345# 使用自訂的 &#x27;custom.yml&#x27; 取代預設的 &#x27;_config.yml&#x27;$ hexo server --config custom.yml# 使用多個配置檔, 有衝突時優先使用 &#x27;custom2.json&#x27;$ hexo server --config custom.yml,custom2.json 參考資料 OHLIA’s Wiki Hexo的官方文件 同場加映 最近更新後常常會有 123456789101112131415161718192021222324252627282930313233FATAL YAMLException: unknown tag !&lt;tag:yaml.org,2002:js/regexp&gt; (116:49) 113 | ... ttributes: true 114 | ... ce: true 115 | ... ore --&gt;&#x27; https://hexo.io/docs/tag-plugins#Post-Excerpt 116 | ... ents: [ !!js/regexp /^\\s*more/]------------------------------------------^ 117 | ... true 118 | ... butes: true at generateError (/home/kiwi/GitHub/Wiki-site/node_modules/js-yaml/lib/loader.js:183:10) at throwError (/home/kiwi/GitHub/Wiki-site/node_modules/js-yaml/lib/loader.js:187:9) at composeNode (/home/kiwi/GitHub/Wiki-site/node_modules/js-yaml/lib/loader.js:1521:7) at readFlowCollection (/home/kiwi/GitHub/Wiki-site/node_modules/js-yaml/lib/loader.js:780:5) at composeNode (/home/kiwi/GitHub/Wiki-site/node_modules/js-yaml/lib/loader.js:1442:11) at readBlockMapping (/home/kiwi/GitHub/Wiki-site/node_modules/js-yaml/lib/loader.js:1164:11) at composeNode (/home/kiwi/GitHub/Wiki-site/node_modules/js-yaml/lib/loader.js:1441:12) at readBlockMapping (/home/kiwi/GitHub/Wiki-site/node_modules/js-yaml/lib/loader.js:1164:11) at composeNode (/home/kiwi/GitHub/Wiki-site/node_modules/js-yaml/lib/loader.js:1441:12) at readDocument (/home/kiwi/GitHub/Wiki-site/node_modules/js-yaml/lib/loader.js:1625:3) at loadDocuments (/home/kiwi/GitHub/Wiki-site/node_modules/js-yaml/lib/loader.js:1688:5) at Object.load (/home/kiwi/GitHub/Wiki-site/node_modules/js-yaml/lib/loader.js:1714:19) at Hexo.yamlHelper (/home/kiwi/GitHub/Wiki-site/node_modules/hexo/lib/plugins/renderer/yaml.js:7:15) at Hexo.tryCatcher (/home/kiwi/GitHub/Wiki-site/node_modules/bluebird/js/release/util.js:16:23) at Hexo.&lt;anonymous&gt; (/home/kiwi/GitHub/Wiki-site/node_modules/bluebird/js/release/method.js:15:34) at /home/kiwi/GitHub/Wiki-site/node_modules/hexo/lib/hexo/render.js:75:22 at tryCatcher (/home/kiwi/GitHub/Wiki-site/node_modules/bluebird/js/release/util.js:16:23) at Promise._settlePromiseFromHandler (/home/kiwi/GitHub/Wiki-site/node_modules/bluebird/js/release/promise.js:547:31) at Promise._settlePromise (/home/kiwi/GitHub/Wiki-site/node_modules/bluebird/js/release/promise.js:604:18) at Promise._settlePromise0 (/home/kiwi/GitHub/Wiki-site/node_modules/bluebird/js/release/promise.js:649:10) at Promise._settlePromises (/home/kiwi/GitHub/Wiki-site/node_modules/bluebird/js/release/promise.js:729:18) at _drainQueueStep (/home/kiwi/GitHub/Wiki-site/node_modules/bluebird/js/release/async.js:93:12) &#123; reason: &#x27;unknown tag !&lt;tag:yaml.org,2002:js/regexp&gt;&#x27;,....... 這樣的錯誤訊息跑出來,解決方案如下 123456789101112131415# /under/your/web/_config.yml---------------------------------------------------------------------------------------------------------------------------------....html_minifier: collapseBooleanAttributes: true collapseWhitespace: true # Ignore &#x27;&lt;!-- more --&gt;&#x27; https://hexo.io/docs/tag-plugins#Post-Excerpt #ignoreCustomComments: [ !!js/regexp /^\\s*more/] #把這行Mark掉就好了 removeComments: true removeEmptyAttributes: true removeScriptTypeAttributes: true removeStyleLinkTypeAttributes: true minifyJS: true minifyCSS: true...","categories":[{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/categories/Network/"},{"name":"Hexo","slug":"Network/Hexo","permalink":"http://kiwi0093.github.io/wiki/categories/Network/Hexo/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://kiwi0093.github.io/wiki/tags/Git/"},{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/tags/Network/"},{"name":"Server","slug":"Server","permalink":"http://kiwi0093.github.io/wiki/tags/Server/"},{"name":"Blog","slug":"Blog","permalink":"http://kiwi0093.github.io/wiki/tags/Blog/"},{"name":"Wiki","slug":"Wiki","permalink":"http://kiwi0093.github.io/wiki/tags/Wiki/"}]},{"title":"Next Theme的安裝與設定","slug":"Network/Hexo/5-Next_theme","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/Network/Hexo/5-Next_theme/","permalink":"http://kiwi0093.github.io/wiki/wiki/Network/Hexo/5-Next_theme/","excerpt":"前言 Next主題是一個很漂亮的Blog主題/風格,安裝起來也非常簡單用npm直接下指令安裝就好了","text":"前言 Next主題是一個很漂亮的Blog主題/風格,安裝起來也非常簡單用npm直接下指令安裝就好了 安裝 Next Theme官網上有兩種安裝方式 透過npm直接安裝(需要Hexo5.0以上版本) 12#在Hexo目錄下npm install hexo-theme-next 安裝後直接變更Hexo目錄的_config.yml內的theme部分就可以用了 1theme: next 透過Git指令直接clone整個theme到Hexo的theme目錄 V8後基本上都用npm安裝 12#在Hexo目錄下git clone https://github.com/next-theme/hexo-theme-next themes/next 安裝後一樣要變更Hexo目錄的_config.yml 1theme: next 設定 #Theme Setting 將Theme的_config.yml複製為_config.[Theme_name].yml 詳細的說明可以參考官方的文件說明 基本上只需要修改下述幾個主要參數就可以了 #Choosing Scheme 123456789101112# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes#scheme: Musescheme: Mist#scheme: Pisces#scheme: Gemini# Dark Modedarkmode: true 有四種scheme可以挑選,官網上有範例可以參考Muse, Mist, Pisces, Gemini可以自行挑選後修改設定啟用 另外現在Next官方支援Darkmode,預設是false,修改成true後可以變成darkmode #手動切換Darkmode 參考資料 Clay 的技术博客 設定方式 安裝Plug-in 1$ npm install hexo-next-darkmode --save 設定 1234567891011121314151617181920212223#_config.next.yml---------------------------------------------------------------------------------------------------------------------------------# disable default Darkmodedarkmode: false# add below# Darkmode JS# For more information: https://github.com/rqh656418510/hexo-next-darkmode, https://github.com/sandoche/Darkmode.jsdarkmode_js: enable: true bottom: &#x27;64px&#x27; # default: &#x27;32px&#x27; right: &#x27;unset&#x27; # default: &#x27;32px&#x27; left: &#x27;32px&#x27; # default: &#x27;unset&#x27; time: &#x27;0.5s&#x27; # default: &#x27;0.3s&#x27; mixColor: &#x27;transparent&#x27; # default: &#x27;#fff&#x27; backgroundColor: &#x27;transparent&#x27; # default: &#x27;#fff&#x27; buttonColorDark: &#x27;#100f2c&#x27; # default: &#x27;#100f2c&#x27; buttonColorLight: &#x27;#fff&#x27; # default: &#x27;#fff&#x27; isActivated: false # default false saveInCookies: true # default: true label: &#x27;🌓&#x27; # default: &#x27;&#x27; autoMatchOsTheme: true # default: true libUrl: # Set custom library cdn url for Darkmode.js isActivated: true：默認使用Darkmode，始終搭配 saveInCookies: false、autoMatchOsTheme: false Menu 12345678910111213141516171819# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------menu: home: / || fa fa-home #about: /about/ || fa fa-user tags: /tags/ || fa fa-tags categories: /categories/ || fa fa-th archives: /archives/ || fa fa-archive #schedule: /schedule/ || fa fa-calendar #sitemap: /sitemap.xml || fa fa-sitemap #commonweal: /404/ || fa fa-heartbeat wiki: https://kiwi0093.github.io/Wiki-site/ || fa fa-sitemap# Enable / Disable menu icons / item badges.menu_settings: icons: true badges: false 編輯這個部分可以簡易做出Blog框架內的選單,在官方文件內還有介紹出可以分層的Menu寫法,如下 12345678910111213menu: home: / || fa fa-home archives: /archives/ || fa fa-archive Docs: default: /docs/ || fa fa-book Getting Started: default: /getting-started/ || fa fa-flag Installation: /installation.html || fa fa-download Configuration: /configuration.html || fa fa-wrench Third Party Services: default: /third-party-services/ || fa fa-puzzle-piece Math Equations: /math-equations.html || fa fa-square-root-alt Comment Systems: /comments.html || fa fa-comment-alt 其他的細部設定就參考官方文件設定即可 在現在的架構下務必要加上 1wiki: https://kiwi0093.github.io/Wiki-site/ || fa fa-sitemap 才會建立Wiki的Link 留言功能 我搞了一圈最後還是選擇使用Disqus+DisqusJS自己搭建的isso 參考資料 老青菜 DisqusJS Github 申請Disqus帳號這個 這個去官網申請就好了,申請完後記得連API一起弄一下(參考DisqusJS Github的作法) 設定檔 123456789101112131415161718192021#_config.next.yml---------------------------------------------------------------------------------------------------------------------------------# Disqusdisqus: enable: true shortname: $&#123;your_shortname&#125; count: true# DisqusJS# Alternative Disqus - Render comment component using Disqus API.# Demo: https://suka.js.org/DisqusJS/# For more information: https://github.com/SukkaW/DisqusJSdisqusjs: enable: true # API Endpoint of Disqus API (https://disqus.com/api/). # Leave api empty if you are able to connect to Disqus API. Otherwise you need a reverse proxy for it. # For example: # api: https://disqus.skk.moe/disqus/ api: apikey: $&#123;Your_API_KEY&#125; # Register new application from https://disqus.com/api/applications/ shortname: $&#123;your_shortname&#125; # See: https://disqus.com/admin/settings/general/ 好了之後hexo clean,hexo d -g就好了 ISSO - 參考 請參考另外一篇Isso comment system for Hexo Blog | Kiwi’s Wiki (kiwi0093.github.io)","categories":[{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/categories/Network/"},{"name":"Hexo","slug":"Network/Hexo","permalink":"http://kiwi0093.github.io/wiki/categories/Network/Hexo/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://kiwi0093.github.io/wiki/tags/Git/"},{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/tags/Network/"},{"name":"Server","slug":"Server","permalink":"http://kiwi0093.github.io/wiki/tags/Server/"},{"name":"Blog","slug":"Blog","permalink":"http://kiwi0093.github.io/wiki/tags/Blog/"}]},{"title":"Wikitten Theme的安裝與設定","slug":"Network/Hexo/6-Wikitten_theme","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/Network/Hexo/6-Wikitten_theme/","permalink":"http://kiwi0093.github.io/wiki/wiki/Network/Hexo/6-Wikitten_theme/","excerpt":"前言 這是我這個Wiki站的主體框架,除了一部分的配色我會自己改一下以外其他部份都原汁原味","text":"前言 這是我這個Wiki站的主體框架,除了一部分的配色我會自己改一下以外其他部份都原汁原味 安裝 這個Theme安裝相較之下就簡單很多,只有git clone的安裝方法 12#在Hexo目錄下git clone https://github.com/zthxxx/hexo-theme-Wikitten.git themes/Wikitten 複製以下檔案 123cp -rf themes/Wikitten/_source/* source/cp -rf themes/Wikitten/_scaffolds/* scaffolds/cp -f themes/Wikitten/_config.yml.example _config.Wikitten.yml 安裝以下Plugin hexo-autonofollow // 打开非本站链接时自动开启新标签页 hexo-directory-category // 根据文章文件目录自动为文章添加分类 hexo-generator-feed // 生成 RSS 源 hexo-generator-json-content // 生成全站文章 json 内容，用于全文搜索 hexo-generator-sitemap // 生成全站站点地图 sitemap 1npm i -S hexo-autonofollow hexo-directory-category hexo-generator-feed hexo-generator-json-content hexo-generator-sitemap 修改_config.yml 1theme: Wikitten 設定 Hexo本體 依照原始架構設想,Wiki會被另外裝到Wiki-site裡面,所以_config.yml內屬於Wiki的有一部分要修改 #Site &amp; URL 123456789101112131415161718# Sitetitle: Kiwi&#x27;s Wikisubtitle: description: &#x27;&#x27;keywords:author: Kiwilanguage: entimezone: &#x27;&#x27;# URL## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;url: http://Kiwi0093.github.io/Wiki-siteroot: /Wiki-sitepermalink: wiki/:title/permalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks 因為是Wiki-Site,所以root部分要變更為/Wiki-site,並且將permalink修改為wiki/:title/ #目錄 1234567891011# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render: - README.md - &#x27;_posts/**/embed_page/**&#x27; 在skip_render後加上 12- README.md- &#x27;_posts/**/embed_page/**&#x27; #theme &amp; deploy 1234567891011# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: Wikitten# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: https://github.com/Kiwi0093/Wiki-site branch: gh-pages deploy的部分需要把branch改成gh-pages確保網頁會到https://kiwi0093.github.io/Wiki-site/ Wikitten主題設定 #Menu 12345678# Menusmenu: 首頁: / 歸檔: /archives 分類: /categories 標籤: /tags 關於: /about Blog : https://Kiwi0093.github.io 記得加上Blog : https://Kiwi0093.github.io確保Wiki頁面上有連回Blog的連結 #Customize 12345678910111213141516171819202122232425# Customizecustomize: logo: enabled: true width: 40 height: 40 url: /logo.png profile: enabled: false # Whether to show profile bar avatar: # css/images/avatar.png gravatar: Kiwi@kaienroid.com # Gravatar email address, if you enable Gravatar, your avatar config will be overriden author: Kiwi author_title: Designer &amp; Programmer location: Taipei, Taiwan follow: https://github.com/Kiwi0093/ highlight: monokai sidebar: left # sidebar position, options: left, right category_perExpand: false # enable article categories list per expanding thumbnail: true # enable posts thumbnail, options: true, false favicon: /favicon.ico # path to favicon default_index_file: index.md # if this, it will display at site index instead of default index page social_links: github: https://github.com/Kiwi0093/Kiwi0093.github.io rss: /atom.xml social_link_tooltip: true # enable the social link tooltip, options: true, false 這個部分主要是設定框架 #Widget 12345678# Widgetswidgets: # default use category only - category # - recent_posts # - archive # - tag # - tagcloud # - links 這個可以設定有哪些會列出來在左右側的框架內 #歷史版本確認 1234567# History version history_control: # make you wiki has history version control in page enable: true server_link: https://github.com # recommend use GitHub https://github.com user: Kiwi0093 repertory: Wiki-site branch: master 這部分可以讓Wiki的歷史版本直接跟github的版本控制連動 變更顏色 themes/Wikitten/source/css/_variables.styl 123456789101112// Colorscolor-default = #565a5fcolor-grey = #999color-border = #dfe1e2color-border-stretch = #c1cfdccolor-link = #eb783b //#38b7eacolor-background = #ebeef1color-meta-head = #7b848ccolor-sidebar-text = #777color-sidebar-text-dark = #333color-widget-background = #dddcolor-widget-border = #ccc 個人會把Link的顏色從藍色#38b7ea變更為橘色#eb783b 顏色的選擇可以使用google查詢任意一個顏色的HEX code,就會有google的小工具可以使用了 參考資料 A Learning Blog Theme作者Zthxxx’s Wiki Theme Wiki","categories":[{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/categories/Network/"},{"name":"Hexo","slug":"Network/Hexo","permalink":"http://kiwi0093.github.io/wiki/categories/Network/Hexo/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://kiwi0093.github.io/wiki/tags/Git/"},{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/tags/Network/"},{"name":"Server","slug":"Server","permalink":"http://kiwi0093.github.io/wiki/tags/Server/"},{"name":"Wiki","slug":"Wiki","permalink":"http://kiwi0093.github.io/wiki/tags/Wiki/"}]},{"title":"V2ray Behide Traefik","slug":"Network/V2Ray/4-v2ray_behide_traefik","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/Network/V2Ray/4-v2ray_behide_traefik/","permalink":"http://kiwi0093.github.io/wiki/wiki/Network/V2Ray/4-v2ray_behide_traefik/","excerpt":"前言 若是要讓VPS除了V2ray以外還可以跑其他的Web Service, 除了Nginx/Apache的Virtual Host方案外還可以採用Traefik(Container專用) 但是單純V2ray+Traefik的搭配時,ACME申請SSL憑證這個地方因為沒有實際的httpd服務而失敗卡死，所以還是會需要一個Nginx","text":"前言 若是要讓VPS除了V2ray以外還可以跑其他的Web Service, 除了Nginx/Apache的Virtual Host方案外還可以採用Traefik(Container專用) 但是單純V2ray+Traefik的搭配時,ACME申請SSL憑證這個地方因為沒有實際的httpd服務而失敗卡死，所以還是會需要一個Nginx Config.json for V2ray 123456789101112131415161718192021222324252627282930313233343536# /var/lib/docker/volume/v2ray/config.json-----------------------------------------------------&#123; &quot;log&quot;: &#123; &quot;loglevel&quot;: &quot;warning&quot; &#125;, &quot;inbounds&quot;: [ &#123; &quot;port&quot;: &lt;Port_You_Want&gt;, &quot;listen&quot;: &quot;0.0.0.0&quot;, &quot;protocol&quot;: &quot;vless&quot;, &quot;settings&quot;: &#123; &quot;clients&quot;: [ &#123; &quot;id&quot;: &quot;&lt;UUID_You_Want&gt;&quot;, &quot;level&quot;: 0, &quot;email&quot;: &quot;&lt;Mail_Address_You_Want&gt;&quot; &#125; ], &quot;decryption&quot;: &quot;none&quot; &#125;, &quot;streamSettings&quot;: &#123; &quot;network&quot;: &quot;ws&quot;, &quot;security&quot;: &quot;none&quot;, &quot;wsSettings&quot;: &#123; &quot;path&quot;: &quot;/&lt;Path_You_Want&gt;&quot; &#125; &#125; &#125; ], &quot;outbounds&quot;: [ &#123; &quot;protocol&quot;: &quot;freedom&quot; &#125; ]&#125; 簡單的說明一下,就是把原來當作接口用的443 Port部份那段拿掉,回歸早期透過Caddy/Apache/Nginx做代轉的寫法 Default for Nginx 123456789101112131415161718192021222324# /var/lib/docker/volumes/nginx/config/nginx/site-confs/default-----------------------------------------------------------------------server &#123; server_name _; listen 80; location / &#123; root /var/www/html; index index.html index.htm; &#125; location /ray &#123; proxy_redirect off; proxy_pass http://v2ray:&lt;Port_You_Want&gt;; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; proxy_set_header Host $http_host; &#125; location ~ \\.php$ &#123; deny all; &#125;&#125; 利用Links把兩個Container連在一起，可以直接用http://v2ray指定轉移 Docker-Compose.yml 12345678910111213141516171819202122232425262728293031323334353637version: &quot;3.7&quot;services: nginx: image: lscr.io/linuxserver/nginx container_name: Nginx_v2ray environment: - PUID=1000 - PGID=1000 - TZ=Asia/Taipei expose: - 80 restart: always volumes: - /var/lib/docker/volumes/nginx/config:/config links: - v2ray:v2ray labels: traefik.enable: true traefik.http.routers.v2ray.rule: Host(`&lt;domain.you.want&gt;`) traefik.http.routers.v2ray.tls: true traefik.http.routers.v2ray.tls.certresolver: myresolver v2ray: image: v2fly/v2fly-core container_name: v2ray environment: - TZ=Asia/Taipei restart: always command: v2ray --config=/etc/v2ray/config.json volumes: - /var/lib/docker/volumes/v2ray:/etc/v2raynetworks: default: external: true name: traefik_backend 用nginx當作整個服務的前端去對應traefik 後面的v2ray完整的躲起來連expose都不需要 這樣子更新的時候才不會因為特殊的image更新比較慢而產生問題(有整合的image但是兩年沒更新了…)","categories":[{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/categories/Network/"},{"name":"V2Ray","slug":"Network/V2Ray","permalink":"http://kiwi0093.github.io/wiki/categories/Network/V2Ray/"}],"tags":[{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"},{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/tags/Network/"},{"name":"V2Ray","slug":"V2Ray","permalink":"http://kiwi0093.github.io/wiki/tags/V2Ray/"},{"name":"VPN","slug":"VPN","permalink":"http://kiwi0093.github.io/wiki/tags/VPN/"}]},{"title":"Photon OS 4.0 GA","slug":"VM&Container/PhotonOS & Docker Basic/1-PhotonOS","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/PhotonOS & Docker Basic/1-PhotonOS/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/PhotonOS%20&%20Docker%20Basic/1-PhotonOS/","excerpt":"前言 由於打算把所有的網路服務都逐步改成docker的方式,所以打算把底層的系統也換成Vmware針對docker等容器特化版的Linux - PhotoOS","text":"前言 由於打算把所有的網路服務都逐步改成docker的方式,所以打算把底層的系統也換成Vmware針對docker等容器特化版的Linux - PhotoOS Installation 下載Image ISO 然後在VMware workstation或VMware Esxi上建立新的VM(選擇VMware PhotonOS 64 bits或是Linux Kernel最新的64bits都可以) 用光碟開機後依照步驟做就好了 基本上這個系統需要的RAM跟空間很小,但是你會需要RAM跟空間來跑Docker.所以在建立的時候請考慮你要使用的服務數量來設定你的RAM跟空間 Basic Setup 確認基本服務 12#看一下基本的系統服務是否有開啟,例如open-vm-toolssystemctl status vmtoolsd.service 帳號設定 安裝的時候就會設定root密碼了,可以利用useradd再增加一般使用者(為了安全性) 1234#增加使用者useradd -m -g root $(your_id)#替你的帳號設定密碼passwd $(your_id) 因為使用上還是很常會需要root權限,所以可以依照個人喜好決定是否要建立額外帳號然後登入後用su或是sudo或是直接修改/etc/ssh/sshd_config改成允許root ssh登入都可以 網路設定 Systemd-Networkd 基本規則 參考網頁systemd-networkd@ArchWiKi 安裝後的系統預設是dhcp開啟的狀態,若是只要單ip並且有另外的dhcpd加上Mac Address控制的話是可以不用動,有其他需求的需要去修改以下檔案 關閉DHCP 12345678#/etc/systemd/network/99-dhcp-en.network--------------------------------------------------------------------------------------------------------------------------------[match]Name=e*[Network]DHCP=yes #這個改成no來關閉dhcpIPv6AcceptRA=no 固定IP設定方法 1234567891011121314#/etc/systemd/network/10-static-en.network--------------------------------------------------------------------------------------------------------------------------------[Match]Name=ens160 #網卡名稱[Network]Address=10.1.10.9/24 #IP位置,可重複多次定義多個IPGateway=10.1.10.1 #Gateway IPDNS=10.1.10.1 #DNS IP# NTP設定,用空白隔開不同ServerNTP=tock.stdtime.gov.tw watch.stdtime.gov.tw time.stdtime.gov.tw clock.stdtime.gov.tw tick.stdtime.gov.tw# 關閉IPV6LinkLocalAddressing=noIPv6AcceptRA=no 設定網路介面名稱 12345678#/etc/systemd/network/10-ethusb0.link--------------------------------------------------------------------------------------------------------------------------------[Match]MACAddress=00:00:00:00:00:00 #卡號[Link]Description=USB to Ethernet Adapter #這張網路卡的說明Name=ethusb0 #介面名字 想建立多張網卡的話就建立三個檔案分開定義卡號就好了 升級系統packages 1yum update 安裝程式package 1yum install -y vim #安裝vim 尋找package 1yum search python #尋找所有名字裡有python的package 掛載SMB分享的檔案 基本上會把docker的volume檔案夾先mount上NAS上的備份用資料夾,這樣可以 簡單備份 減少PhotonOS的HDD空間需求 針對某些需要NAS上檔案的docker服務可以直接access 參考資料 Cifs-utils 基本上我的音樂檔案都是放在NAS上面,雖然可以透過NFS掛在機器上,但是同理也可以用SMB/Cifs掛載 在PhotonOS上可以利用yum安裝 1yum install -y cifs-utils 然後修改加入 123#/etc/fstab--------------------------------------------------------------------------------------------------------------------------------\\\\winbox\\getme /mnt/win cifs user,uid=500,rw,noauto,suid,credentials=/root/secret 0 0 以及 1234/root/secert--------------------------------------------------------------------------------------------------------------------------------username=sushi #SMB IDpassword=yummy #SMB ID的Password 記得/root/secert的權限改成0400 Cifs-utils + autofs 這個可以自動加卸載這個在photonOS上測試無效 1yum install -y autofs 增加到 123#/etc/auto.master--------------------------------------------------------------------------------------------------------------------------------/mymount /etc/auto.mymount 然後編輯 123#/etc/auto.mymount--------------------------------------------------------------------------------------------------------------------------------winbox -fstype=cifs,rw,noperm,credentials=/root/secret.txt ://winbox/getme 有任何使用到/mymount的動作就會自動掛上 使用Systemd開機自動掛載 因為/etc/fstab的auto比網路還快就啟動,所以最保險的方法還是建立systemd的service,其他的方法基本上都無效 123456789101112＃/etc/systemd/system/mount.service---------------------------------------------------------------------------------------------------------------------------------[Unit]Description=mount CIFSAfter=network.target[Service]Type=simpleExecStart=/bin/mount -a[Install]WantedBy=multi-user.target 重點是要定義After=network.target這樣才會在有網路後進行","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"PhotonOS & Docker Basic","slug":"VM-Container/PhotonOS-Docker-Basic","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/PhotonOS-Docker-Basic/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"}]},{"title":"Basic Tools for Docker","slug":"VM&Container/PhotonOS & Docker Basic/2-Basic Tools","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/PhotonOS & Docker Basic/2-Basic Tools/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/PhotonOS%20&%20Docker%20Basic/2-Basic%20Tools/","excerpt":"前言 剛裝好的PhotonOS設定完基本後就是一些Docker相關的基本","text":"前言 剛裝好的PhotonOS設定完基本後就是一些Docker相關的基本 Basic Tools Docker-compose 1234#安裝python-pipyum install python3-pip#安裝docke-composepip3 install docker-compose","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"PhotonOS & Docker Basic","slug":"VM-Container/PhotonOS-Docker-Basic","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/PhotonOS-Docker-Basic/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"}]},{"title":"Ansible Environment Setup","slug":"Network/Ansible/Basic configuration/2-Setup","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/Network/Ansible/Basic configuration/2-Setup/","permalink":"http://kiwi0093.github.io/wiki/wiki/Network/Ansible/Basic%20configuration/2-Setup/","excerpt":"前言 安裝完Ansible後還要進行基礎的設定之後才能使用","text":"前言 安裝完Ansible後還要進行基礎的設定之後才能使用 Basic Configuration SSH key preparation 基本上雖然可以用--ask-pass指令輸入密碼來操作,但是實際上還是有ssh key比較簡單,詳細的部份就放在SSH Commands | Kiwi's Wiki /etc/ansible/ansible.cfg 在範例中可以用 1ansible-config init --disable-all &gt; /etc/ansible/ansible.cfg 來建立一個預設全部都關掉的cfg檔,又或是直接手動建立如下 12345＃/etc/ansible/ansible.cfg[defaults] # 定義整個section是defualtinventory=/etc/ansible/hosts # 定義inventory是要讀哪個檔,預設就是/etc/ansible/hostsprivate_key_file=/location/private.key # 定義預設連線時要用哪個ssh private key(若不打算用Key pair不用設定)remote_user=USER_on_server # 定義預設連線的USER,因為一般的Linux/FreeBSD Server都不喜歡用root直接連進去,所以會用其他使用者 基本上可以在hosts裡面針對不同的host(或是host group)進行設定,所以不一定需要在ansible.cfg內去設定remote_user或是private_key_file, 但是需要設定inventory位置 hosts 參考資料 Ansible official document - How to build Inventory 基本語法 12345678[tag1]server1.example.com[tag2]server2.example.com[tag3]server[a:z].example.com[tag4]192.168.0.101 上述的意思為有四個tag,一個是tag1有一台server1, tag2有一台server2,tag3有servera.example.com,serverb.example.com...serverz.example.com等26台server.tag4是ip表示的server 群組 :children 123456789101112[group1:children]tag1tag2[tag1]server1.example.com[tag2]server2.example.com[tag3]server[a:z].example.com[tag4]192.168.0.101 有一個群組裡面包括了tag1&amp;tag2,這個指令可以群組裡面包含群組弄成很多層 變數 :vars 123456789101112131415[group1:children]tag1tag2[tag1]server1.example.com ansible_user=myuser[tag2]server2.example.com[tag3]server[a:z].example.com[tag4]192.168.0.101[tag3:vars]ansible_passwd=mypassword 這裡設定了單項變數ansible_user=myuser在server1以及整體變數ansible_passwd=mypassword給tag3所有的機器上 參考範例 1234567891011121314151617181920212223242526272829303132333435363738# 設定localhost給在Localhost上使用的,主要是ansible-pull這種需要設定本機才需要# 需要先弄個[]定義個名字[Desktop] # 這裡不用ip而是用localhost來定義localhost # 定義[Desktop]的相關變數[Desktop:vars] # 有些python3的位置不是預設的（例如Manjaro)所以手動指定ansible_python_interpreter=/usr/bin/python3# 指定localhost的連線方式不使用ssh而是local ansible_connection=local# 這是用一個大集合包括小集合的概念[Oracle_Cloud:children]Oracle_PrivateOracle_Friend# 定義其中一個[Oracle_Private]# 可以是以下這種格式# 別名 ansible_ssh_host=XXX.XXX.XXX.XXX or my.server.domainoci1 ansible_ssh_host=xxx.xxx.xxx.xxxoci2 ansible_ssh_host=xxx.xxx.xxx.xxxoci3 ansible_ssh_host=xxx.xxx.xxx.xxx[Oracle_Friend]oci4 ansible_ssh_host=xxx.xxx.xxx.xxxoci5 ansible_ssh_host=xxx.xxx.xxx.xxx[Oracle_Cloud:vars]# 可以個別指定pythonansible_python_interpreter=/usr/bin/python3# 可以指定這個群組的連線account是誰ansible_ssh_user=UserNameYouUsing# 如前面說的可以指定對應的Private keyansible_ssh_private_key_file=/where/you/.ssh/the.key 基本上hosts或該說inventory設定對於ansible來說是非常重要的定義，因為這個檔案基本上定義了你所有需要被納管的remote node資訊所以不要沒事把連同這個檔案在內的ansible設定放在public accessable repo內","categories":[{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/categories/Network/"},{"name":"Ansible","slug":"Network/Ansible","permalink":"http://kiwi0093.github.io/wiki/categories/Network/Ansible/"},{"name":"Basic configuration","slug":"Network/Ansible/Basic-configuration","permalink":"http://kiwi0093.github.io/wiki/categories/Network/Ansible/Basic-configuration/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/tags/Network/"},{"name":"VPS","slug":"VPS","permalink":"http://kiwi0093.github.io/wiki/tags/VPS/"},{"name":"Ansible","slug":"Ansible","permalink":"http://kiwi0093.github.io/wiki/tags/Ansible/"}]},{"title":"Ansible Intro & Install","slug":"Network/Ansible/Basic configuration/1-Intro","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/Network/Ansible/Basic configuration/1-Intro/","permalink":"http://kiwi0093.github.io/wiki/wiki/Network/Ansible/Basic%20configuration/1-Intro/","excerpt":"前言 Ansible是一個Redhat支持開發的IT Automation工具, 基礎是python3+ssh","text":"前言 Ansible是一個Redhat支持開發的IT Automation工具, 基礎是python3+ssh Ansible Push mode 這是Ansible的基本功用由一台安裝Ansible的機器push指令到Inventory的機器上一次性進行所有的同步指令進行管理 Ad-Hoc指令 這是一次性的指令基本用法是 1ansible [pattern] -m [module] -a &quot;[module options]&quot; Playbook 這個可以視為是事先寫好的script可以讓Ansible直接依照該Playbook去跑複雜的動作進行管理後續會把自己寫的一部分整理起來 Pull Mode 這個是使用ansible-pull指令,將某地的Playbook拉到本機上套用,很適合用來進行單機的自動環境設定,像我這種會日益增加Linux機台的人很適合寫好playbook然後採用**ansible-pull+Github**的組合去儲存我的各種機器設定,缺點就是變成每一台機器都得要安裝ansible不然的話無法套用(push mode不用每台都安裝也可以跑) 1sudo ansible-pull -U https://your.git.server/user/repo playbook-you-want.yml 這樣就可以指定要pull哪個playbook來使用 安裝 安裝非常的簡單就我自己常用的Arch系與Debian/Ubuntu系的機器都是一行指令安裝完成 Arch/Manjaro 1sudo pacman -S ansible Debian/Ubuntu 1apt install ansible 基本連線 1ansible &lt;IP or name&gt; --ask-pass -m [module] 若是使用ssh key的話就不需要--ask-pass參數來要求手動輸入ssh password 有些Server會check host ssh key,所以可以去ansible.cfg裡面加上host_key_checking = False","categories":[{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/categories/Network/"},{"name":"Ansible","slug":"Network/Ansible","permalink":"http://kiwi0093.github.io/wiki/categories/Network/Ansible/"},{"name":"Basic configuration","slug":"Network/Ansible/Basic-configuration","permalink":"http://kiwi0093.github.io/wiki/categories/Network/Ansible/Basic-configuration/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/tags/Network/"},{"name":"VPS","slug":"VPS","permalink":"http://kiwi0093.github.io/wiki/tags/VPS/"}]},{"title":"Ansible Playbook & Roles","slug":"Network/Ansible/Playbook/1.playbook","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/Network/Ansible/Playbook/1.playbook/","permalink":"http://kiwi0093.github.io/wiki/wiki/Network/Ansible/Playbook/1.playbook/","excerpt":"前言 其實ansible有很完整的官方文件可以學習,不過我就把我自己會用的方法寫成筆記給自己做個memo","text":"前言 其實ansible有很完整的官方文件可以學習,不過我就把我自己會用的方法寫成筆記給自己做個memo 結構 看ansible官方的文件,一開始都會有一個playbook要包山包海的的念頭,不過不是我在說,一個包山包海的Playbook不僅難寫難維護,還很容易錯,所以我個人會建議盡可能的拆分成一個一個的模組這樣維護上會比較簡單,寫的時候也比較容易 個人喜愛的ansible框架 簡單說明 首先,對於自己的實力以及實際在跑得ansible playbook的效率的平衡,比較複雜的工作我會採用shell script + ansible的方式來進行, 因為是靠已經寫好的shell scripttrigger ansible playbook, 自然也就不用one playbook rule them all的思維來寫Playbook 基於上面的邏輯，所以Playbook自然就會focus在單一目的來編寫減少大量複雜而且容易出錯的條件判斷 在範例中,我會建立一個專門給manajro用的playbook,用途是用來setup我的manjaro desktop, 然而這個Playbook裡面會長這樣 Playbook Level 123456789101112131415161718192021222324252627---- hosts: localhost connection: local gather_facts: no become: true roles: - base - neovim - desktop - brave - fcitx - ulauncher - remmina - marktext - ssh-key - wireguard - kde - cinnamon - gnome - xfce- hosts: localhost connection: local become: true tasks: - name: clean up package cache | Archlinux Family command: pacman -Scc --noconfirm 首先這個playbook裡面有兩個play, 一個定義了一堆roles, 另外一個則是要求清空安裝的cache檔,老實說第二個play是不需要的,真的需要的只有第一個play 第一個play與其他文件上講的差異很大,基本上沒有任何task也沒任何條件判別就是很單純的定義localhost要有這些roles 這裡就是好的地方,因為我可以簡單定義這個所謂的本機需要多少子項在內，然後有重複的子項就可以回收使用 Roles 基本上roles就是一堆task的內容定義，結構是roles/roles_name/files跟roles/roles_name/tasks然後會自然呼叫roles/roles_name/tasks/main.yml 1234567891011- name: System ZSH Powerlevel &amp; Environment Setting tags: zsh become: true ansible.posix.synchronize: src=&#123;&#123; item.src &#125;&#125; dest=&#123;&#123; item.dest &#125;&#125; with_items: - &#123; src: &#x27;files/zshrc&#x27;, dest: &#x27;/root/.zshrc&#x27; &#125; - &#123; src: &#x27;files/zshrc&#x27;, dest: &#x27;/home/kiwi/.zshrc&#x27; &#125; - &#123; src: &#x27;files/tmux.conf&#x27;, dest: &#x27;/home/kiwi/.tmux.conf&#x27; &#125; - &#123; src: &#x27;files/tmux.conf.local&#x27;, dest: &#x27;/home/kiwi/.tmux.conf.local&#x27; &#125; - &#123; src: &#x27;files/tmux.conf&#x27;, dest: &#x27;/root/.tmux.conf&#x27; &#125; - &#123; src: &#x27;files/tmux.conf.local&#x27;, dest: &#x27;/root/.tmux.conf.local&#x27; &#125; 簡單提一下,這個roles基本上就是把檔案從files拷貝到本機/remote的某個地方,可以看的出來層級就等於是playbook內的tasks: 另一種呼叫是放在同階層的yml檔案利用語法是 12345tasks: -name: ..... - inculde: XXX.yml 他就會讀進跟Roles內的yml同階的文件(一樣是- name:開頭的) 結論 若是很單純想要透過模組化來進行重複利用的就用roles功能，或是用inculde機能去載入對應的task item都可以端看寫的人想要怎麼分","categories":[{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/categories/Network/"},{"name":"Ansible","slug":"Network/Ansible","permalink":"http://kiwi0093.github.io/wiki/categories/Network/Ansible/"},{"name":"Playbook","slug":"Network/Ansible/Playbook","permalink":"http://kiwi0093.github.io/wiki/categories/Network/Ansible/Playbook/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/tags/Network/"},{"name":"VPS","slug":"VPS","permalink":"http://kiwi0093.github.io/wiki/tags/VPS/"},{"name":"Ansible","slug":"Ansible","permalink":"http://kiwi0093.github.io/wiki/tags/Ansible/"}]},{"title":"Certbot","slug":"VM&Container/Service Container/Common/1-certbot","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/Common/1-certbot/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/Common/1-certbot/","excerpt":"前言 雖然可以用這個方法來代直接安裝certbot,不過後來用方Nginx Proxy Manager","text":"前言 雖然可以用這個方法來代直接安裝certbot,不過後來用方Nginx Proxy Manager Certbot Install 參考Certbot的Doc 12sudo docker run -it --rm --name certbot -v &quot;/etc/letsencrypt:/etc/letsencrypt&quot; -v &quot;/var/lib/letsencrypt:/var/lib/letsencrypt&quot; \\ certbot/certbot certonly 想要對於指定IP有不同Domain的話可以再加上-p 你要的ip:80:80 -p 你要的ip:443:443這一個參數這樣就可以對應了 Auto Renew 在crontab裡面加上 10 0 * * * docker run --rm -v /etc/letsencrypt:/etc/letsencrypt -ti certbot/certbot renew 就好了","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"Common","slug":"VM-Container/Service-Container/Common","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/Common/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"}]},{"title":"Nginx Proxy Manager","slug":"VM&Container/Service Container/Common/3-nginx-proxy-manager","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/Common/3-nginx-proxy-manager/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/Common/3-nginx-proxy-manager/","excerpt":"前言 這個東西是等於是一個Web GUI界面的Nginx plug in,雖然他要用到SQL DB現在可以使用sqlite,但是說穿了就是把nginx的設定改成圖形化並且強化反向代理的設定以及加上certbot的功能不用自己再手動處理SSL KEY（不過我還是希望他可以直接load進已經有的key)","text":"前言 這個東西是等於是一個Web GUI界面的Nginx plug in,雖然他要用到SQL DB現在可以使用sqlite,但是說穿了就是把nginx的設定改成圖形化並且強化反向代理的設定以及加上certbot的功能不用自己再手動處理SSL KEY（不過我還是希望他可以直接load進已經有的key) 基本做法 MariaDB 基本上可以沿用Librenms那篇裡面已經建好的mariadb,建個帳號跟database就好,我實際上的作法是直接用phpAdmin建一個就解決了 Sqlite 現在什麼都不設定就預設會使用sqlite老實說對於現在我喜歡把各項服務與對應的DB分開建立的方法來說非常合適（尤其NPM是很輕量的DB需求…） Nginx Proxy Manager 123456789101112131415161718192021#docker-compose.yml--------------------------------------------------------------------------------------------------------------------------------version: &#x27;3&#x27;services: app: image: &#x27;jc21/nginx-proxy-manager:latest&#x27; restart: unless-stopped ports: - &#x27;80:80&#x27; #這個是正常的http - &#x27;81:81&#x27; #這個是管理界面 - &#x27;443:443&#x27; #這個是正常的https# 註解掉就會使用對應的sqlite# environment:# DB_MYSQL_HOST: &quot;$&#123;your_db_ip&#125;&quot;# DB_MYSQL_PORT: 3306# DB_MYSQL_USER: &quot;npm&quot;# DB_MYSQL_PASSWORD: &quot;$&#123;your_passwd&#125;&quot;# DB_MYSQL_NAME: &quot;npm&quot; volumes: - /var/lib/docker/volumes/nginx-proxy-manager/data:/data - /etc/letsencrypt:/etc/letsencrypt 使用方法 設定帳號 架設好了之後先用預設的帳號密碼進入一進去他就會強迫你修改admin的帳號密碼 123#預設的帳號密碼Email: admin@example.comPassword: changeme 注意事項 他不能直接用已經申請好的key,得利用他的界面重新申請cert. 所有的DN主目錄不能是空的服務,所以我才會弄個heimdall來當首頁 所有特殊設定請在custom location -&gt; location旁的齒輪內貼上,不然不會動 曾經的問題 為什麼講曾經…因為後來一堆服務我都改用Traefik來做SSL+Reserve Proxy 所以就變成曾經… Calibre-web問題 貼上下列敘述後就可以動了 12345proxy_bind $server_addr;proxy_set_header Host $http_host;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;proxy_set_header X-Scheme $scheme;proxy_set_header X-Script-Name /$&#123;your_location&#125;; Portainer-ce問題 目前還沒找到讓portainer-ce在location下正常運作的方法,其實可以很奢侈的每一種服務都掛一個DN的方法來做virtual host的作法應該就可以了 現在的問題 現在的主要應用是拿來做內部服務的轉址,在內部DNS設定好的情況下,只有一個重點達成就可以直接以container name來進行轉址（連port都不用maping) 重點 讓Nginx Proxy Manager跟其他需要他轉址的container在同一個docker network底下 然後就可以 1http://emby.private --&gt; http:// emby port 8096","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"Common","slug":"VM-Container/Service-Container/Common","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/Common/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"}]},{"title":"Isso comment system for Hexo Blog","slug":"VM&Container/Service Container/Common/4-isso","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/Common/4-isso/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/Common/4-isso/","excerpt":"前言 繞了一圈最佳的Blog評論系統就在身邊…改用Isso吧","text":"前言 繞了一圈最佳的Blog評論系統就在身邊…改用Isso吧 參考資料 Hexo-theme-Next的comment說明 Isso QuickStart 作法 Docker-compose.yml內容 更新於2022/7/26 123456789101112131415161718192021222324version: &quot;3.7&quot;services: isso: image: ghcr.io/isso-comments/isso:latest container_name: isso environment: - PUID=1000 volumes: - /var/lib/docker/volumes/isso/config:/config - /var/lib/docker/volumes/isso/data:/db restart: unless-stopped networks: - traefik labels: traefik.enable: true traefik.http.routers.isso.rule: Host(`$domain_you_like`) traefik.http.routers.isso.tls: true traefik.http.routers.isso.tls.certresolver: myresolvernetworks: traefik: external: true name: web-service 基本上這種寫法需要先去touch一個isso.conf檔案並且記得權限要讓定義的PUID可以讀 isso.conf內容 123456789101112131415161718[general]dbpath = /db/$(databasename).db #這個檔名可以自己定義host = https://$(your_Blog_domain) #這裡記得要設定Blog的網址[server]listen = http://0.0.0.0:8080 #這裡設定的Port就是docker-compose.yml裡面要定義的容器內的port[guard]enabled = trueratelimit = 2direct-reply = 3reply-to-self = falserequire-author = truerequire-email = true[moderation] #這個是需要不需要先審查過再貼出,要的就改成trueenabled = falsepurge-after = 30d[admin] #這是設定要不要管理員enabled = falsepassword = strong-password 外部轉出 跑起來後用nginx-proxy-manager去弄個外部的連接位置然後就可以去設定Next了 有強大的Traefik…什麼都不用擔心… Next設定 在_config.next.yml裡面加上 12345678910111213141516171819202122232425262728# ---------------------------------------------------------------# Comments Settings# See: https://theme-next.js.org/docs/third-party-services/comments# ---------------------------------------------------------------# Multiple Comment System Supportcomments: # Available values: tabs | buttons style: tabs # Choose a comment system to be displayed by default. # Available values: disqus | disqusjs | changyan | livere | gitalk | utterances active: isso # Setting `true` means remembering the comment system selected by the visitor. storage: true # Lazyload all comment systems. lazyload: false # Modify texts or order for any naves, here are some examples. nav: #disqus: # text: Load Disqus # order: -1 #gitalk: # order: -2..........# Isso# For more information: https://posativ.org/isso/isso: https://$domain_you_like/ 然後hexo d -g就好了 注意事項 我用Traefik跑https的話data-isso就用https://$domain_you_like/來取代教學裡面的//$domain_you_like/ hexo s在本機跑的時候是看不到評論的…一定要hexo g -d拋到github上面才看得到…","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"Common","slug":"VM-Container/Service-Container/Common","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/Common/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"},{"name":"Blog","slug":"Blog","permalink":"http://kiwi0093.github.io/wiki/tags/Blog/"}]},{"title":"WireGuard","slug":"VM&Container/Service Container/Home Lab/1-Wireguard","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/Home Lab/1-Wireguard/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/Home%20Lab/1-Wireguard/","excerpt":"前言 在中國以外的地方就不使用V2Ray了,改用Wireguard","text":"前言 在中國以外的地方就不使用V2Ray了,改用Wireguard 參考資料 WireGuard-ArchWiki WireGuard VPN 設定與使用教學 How to easily configure WireGuard How to easily configure WireGuard的翻譯 作法 Docker-compose.yml內容 1234567891011121314151617181920212223242526version: &#x27;3.7&#x27;services: wireguard: image: ghcr.io/linuxserver/wireguard container_name: wireguard cap_add: - NET_ADMIN - SYS_MODULE environment: - PUID=1000 - PGID=1000 - TZ=Asia/Taipei - SERVERURL=$&#123;your_IP_or_Domain&#125; - SERVERPORT=$&#123;Your_port&#125; - PEERS=$&#123;peer1_name&#125;,$&#123;peer2_name&#125;,$&#123;peer3_name&#125; - PEERDNS=8.8.8.8 - INTERNAL_SUBNET=$&#123;Subnet_you_want&#125; - ALLOWEDIPS=$&#123;connect_to_where_via_wireguard&#125; volumes: - /var/lib/docker/volumes/wireguard/config:/config - /lib/modules:/lib/modules ports: - $&#123;Your_port&#125;:$&#123;Your_port&#125;/udp sysctls: - net.ipv4.conf.all.src_valid_mark=1 restart: unless-stopped 參數說明 參數 定義內容 SERVERURL 等於就是定義你的endpoint,你的外部IP或是Domain SERVERPORT 定義要使用的udp port,基本上跟後面ports要mapping的以及你的最外側FW設定要能對的起來 PEERS 你要用的peers,可以直接用名字命名然後在docker-compose up的時候會自動生成 PEERDNS 在Wireguard環境中你要用的DNS ip INTERNAL_SUBNET 預設的子網路,定義好後Server會用這個子網路的第一個IP,Peers就會依序用後面的 ALLOWEDIPS 這是你打算使用wireguard連上的範圍,0.0.0.0/0就是全流量走wireguard,可以定義一個subnet就只有這個subnet走wireguard 使用說明 Android 基本上就是安裝同名子的App然後刷QR code就可以用了,Linuxserver.io的這個image很貼心的會幫你產生只要 docker logs wireguard就會看到各個peers的QR code,把圖片照下來或是存下來甚至是做了放到網頁上都可以（不過這個一個peer只允許一個連線也沒必要這樣） Linux(Manjaro 21) 有蠻多種方式可以使用的,可以單純用network-manager這個GUI程式直接設定（不過ip的部份因為他不吃DHCP,所以要手動設定） 或是可以用wg-quick的方式,甚至可以先把wg0.conf寫好都確定了在import到network-manager裡面 wg-quick方式 1sudo pacman -S wireguard-tools 需要先安裝module&amp;tools 然後 1234sudo mkdir /etc/wireguardsudo chmod 750 /etc/wireguardcd /etc/wireguardsudo umask 077 其實在docker的設定檔(default in my docker-compose.yml is /var/lib/docker/volumes/config)內就有已經可以用的設定檔你可以把整個peer_$(Name)抓下來放到/etc/wireguard內把過於複雜的檔名改一下,基本上你用XXX.conf這個XXX就是你的interface_name 確定都好了之後 1sudo wg-quick up XXX 這樣就會預設去找在/etc/wireguard/內名叫XXX的XXX.conf 確認連線都ok後就好了 不連了就 1sudo wg-quick down XXX 把設定好的檔案import到Network-manager 1sudo nmcli connection import type wireguard file /etc/wireguard/$&#123;your_conf&#125; 就好了之後就可以滑鼠來操作 注意事項 AllowIPs 若是你沒有在外側架設任何服務的話,是可以用0.0.0.0/0,這代表所有的封包都走wireguard從Server那邊出去,但是當你這樣設定的時候架在同個ip上的其他服務就會連不上,所以建議若你的網路上掛了其他服務,還是單純的定義某些區段走wireguard就好 若你不是直接拿server上產生的檔案來用的話,那就要很注意設定的內容務必要正確 123456789101112#Client設定範例---------------------------------------------------------------------------------------------------------------------------------[Interface]Address = 192.168.2.2 ＃這裡的ip要跟Server上設定的peer ip要一樣,不然會有問題PrivateKey = &lt;client&#x27;s privatekey&gt; ＃這個private Key,是client的private key,基本上docker會幫你建一個,你若是要自己建務必要去改server端設定ListenPort = 21841 #這個是你作server的時候port要用哪個DNS = 8.8.8.8 #這個是你作為Server的時候DNS要用哪台[Peer]PublicKey = &lt;server&#x27;s publickey&gt; ＃這個是Server端的public keyEndpoint = &lt;server&#x27;s ip&gt;:51820 #這個就是endpoint跟portAllowedIPs = 0.0.0.0/0, ::/0 #這個就是定義你哪些要用wireguard連線","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"Home Lab","slug":"VM-Container/Service-Container/Home-Lab","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/Home-Lab/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"},{"name":"VPN","slug":"VPN","permalink":"http://kiwi0093.github.io/wiki/tags/VPN/"}]},{"title":"自動追劇套餐","slug":"VM&Container/Service Container/Home Lab/3-auto-chasing-drama","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/Home Lab/3-auto-chasing-drama/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/Home%20Lab/3-auto-chasing-drama/","excerpt":"前言 自動化真的是人類的好朋友…","text":"前言 自動化真的是人類的好朋友… 參考資料 sleele的博客 - 高階教程 - 追劇全流程自動化 基本概念 這套流程基本上使用六個工具來達成前端跟後端 後端 Sonarr &amp; Radarr 基本的抓劇後端控制是Sonarr或是Radarr這個工具負責monitor你要的劇並且控制下載的條件與下載完後改名 jackett 這是一個torrent網站的proxy,負責接收到sonarr/radarr的要求後到指定的網站上去抓相對應的種子訊息回來 Flaresolverr 這是一個用來解決cloudflare proxy造成Jackett異常的proxy工具 qBittorrent 這是實際下載的後端,其實不限定用這個,只要是Sonarr/radarr支援的後端就好了 ChineseSubFinder 這是一個專門負責抓字幕的後端 前端 Emby 這個負責刮取nfo檔與其他圖檔供chinesesubfinder去找字幕以及提供一個漂漂亮亮的media server給最終觀看的人 前期準備 RAM &amp; Disk 因為這些所需的RAM &amp; Disk相當大,所以建議在開始前就先把你的PhotonOS的環境調整好,要讓他有足夠的RAM/CPU能跑,可以的話在passthrough個可以協助硬體解碼的GPU給Emby用… 存放檔案的空間基本上肯定要用SMB或是NFS加掛了,畢竟要放命的電影/影集…千萬不要小看他的空間需求 Docker Network 因為發生了慘劇,所以建議在開始之前先規劃這堆container就放在同一個subnet裡面就好了… 實際安裝 這裡我就把我的docker-compose.yml都貼出來就好了 Sonarr &amp; Radarr 1234567891011121314151617181920212223242526# docker-compose.yml for sonarr tv config---------------------------------------------------------------------------------------------------------------------------------version: &quot;3.9&quot;services: sonarr-tv: image: ghcr.io/linuxserver/sonarr:latest container_name: sonarr-tv environment: - PUID=1000 - PGID=0 - TZ=Asia/Taipei volumes: - /var/lib/docker/volumes/sonarr/tv/config:/config - /home/docker/media:/media #optional - /home/docker/download:/downloads #optional ports: - 8989:8989 restart: unless-stopped networks: main_net:networks: main_net: name: frontend ipam: config: - subnet: 172.22.0.0/16 1234567891011121314151617181920212223242526# docker-compose.yml for Radarr---------------------------------------------------------------------------------------------------------------------------------version: &quot;3.9&quot;services: radarr: image: ghcr.io/linuxserver/radarr:latest container_name: radarr environment: - PUID=1000 - PGID=0 - TZ=Asia/Taipei volumes: - /var/lib/docker/volumes/radarr/config:/config - /home/docker/media:/media #optional - /home/docker/download:/downloads #optional ports: - 7878:7878 restart: unless-stopped networks: main_net:networks: main_net: name: frontend ipam: config: - subnet: 172.22.0.0/16 Jackett 123456789101112131415161718192021222324version: &quot;3.9&quot;services: jackett: image: ghcr.io/linuxserver/jackett container_name: jackett environment: - PUID=1000 - PGID=1000 - TZ=Asia/Taipei - AUTO_UPDATE=true #optional - RUN_OPTS=&lt;run options here&gt; #optional volumes: - /var/lib/docker/volumes/jackett/config:/config ports: - 9117:9117 restart: unless-stopped networks: main_net:networks: main_net: name: frontend ipam: config: - subnet: 172.22.0.0/16 Flaresolverr 12345678910111213141516171819202122version: &quot;2.1&quot;services: flaresolverr: image: ghcr.io/flaresolverr/flaresolverr:latest container_name: flaresolverr environment: - LOG_LEVEL=$&#123;LOG_LEVEL:-info&#125; - LOG_HTML=$&#123;LOG_HTML:-false&#125; - CAPTCHA_SOLVER=$&#123;CAPTCHA_SOLVER:-none&#125; - TZ=Asia/Taipei ports: - 8191:8191 restart: unless-stopped networks: main_net:networks: main_net: name: frontend ipam: config: - subnet: 172.22.0.0/16 qBittorrent 12345678910111213141516171819202122232425version: &quot;2.1&quot;services: qbittorrent: image: ghcr.io/linuxserver/qbittorrent container_name: qbittorrent environment: - PUID=1000 - PGID=1000 - TZ=Asia/Taipei - WEBUI_PORT=4080 volumes: - /var/lib/docker/volumes/qbittorrent/config:/config - /home/docker/download:/downloads ports: - 6881:6881 - 6881:6881/udp - 4080:4080 networks: main_net:networks: main_net: name: frontend ipam: config: - subnet: 172.22.0.0/16 要注意的是WEBUI_PORT定義的port要跟ports 裡面想要mapping的要一致不然會有問題 ChineseSubFinder 12345678910111213version: &quot;3&quot;services: chinesesubfinder: image: allanpk716/chinesesubfinder:latest container_name: chinesesubfinder volumes: - /var/lib/docker/volumes/chinesesubfinder/config:/config - /home/docker/media:/media environment: - PUID=1000 - PGID=0 - TZ=Asia/Taipei restart: unless-stopped 這個是安裝後再去修改config.yml 1234567891011UseProxy: falseHttpProxy: http://127.0.0.1:10809EveryTime: 12hThreads: 4SubTypePriority: 0DebugMode: falseSaveMultiSub: trueMovieFolder: /media/movieSeriesFolder: /media/tv#SeriesFolder: /media/anime#AnimeFolder: /media/anime 目前實測的結果看來對AnimeFolder的支援還不好…所以我拿掉了 Emby 1234567891011121314151617181920212223242526version: &quot;3.7&quot;services: emby: image: ghcr.io/linuxserver/emby:latest container_name: emby environment: - PUID=1000 - PGID=0 - TZ=Asia/Taipei volumes: - /var/lib/docker/volumes/emby/config:/config - /home/docker/media:/data ports: - 8096:8096 - 8920:8920 #optional devices: - /dev/dri:/dev/dri #optional restart: unless-stopped networks: main_net:networks: main_net: name: frontend ipam: config: - subnet: 172.22.0.0/16 通用注意事項 所有的權限都要注意,我是搭配我的smb權限所以才設成UID=1000, GID=0 sonarr&amp;radarr的profile設定請量力而為,我一開始都很開心的有多高設多高…然後就發現一個電影70幾GB,並也emby根本跑不動轉檔…然後我就全部downgrade到1080p了… 設定 太麻煩了直接看人家的Blog怎麼設就好了… 追加更新 - 20220908 Radarr, Sonarr, Lidarr這些工具在設定Jackett連動的indexer的時候不要用nginx proxy manager轉出來的url,建議直接把這些container的network放在同一個subnet裡面然後直接用http://$&#123;container_IP&#125;:port形式處理不然很容易連不上 Jackett的新功能可以直接用/api/v2.0/indexers/all/results/torznab的形式讓你只要設一個indexer就可以回傳所有在Jackett上設定的indexer Jackett內FlareSolverr API URL:也是一樣要用http://$&#123;container_IP&#125;:port","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"Home Lab","slug":"VM-Container/Service-Container/Home-Lab","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/Home-Lab/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"}]},{"title":"Heimdall","slug":"VM&Container/Service Container/Home Lab/2-heimdall","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/Home Lab/2-heimdall/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/Home%20Lab/2-heimdall/","excerpt":"前言 其實我也不是特別需要這種Dashboard服務,但是我總覺的缺個類似封面的網頁所以就拿來用一下","text":"前言 其實我也不是特別需要這種Dashboard服務,但是我總覺的缺個類似封面的網頁所以就拿來用一下 基本做法 直接來個docker-compose.yml好了 123456789101112131415version: &quot;2.1&quot;services: heimdall: image: ghcr.io/linuxserver/heimdall container_name: heimdall environment: - PUID=1000 - PGID=1000 - TZ=Asia/Taipei volumes: - /var/lib/docker/volumes/heimdall/config:/config ports: - 8081:80 - 4343:443 restart: unless-stopped 結論 裝得很簡單也很快,基本上沒什麼特殊的,我是拿來當入口網站用的,另外其實port 443可以不用理他,因為我後面都用nginx來做ssl代理所以有沒有ssl都可以","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"Home Lab","slug":"VM-Container/Service-Container/Home-Lab","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/Home-Lab/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"}]},{"title":"Calibre-Web","slug":"VM&Container/Service Container/Home Lab/4-calibre-web","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/Home Lab/4-calibre-web/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/Home%20Lab/4-calibre-web/","excerpt":"前言 在蘇州的歲月我極度需要電子書（因為不像在台北以前可以買一堆實體書堆在房間）,久了也開始習慣就拿個平板把書都扔進去看,所以一直以來都想弄個電子書管理系統","text":"前言 在蘇州的歲月我極度需要電子書（因為不像在台北以前可以買一堆實體書堆在房間）,久了也開始習慣就拿個平板把書都扔進去看,所以一直以來都想弄個電子書管理系統 前置準備 目錄結構 建立書本資料庫 先使用Calibre在NAS上建立書庫 /books 使用cifs-utils把NAS上的 Calibre資料庫掛載在PhotonOS的某個位置 1234#/etc/fstab--------------------------------------------------------------------------------------------------------------------------------#加上\\\\$(NAS_IP)\\$(Your_dir) /$(where_you_mount) cifs user,uid=$(your_None_root_id),rw,noauto,suid,credentials=/root/secret 0 0 目錄擁有者與權限 12chmod 755 $(your_Mount_dir)chown $(your_none_root_id) $(your_mount_dir) Volume 可以把設定檔掛在NAS上面,同上面的方式 1234#/etc/fstab--------------------------------------------------------------------------------------------------------------------------------#加上\\\\$(NAS_IP)\\$(Your_dir) /var/lib/docker/volumes cifs user,uid=$(your_None_root_id),rw,noauto,suid,credentials=/root/secret 0 0 然後就不用管了 Docker-Compose file 123456789101112131415161718192021#calibre-web.yml--------------------------------------------------------------------------------------------------------------------------------version: &#x27;3&#x27;services: calibre-web: image: technosoft2000/calibre-web container_name: calibre-web environment: - PUID=1000 - USE_CONFIG_DIR=true ports: - $&#123;Your_Calibre-Web-IP&#125;:$&#123;PORT&#125;:8083 volumes: - /home/docker/books:/books - /var/lib/docker/volumes/calibre-app:/calibre-web/app/ - /var/lib/docker/volumes/calibre-kindle-gen:/calibre-web/kindlegen - /var/lib/docker/volumes/calibre-config:/calibre-web/config restart: unless-stopped Nginx相關設定 12345678location /book &#123; proxy_bind $server_addr; proxy_pass http://$&#123;Your_Calibre-Web-IP&#125;:$&#123;PORT&#125;; proxy_set_header Host $http_host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Scheme $scheme; proxy_set_header X-Script-Name /book; # IMPORTANT: path has NO trailing slash &#125; 用上述設定放在location這段 注意事項 加掛的Books最好是已經用calibre建立好的書庫,管理的時候也可以透過桌面板的calibre來增加書籍 平時整理書可以用calibre會比Calibre-Web好用 沒辦法一個帳號對應多個kindle信箱,有多device的人需要建立多個帳號 預設的帳號密碼是 account : admin password : admin123","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"Home Lab","slug":"VM-Container/Service-Container/Home-Lab","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/Home-Lab/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"}]},{"title":"Navidrome","slug":"VM&Container/Service Container/Home Lab/3-navidrome","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/Home Lab/3-navidrome/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/Home%20Lab/3-navidrome/","excerpt":"前言 音樂,是很重要的,本來是打算用NAS+Foobar2000來管理與播放我的音樂,但是後面發現其實音樂串流server+Web播放界面似乎更實用所以就挑了一個比較漂亮又輕量級的navidrome來使用","text":"前言 音樂,是很重要的,本來是打算用NAS+Foobar2000來管理與播放我的音樂,但是後面發現其實音樂串流server+Web播放界面似乎更實用所以就挑了一個比較漂亮又輕量級的navidrome來使用 前置準備 目錄結構 /music 使用cifs-utils把NAS上的音樂資料庫掛載在PhotonOS的某個位置 1234#/etc/fstab--------------------------------------------------------------------------------------------------------------------------------#加上\\\\$(NAS_IP)\\$(Your_dir) /$(where_you_mount) cifs user,uid=$(your_None_root_id),rw,noauto,suid,credentials=/root/secret 0 0 目錄擁有者與權限 12chmod 755 $(your_Mount_dir)chown $(your_none_root_id) $(your_mount_dir) Volume 可以把設定檔掛在NAS上面,同上面的方式 1234#/etc/fstab--------------------------------------------------------------------------------------------------------------------------------#加上\\\\$(NAS_IP)\\$(Your_dir) /var/lib/docker/volumes cifs user,uid=$(your_None_root_id),rw,noauto,suid,credentials=/root/secret 0 0 然後就不用管了 Docker-Compose file 1234567891011121314151617181920#navidrome.yml--------------------------------------------------------------------------------------------------------------------------------version: &quot;3&quot;services: navidrome: image: deluan/navidrome:latest container_name: navidrome ports: - $&#123;Your_navidorme-IP&#125;:$&#123;PORT&#125;:4533 environment: ND_SCANSCHEDULE: &quot;1h&quot; ND_LOGLEVEL: &quot;info&quot; ND_SESSIONTIMEOUT: &quot;24h&quot; ND_BASEURL: &quot;/music&quot; ND_ENABLETRANSCODINGCONFIG: &quot;true&quot; ND_REVERSEPROXYWHITELIST: &quot;0.0.0.0/0&quot; volumes: - /var/lib/docker/volumes/navidrome:/data - /home/docker/music:/music:ro restart: unless-stopped 設定的部分,若是想要安全性高就不要加上ND_ENABLETRANSCODINGCONFIG: &quot;true&quot;這個是可以允許使用者直接定義轉碼內容的 Nginx相關設定 12345678910location /music &#123;proxy_pass http://$&#123;Your_navidorme-IP&#125;:$&#123;PORT&#125;;proxy_set_header Host $host;proxy_set_header X-Real-IP $remote_addr;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;proxy_set_header X-Forwarded-Proto $scheme;proxy_set_header X-Forwarded-Protocol $scheme;proxy_set_header X-Forwarded-Host $http_host;proxy_buffering off;&#125; 相關設定很簡單照抄就好了 注意事項 雖然支援Ultrasonic,但是我自己怎麼試都有問題,一換回subsonic就好了","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"Home Lab","slug":"VM-Container/Service-Container/Home-Lab","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/Home-Lab/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"}]},{"title":"Apache Guacamole","slug":"VM&Container/Service Container/Home Lab/5-guacamole","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/Home Lab/5-guacamole/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/Home%20Lab/5-guacamole/","excerpt":"前言 其實這個用很長一段時間了但是到了最近重新整理的時候才發現我沒有寫成筆記","text":"前言 其實這個用很長一段時間了但是到了最近重新整理的時候才發現我沒有寫成筆記 參考資料 Apache Guacamole and docker-compose – systems.dance 基本流程 前提 這是一個把DB&amp;AP放在同一個Docker-compose.yml內的作法,也的確後來發現不要刻意去整合DB可能對於container化後比較方便而且要項這冊一樣分切也比較簡單 流程 先用docker run跑Image內的script來產生initial DB 用compose file先單獨建立db(並且要定義volumes來保留db) 在db container內把initial DB塞進db container的DB內（當然會透過volumes保留成果） 移除單獨的db container(其實不宜除也可以,只不過後面的調整比較囉唆) 利用compose.yml直接建立相關的container(包括DB container) 實際指令與文件 Pull Image 123docker pull guacamole/guacamoledocker pull guacamole/guacddocker pull mariadb/server Create initail DB 1docker run --rm guacamole/guacamole /opt/guacamole/bin/initdb.sh --mysql &gt; guac_db.sql Create Initial DB Container/Volume initial.yml 12345678910111213version: &#x27;3&#x27;services: guacdb: container_name: guacdb image: mariadb/server:latest restart: unless-stopped environment: MYSQL_ROOT_PASSWORD: &#x27;&lt;PASSWD_YOU_WANT&gt;&#x27; MYSQL_DATABASE: &#x27;guacamole_db&#x27; MYSQL_USER: &#x27;guacamole_user&#x27; MYSQL_PASSWORD: &#x27;&lt;PASSWD_YOU_WANT&gt;&#x27; volumes: - /var/lib/docker/volumes/&lt;Dir_you_want&gt;:/var/lib/mysql 指令 12345678910111213# Establish initial DB Containerdocker-compose up -d# Copy initial sql into db containerdocker cp guac_db.sql guacdb:/guac_db.sql# Opening a shell and initializing the db:docker exec -it guacdb bashcat /guac_db.sql | mysql -u root -p guacamole_dbexit# Remove initial DB OSdocker-compose -f /where/is/your/docker-compose down Service Up docker-compose.yml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849version: &#x27;3&#x27;services: guacdb: container_name: guacdb image: mariadb/server:latest restart: unless-stopped networks: - traefik environment: MYSQL_ROOT_PASSWORD: &#x27;&lt;PASSWD_YOU_WANT&gt;&#x27; MYSQL_DATABASE: &#x27;guacamole_db&#x27; MYSQL_USER: &#x27;guacamole_user&#x27; MYSQL_PASSWORD: &#x27;&lt;PASSWD_YOU_WANT&gt;&#x27; volumes: - /var/lib/docker/volumes/guacamole/db:/var/lib/mysql guacd: container_name: guacd image: guacamole/guacd restart: unless-stopped networks: - traefik guacamole: container_name: guacamole image: &#x27;guacamole/guacamole:latest&#x27; restart: unless-stopped networks: - traefik # ports: # - &#x27;8080:8080&#x27; environment: GUACD_HOSTNAME: &quot;guacd&quot; MYSQL_HOSTNAME: &quot;guacdb&quot; MYSQL_DATABASE: &quot;guacamole_db&quot; MYSQL_USER: &quot;guacamole_user&quot; MYSQL_PASSWORD: &quot;&lt;PASSWD_YOU_WANT&gt;&quot; depends_on: - guacdb - guacd labels: traefik.enable: true traefik.http.routers.guacamole.rule: Host(`&lt;hostname.you.want&gt;`) traefik.http.routers.guacamole.tls: true traefik.http.routers.guacamole.tls.certresolver: myresolver traefik.http.services.guacamole.loadbalancer.server.port: 8080networks: traefik: external: true name: web-service","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"Home Lab","slug":"VM-Container/Service-Container/Home-Lab","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/Home-Lab/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"}]},{"title":"Gitea","slug":"VM&Container/Service Container/Home Lab/6-Gitea","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/Home Lab/6-Gitea/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/Home%20Lab/6-Gitea/","excerpt":"前言 基於ansible與ansible-pull的需求,我在自己家裡掛上了Gitea","text":"前言 基於ansible與ansible-pull的需求,我在自己家裡掛上了Gitea 基本架構 用Docker安裝Gitea非常方便，但是配合Homelab內部的環境與docker的特殊性,基本上就是內部走http（是的沒看錯就是http） docker-compose.yml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546version: &quot;3&quot;services: server: image: gitea/gitea:latest container_name: gitea environment: - USER_UID=1000 - USER_GID=1000 - TZ=Asia/Taipei - ROOT_URL=http://$&#123;Domain.you.like&#125;/ - GITEA__database__DB_TYPE=mysql - GITEA__database__HOST=db:3306 - GITEA__database__NAME=gitea - GITEA__database__USER=gitea - GITEA__database__PASSWD=gitea depends_on: - db volumes: - ./data:/data - /var/lib/docker/volumes/gitea/config:/etc/gitea - /etc/timezone:/etc/timezone:ro - /etc/localtime:/etc/localtime:ro restart: unless-stopped networks: - basic_net db: image: mysql:latest restart: always container_name: gitea_mysql environment: - MYSQL_ROOT_PASSWORD=gitea - MYSQL_USER=gitea - MYSQL_PASSWORD=gitea - MYSQL_DATABASE=gitea networks: - basic_net volumes: - /var/lib/docker/volumes/gitea/mysql:/var/lib/mysqlnetworks: basic_net: name: backend ipam: config: - subnet: 172.21.0.0/16 說明一下 為什麼用mysql不用sqlite? 因為會有不明原因發生database locked…所以最終用mysql來解決… 光是上面的docker-compose.yml並不會好好的動…還需要加上Nginx Proxy Manager去當reverse proxy才會動 這個服務單純是掛在內部，不對外所以省了Traefik的設定跟SSL,有需要的人請自己研究（是說對外部的話乾脆就用github或是gitlab了啦）","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"Home Lab","slug":"VM-Container/Service-Container/Home-Lab","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/Home-Lab/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"}]},{"title":"MS KMS Server for GKVL","slug":"VM&Container/Service Container/Other/1-vlmcsd","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/Other/1-vlmcsd/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/Other/1-vlmcsd/","excerpt":"前言 前幾天看到這個玩意，對於家裡有在用windows的人是還蠻方便的…","text":"前言 前幾天看到這個玩意，對於家裡有在用windows的人是還蠻方便的… VLMCSD - Open Source KMS Server 12345678version: &quot;3.7&quot;services: vlmcsd: image: mikolatero/vlmcsd container_name: vlmcsd ports: - 1688:1688 restart: always 老實說這個service要跑起來很容易，不過效益卻很不錯，以下是相關的重要內容 VL Key Window - Key Management Services (KMS) client activation and product keys for Windows Server and Windows Office 2016 to 2021 - GVLKs for KMS and Active Directory-based activation of Office, Project, and Visio - Deploy Office | Microsoft Learn 相關指令 Windows Command 效果 slmgr.vbs -upk 解除SN榜定，使用前請先確定你真的不要你現有綁定的SN slmgr.vbs -skms DOCKER_IP 這個是用來定義你的KMS Server IP slmgr.vbs -ipk XXXXX-XXXXX-XXXXX-XXXXX-XXXXX 這個是指定SN給這台Windows slmgr.vbs -ato 自動更新 slmgr.vbs -dlv 列出實際的狀況 Office 首先需要到Office的安裝目錄 X86 - cd \\Program Files (x86)\\Microsoft Office\\Office16 X64 - cd \\Program Files\\Microsoft Office\\Office16 Command 效果 cscript ospp.vbs /sethst:DOCKER_IP 指定ip cscript ospp.vbs /inpkey:xxxxx-xxxxx-xxxxx-xxxxx-xxxxx 指定SN給這個產品，一般會需要Office, Visio, Project三個分開輸入 cscript ospp.vbs /act 啟動 cscript ospp.vbs /dstatusall 確認細節 注意事項 WIndows只有Pro版的有支援，Home版的沒辦法用這個方法，Office的話只有大量授權版可以適用 Office大量授權版安裝方法 這個需要兩個工具來進行 Office Deployment Tool - Download Office Deployment Tool from Official Microsoft Download Center Office Customization Tool - Office Customization Tool - Microsoft 365 Apps admin center 基本上就是透過Deployment Tool把基本的office下載安裝環境弄好，然後透過Customization Tool把你想要的版本，語系，安裝內容選好後匯出到下載安裝環境的folder裡面後執行(假設匯出的設定檔檔名為config.xml) 語法 效果 setup.exe /download config.xml download office files as your config.xml setup.exe /configure config.xml install office files as your config.xml 結論 這個雖然可以安裝也可以啟動相對應的產品，但是始終不是等同於取得正版軟體，所以若有版權需求的狀況下還是花＄＄買正版比較實在","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"Other","slug":"VM-Container/Service-Container/Other","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/Other/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"},{"name":"Microsoft","slug":"Microsoft","permalink":"http://kiwi0093.github.io/wiki/tags/Microsoft/"}]},{"title":"MS SQL Server","slug":"VM&Container/Service Container/Other/14-MS-SQL-Server","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/Other/14-MS-SQL-Server/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/Other/14-MS-SQL-Server/","excerpt":"前言 老實說這個大概只有幫公司IT做這個專案的時候會用到,但是還是加減放一下","text":"前言 老實說這個大概只有幫公司IT做這個專案的時候會用到,但是還是加減放一下 MS SQL-Server docker-compose.yml 12345678910111213141516# Docker-compose.ymlversion: &#x27;3&#x27;services: mssql image: mcr.microsoft.com/mssql/server:2019-latest container_name: sql-server environment: - PUID=1000 - ACCEPT_EULA=Y# - MSSQL_PID=&lt;your_product_id | edition_name&gt; (default: Developer)&quot; - SA_PASSWORD=&lt;your@Passw0rd&gt; ports: - 1433:1433 volumes: - /var/lib/docker/volumes/mssql:/var/lib/mssqlql restart: always 基本說明 PUID=1000 因為SQL-Server不能用root運作所以要另外指定一個USER不然容易會有問題,但是我看一堆教學都沒放所以若是沒放也可以正常跑就不用這行 ACCEPT_EULA=Y 這個其實是廢話,因為不同意就不能跑，不過這個Image是微軟官方做的所以也沒辦法改 MSSQL_PID 這個其實是最重要的一個參數,因為他決定了你在跑的這個SQL Server是什麼版本的,若是公司在用的，就要在這裡放入你買的SN SA_PASSWORD 就如字義等於Mysql的root密碼定義 結語 這個只是單純跑起來其實很簡單…不愧是微軟… 不過他沒有預付的圖形化管理界面,要就要另外用client連，所以有的會加裝Adminer 這樣就可以做簡單的管理","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"Other","slug":"VM-Container/Service-Container/Other","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/Other/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"}]},{"title":"Portainer-ce & agent","slug":"VM&Container/Service Container/VPS/1-portainer-ce-agent","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/VPS/1-portainer-ce-agent/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/VPS/1-portainer-ce-agent/","excerpt":"前言 手上還有可以使用的VPS,我就想說乾脆都掛上Docker+portainer-ce agent這樣就可以全部一起遠端控制","text":"前言 手上還有可以使用的VPS,我就想說乾脆都掛上Docker+portainer-ce agent這樣就可以全部一起遠端控制 基本做法 Portainer-ce 這是一個web-GUI,用來管理docker的,雖然說可以直接用cli管理就好了,但是有Web-GUI也是很方便的所以就裝了 他有單機用也可以管理docker-swarm跟 k8s,我沒那麼多node(那堆VPS for v2ray…)所以簡單的單機就可以了 參考資料Portainer Deployment@Docker Hub 1234#建立Volumedocker volume create portainer_data#部屬portainer-cedocker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce 這裡可以注意 -d 是在背景跑 -p 8000:8000 -p 9000:9000 這個-p定義可以是 -p 主機ip : 主機port : container port --name= 定義你的container要叫什麼名字 --restart= 定義重新啟動的規則,有 no不重新啟動 on-failure[:最多次數]只有沒有fail才重新啟動,後面的最多次數是最多重試次數 always總是重啟 unless-stopped 除非停止不然都會重啟 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce 這是兩個指令 -v /var/run/docker.sock:/var/run/docker.sock 這個是利用-v把系統的/var/run/docker.sock對應到container裡的/var/run/docker.sock,這樣裡面的service就可以抓到外面的docker正在跑的狀態 -v portainer_data:/data portainer/portainer-ce ​ 這裡是利用建立好的volume直接使用,若要自己定義位置,也可以就是把前面的部分定義成絕對位置的目錄也可以,然後就是寫入權限要滿足不然寫不進去 Portainer-agent 12345678910111213#portainer-agent.yml---------------------------------------------------------------------------------------------------------------------------------version: &#x27;3&#x27;services: portainer: image: portainer/agent:latest container_name: portainer_agent ports: - 9001:9001 volumes: - /var/run/docker.sock:/var/run/docker.sock - /var/lib/docker/volumes:/var/lib/docker/volumes restart: always 然後就是docker-compose up -d就可以了","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"VPS","slug":"VM-Container/Service-Container/VPS","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/VPS/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"}]},{"title":"librenms","slug":"VM&Container/Service Container/Other/4-librenms","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/Other/4-librenms/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/Other/4-librenms/","excerpt":"前言 很久很久以前,我曾經使用過MRTG+SNMP做流量圖表,但是隨著去中國這幾年家裡的Server逐步變成會動就好的超低標準,就沒管了,最近因為大整理所以就想再弄一個類似的,於是挑了Librenms","text":"前言 很久很久以前,我曾經使用過MRTG+SNMP做流量圖表,但是隨著去中國這幾年家裡的Server逐步變成會動就好的超低標準,就沒管了,最近因為大整理所以就想再弄一個類似的,於是挑了Librenms 參考資料 莫莫 雜記 - Docker LibreNMS安裝記錄(含MariaDB、PhpMyAdmin) 其實他寫的很詳細,照著做就好了,不過我還是把我稍微調整過的做法寫在下面 基本做法 MariaDB vi mariadb.yml 12345678910111213141516# mariadb.yml--------------------------------------------------------------------------------------------------------------------------------version: &#x27;3&#x27;services: mariadb: image: mariadb:latest container_name: mariadb environment: - MYSQL_ROOT_PASSWORD=$&#123;your_DB_root_Passwd&#125; - TZ=Asia/Taipei ports: - $&#123;your_DB_host&#125;:$&#123;your_DB_port&#125;:3306 volumes: - /var/lib/docker/volumes/mariadb/data:/var/lib/mysql - /var/lib/docker/volumes/mariadb/mariadbcustom.cnf:/etc/mysql/conf.d/custom.cnf restart: unless-stopped vi /var/lib/docker/volumes/mariadb/mariadbcustom.cnf 12345678910111213# /var/lib/docker/volumes/mariadb/mariadbcustom.cnf --------------------------------------------------------------------------------------------------------------------------------[client]default-character-set = utf8mb4[mysql]&quot; &gt;&gt; /etc/my.cnfdefault-character-set = utf8mb4[mysqld]skip-character-set-client-handshakecollation_server = utf8mb4_unicode_cicharacter_set_server = utf8mb4tmpdir = /var/lib/mysqltmp 這個是用來定義MariaDB的預設,都使用utf-8 unicode sudo docker-compose -f mariadb.yml up -d 這個是用來建立container &amp; run sudo docker exec -it mariadb bash 123456789# @mariadb container--------------------------------------------------------------------------------------------------------------------------------mysql -u root -p # 輸入後鍵入你的sql root密碼進入mariadb#建立librenms用的帳號,資料庫以及授予這個帳號對這個資料庫的全部權限,不喜歡用指令的人也可以用phpAdmin來進行mysql&gt; CREATE DATABASE librenms CHARACTER SET utf8 COLLATE utf8_unicode_ci;mysql&gt; CREATE USER &#x27;librenms&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;user_librenms_password&#x27;;mysql&gt; GRANT ALL PRIVILEGES on librenms.* TO &#x27;librenms&#x27;@&#x27;%&#x27; WITH GRANT OPTION;mysql&gt; FLUSH PRIVILEGES; Librenms vi librenms.yml 1234567891011121314151617181920212223#librenms.yml--------------------------------------------------------------------------------------------------------------------------------version: &#x27;3&#x27;services: librenms: image: librenms/librenms:latest container_name: librenms command: su - librenms -c &quot;/opt/librenms/librenms-service.py -v&quot; environment: - TZ=Asia/Taipei - PUID=1000 - DB_HOST=$&#123;your_DB_host&#125; - DB_PORT=$&#123;your_DB_port&#125; - DB_NAME=librenms - DB_USER=librenms - DB_PASSWORD=user_librenms_passwd - DB_TIMEOUT=10 - LIBRENMS_SNMP_COMMUNITY=$&#123;Community_name_you_want&#125; ports: - $&#123;your_Server_ip&#125;:$&#123;port_you_want&#125;:8000 volumes: - /var/lib/docker/volumes/librenms/data:/data restart: always 這裡有個關鍵的一步就是務必要加上 command: su - librenms -c “/opt/librenms/librenms-service.py -v” 這個的意思是以librenms這個帳號執行/opt/librenms/librenms-service.py -v 這樣他的rrd權限才會正確,不然會有問題(我之前就是信了這是optional所以一直弄不好,這個是必要條件…) sudo docker exec -it mariadb bash 12345678 #進入mariadb container--------------------------------------------------------------------------------------------------------------------------------mysql -u librenms -p #以librenms帳號登入mariadbmysql&gt; use librenms; #使用librenms資料庫#修改資料庫資料mysql&gt; ALTER TABLE `notifications` CHANGE `datetime` `datetime` timestamp NOT NULL DEFAULT &#x27;1970-01-02 00:00:00&#x27; ; mysql&gt; ALTER TABLE `users` CHANGE `created_at` `created_at` timestamp NOT NULL DEFAULT &#x27;1970-01-02 00:00:01&#x27; ; 這個是修正database issue(Validata Config裡的問題修正) 同場加映 - phpAdmin 這個玩意老實說用不太到,但是針對不喜歡mysql指令的人可以用這個圖形介面來操作mysql database 因為他很單純,所以直接用docker run指令建立就可以了 12345# 若你的$&#123;your_DB_host&#125;=3306sudo docker run --name phpmyadmin -d -e PMA_HOST=$&#123;your_DB_host&#125; -p 8080:80 phpmyadmin/phpmyadmin# 若你的$&#123;your_DB_host&#125;不是預設的3306,建議用docker --link來連結sudo docker run --name phpmyadmin -d --link mariadb:db -p 8080:80 phpmyadmin/phpmyadmin 這裡的8080port是對外的可以改成你想要的 Nginx設定 老實說,要改成子目錄的方式,得去修改container內的config.php我覺得這個太麻煩了,所以我就跑去再申請一個DN專門來用 Nginx的設定就是普通的virtual host設定法,只要在`/etc/nginx/site-enables/後面再加上一個cnf檔定義一下就好了 記得要另外申請一下certbot的憑證給這個 DN使用 1234567891011121314151617181920212223242526272829303132333435363738# librenms.cnf--------------------------------------------------------------------------------------------------------------------------------server &#123; listen 80; server_name librenms.exsample.com; return 301 https://$server_name$request_uri;&#125;server &#123; listen 443 ssl http2; server_name librenms.exsample.com; ssl_certificate /etc/letsencrypt/live/librenms.exsample.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/librenms.exsample.com/privkey.pem;# include /etc/letsencrypt/options-ssl-nginx.conf;# ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;#charset koi8-r; #access_log /var/log/nginx/host.access.log main;client_max_body_size 20M;location / &#123; proxy_pass http://$&#123;your_Server_ip&#125;:$&#123;port_you_want&#125;; #這裡改成要轉發的ip/port proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Protocol $scheme; proxy_set_header X-Forwarded-Host $http_host; proxy_buffering off; &#125;error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root /usr/share/nginx/html; SNMP for clients FreeBSD 請參考Wiki的 FreeBSD Section VMware ESXi 6.5 參考資料 黃昏的甘蔗 天黑的時候星星就會出現 ssh登入Esxi後 123456esxcli system snmp get # 確認snmp狀態與設定值esxcli system snmp set -c YOUR_STRING # 設定你的communityesxcli system snmp set -p 161 # 設定你的snmp port,基本上都是使用161 udpesxcli system snmp set -L &quot;City, State, Country&quot; # 設定你的Locationesxcli system snmp set -C noc@example.com # 設定你的聯絡人esxcli system snmp set -e yes # 設定啟用 到其他可以讀snmp的機器上執行snmpwalk -v2c -c $&#123;YOUR_STRING&#125; $&#123;your_server_IP&#125; 確認有沒有資料就好了 結論 Community若不想修改librenms內的 config.php的話建議不要用public以外的字串,這樣找起來比較方便 這些要開啟後至少幾個小時後才會有明顯的圖示,不要太緊張,也沒辦法一設好就馬上有資料","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"Other","slug":"VM-Container/Service-Container/Other","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/Other/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"},{"name":"FreeBSD","slug":"FreeBSD","permalink":"http://kiwi0093.github.io/wiki/tags/FreeBSD/"}]},{"title":"Node-Red","slug":"VM&Container/Service Container/VPS/3-Node-Red","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/VPS/3-Node-Red/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/VPS/3-Node-Red/","excerpt":"前言 本來我只是想弄個類似IFTTT的東西,結果一踏進去才發現這玩意根本不是那麼單純呀～～","text":"前言 本來我只是想弄個類似IFTTT的東西,結果一踏進去才發現這玩意根本不是那麼單純呀～～ 參考資料 Node-Red Official web site 安裝 其實安裝這部份是最簡單的一部分了… docker-compose.yml 1234567891011121314151617181920212223version: &#x27;3.3&#x27;services: node-red: image: nodered/node-red container_name: node-red# ports:# - &#x27;1880:1880&#x27; environment: - TZ=Asia/Taipei volumes: - /var/lib/docker/volumes/node-red:/data restart: unless-stopped labels: traefik.enable: true traefik.http.routers.node-red.rule: Host(`&lt;Domain&gt;`) traefik.http.routers.node-red.tls: true traefik.http.routers.node-red.tls.certresolver: myresolver traefik.http.services.node-red.loadbalancer.server.port: 1880networks: default: external: true name: traefik_backend 注意要點 Volumes權限 因為預設的UID權限是1000所以用root建立container後會因為寫入權限不能正常執行,解決方案是定義為root或是直接把目錄權限改了（我是改成777） Setting.js設定 因為我是用traefik來處理SSL,所以只剩下登入權限的部份需要注意 基本上登入設定開啟很容易 123456789101112131415 adminAuth: &#123; type: &quot;credentials&quot;, users: [ &#123; username: &quot;admin&quot;, password: &quot;$2a$08$zZWtXTja0fB1pzD4sHCMyOCMYz2Z6dNbM6tl8sJogENOMcxWV9DN.&quot;, permissions: &quot;*&quot; &#125;, &#123; username: &quot;george&quot;, password: &quot;$2b$08$wuAqPiKJlVN27eF5qJp.RuQYuy6ZYONW7a/UWYxDTtwKFCdB8F19y&quot;, permissions: &quot;read&quot; &#125; ]&#125; 只要把username的部份改成你喜歡的ID 然後透過 docker exec -it &lt;NodeRed_container_name&gt; bash 執行 node-red-admin hash-pw 它就會讓你輸入你想要的密碼後把hash檔弄出來,copy到上面的設定裡面去就好了 實際使用 因為這個玩意實在太博大精深了… 以後專門開個主題來寫好了…（這應該是個不會去填補的坑)","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"VPS","slug":"VM-Container/Service-Container/VPS","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/VPS/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"}]},{"title":"Bookstack","slug":"VM&Container/Service Container/VPS/2-Bookstack","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/VPS/2-Bookstack/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/VPS/2-Bookstack/","excerpt":"前言 Bookstack是個看起來很適合作筆記跟寫Blog用的好東西，要是我早個幾年遇到可能就不會用github來寫wiki跟blog了","text":"前言 Bookstack是個看起來很適合作筆記跟寫Blog用的好東西，要是我早個幾年遇到可能就不會用github來寫wiki跟blog了 Bookstack docker-compose.yml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455# Docker-compose.ymlversion: &quot;3.7&quot;services: bookstack_db: image: lscr.io/linuxserver/mariadb container_name: bookstack_db environment: - PUID=1000 - PGID=1000 - MYSQL_ROOT_PASSWORD=&lt;your_sql_password&gt; - TZ=Asia/Taipei - MYSQL_DATABASE=bookstackapp - MYSQL_USER=bookstack - MYSQL_PASSWORD=&lt;your_database_password&gt; volumes: - /var/lib/docker/volumes/bookstack/db/config:/config restart: unless-stopped bookstack: image: lscr.io/linuxserver/bookstack container_name: bookstack environment: - APP_URL=https://&lt;your.domain&gt; - PUID=1000 - PGID=1000 - DB_HOST=bookstack_db - DB_USER=bookstack - DB_PASS=&lt;your_database_password&gt; - DB_DATABASE=bookstackapp - MAIL_DRIVER=smtp - MAIL_HOST=&lt;your.smtp.server&gt; - MAIL_PORT=&lt;your.smtp.port&gt; - MAIL_ENCRYPTION=&lt;SSL or TLS&gt; - MAIL_USERNAME=&lt;your@mail.address&gt; - MAIL_PASSWORD=&lt;password_for_your_mail_account&gt; - MAIL_FROM=noreply@&lt;whatever.you.want&gt; - MAIL_FROM_NAME=&lt;Name_you_want_to_show&gt; volumes: - /var/lib/docker/volumes/bookstack/app/config:/config restart: unless-stopped links: - bookstack_db:bookstack_db depends_on: - bookstack_db labels: traefik.enable: true traefik.http.routers.bookstack.rule: Host(`&lt;Domain.you.what.to.link&gt;`) traefik.http.routers.bookstack.tls: true traefik.http.routers.bookstack.tls.certresolver: myresolver traefik.http.services.bookstack.loadbalancer.server.port: 80networks: default: external: true name: traefik_backend 基本說明 Database - Bookstack採用sql database來儲存你的資料，雖然不像Hexo那樣可以留存*.md以及得綁著他的web界面來寫但是還算是好用 採用Traefik方式所以所有的container都不會mapping外部的port 因為是利用traefik reserve proxy的方式來處理ssl cert, APP_URL=https://&lt;your.domain&gt;這裡的定義固定要定義成https:// 結語 老實說這個app我花了很多時間弄了很久，因為他對於reserve proxy的支援方式沒有其他的app那麼單純需要加上 traefik.http.services.bookstack.loadbalancer.server.port: 80 並且一定要設APP_URL=不然會預設跑去http://localhost:6875而且基本上不會正常運作…","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"VPS","slug":"VM-Container/Service-Container/VPS","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/VPS/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"}]},{"title":"phpBB","slug":"VM&Container/Service Container/VPS/4-phpBB","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/VPS/4-phpBB/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/VPS/4-phpBB/","excerpt":"前言 論壇還是用phpBB via docker, 簡單 省事 方便","text":"前言 論壇還是用phpBB via docker, 簡單 省事 方便 作法 Docker-compose.yml內容 123456789101112131415161718192021222324version: &#x27;2&#x27;services: mariadb: image: docker.io/bitnami/mariadb:10.3 environment: - ALLOW_EMPTY_PASSWORD=yes - MARIADB_USER=bn_phpbb - MARIADB_DATABASE=bitnami_phpbb volumes: - /var/lib/docker/volumes/phpbb/mariadb:/bitnami/mariadb phpbb: image: docker.io/bitnami/phpbb:3 ports: - 192.168.131.2:8082:8080 environment: - PHPBB_DATABASE_HOST=mariadb - PHPBB_DATABASE_PORT_NUMBER=3306 - PHPBB_DATABASE_USER=bn_phpbb - PHPBB_DATABASE_NAME=bitnami_phpbb - ALLOW_EMPTY_PASSWORD=yes volumes: - /var/lib/docker/volumes/phpbb/phpbb:/bitnami/phpbb depends_on: - mariadb 老實說我已經跑了另一個mariadb了是該可以整合在一起,但是…我懶,所以就另外跑一個Mariadb,要這樣搞記得名字不要重複, port不要重複 不過這個compose.yml裡面的定義是沒有mapping到外面的好方法直接跑就好了（這樣連db的安全性都可以保證） 注意事項 老實說使用的感想我對於bitnami的習性不是很喜歡,當你跑了之後需要把/var/lib/docker/volumes/phpbb的權限改了 他預設是UID=1001不是chown 1001就是直接用chmod 777不然的話東西會因為沒有寫入權限不會正常跑…","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"VPS","slug":"VM-Container/Service-Container/VPS","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/VPS/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"}]},{"title":"Nextcloud behind Ttraefik","slug":"VM&Container/Service Container/VPS/5-Nextcloud","date":"2024-03-21T02:36:21.146Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/VM&Container/Service Container/VPS/5-Nextcloud/","permalink":"http://kiwi0093.github.io/wiki/wiki/VM&Container/Service%20Container/VPS/5-Nextcloud/","excerpt":"前言 OCI的ARM方案實在很香，弄個Nextcloud也很不錯","text":"前言 OCI的ARM方案實在很香，弄個Nextcloud也很不錯 作法 Docker-compose.yml內容 123456789101112131415161718192021222324252627282930version: &quot;2.1&quot;services: nextcloud: image: nextcloud container_name: nextcloud restart: always environment: - SQLITE_DATABASE=$&#123;Database_name_you_like&#125; - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.example.com - TRUSTED_PROXIES=$&#123;Ip_range_for_containers/mask&#125; volumes: - /var/lib/docker/volumes/nextcloud/app:/var/www/html - /Folder/you/can/storage/data:/var/www/html/data labels: - traefik.enable=true - traefik.http.routers.nextcloud.middlewares=nextcloud,nextcloud_redirect - traefik.http.routers.nextcloud.tls.certresolver=myresolver - traefik.http.routers.nextcloud.rule=Host(`nextcloud.example.com`) - traefik.http.middlewares.nextcloud.headers.customFrameOptionsValue=ALLOW-FROM https://example.com - traefik.http.middlewares.nextcloud.headers.contentSecurityPolicy=frame-ancestors &#x27;self&#x27; example.com *.example.net - traefik.http.middlewares.nextcloud.headers.stsSeconds=155520011 - traefik.http.middlewares.nextcloud.headers.stsIncludeSubdomains=true - traefik.http.middlewares.nextcloud.headers.stsPreload=true - traefik.http.middlewares.nextcloud_redirect.redirectregex.regex=/.well-known/(card|cal)dav - traefik.http.middlewares.nextcloud_redirect.redirectregex.replacement=/remote.php/dav/networks: default: external: true name: traefik_backend 說真的，Nextcloud因為他的安全機制所以搞的超級麻煩的… 首先是不能用linuxserver.io的image, 因為他是Nginx+SSL已經弄好的traefik必死 另外也不能用fpm的image會有各種奇怪的問題 最終找到這篇 Deploy Nextcloud with docker-compose, Traefik 2, PostgreSQL and Redis 人家寫得很完整,也很有用…但是我還看不懂… 注意事項 官方的Image預設的uid是33(沒錯就是這麼詭異的…)所以要特別注意 另外因為我是用sqlite所以資料庫會一併扔到/var/html/data也就是我另外mount的volume去","categories":[{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"VPS","slug":"VM-Container/Service-Container/VPS","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/VPS/"}],"tags":[{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"}]},{"title":"Dummynet & IPFW","slug":"FreeBSD/2-dummynet&ipfw","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/FreeBSD/2-dummynet&ipfw/","permalink":"http://kiwi0093.github.io/wiki/wiki/FreeBSD/2-dummynet&ipfw/","excerpt":"前言 FreeBSD Gateway可以利用ipfw來達成流量限制的功能,想要使用這個除了/etc/rc.conf需要設定以外,還需要讓kernel的dummynet啟動才會正常啟動","text":"前言 FreeBSD Gateway可以利用ipfw來達成流量限制的功能,想要使用這個除了/etc/rc.conf需要設定以外,還需要讓kernel的dummynet啟動才會正常啟動 Dummynet 動態載入 由於現在都是使用Generic的Kernel(減少compile Kernel的動作)所以使用kldload來load dummynet.ko 手動載入 1kldload dummynet 想要確認有沒有跑起來請用 1kldstat 這個指令會列出所有動態載入的.ko 開機自動載入 12# /boot/loader.confdummynet_load=&quot;YES&quot; 之後重開機的時候就會自動載入了 ipfw /etc/rc.conf 123firewall_enable=&quot;YES&quot;firewall_script=&quot;/etc/ipfw.conf&quot;natd_enable=&quot;NO&quot; 上述設定的意思就是啟動ipfw,設定檔為/etc/ipfw.conf,並且不啟動natd /etc/ipfw.conf 1234567891011121314151617181920212223242526272829303132333435363738#定義介面EXT_IF=&quot;ext0&quot;INT_IF=&quot;int0&quot;#定義網路DMZ_NET=&quot;192.168.0.0/24&quot;#定義特定IP與名稱RDP_PROXY=&quot;192.168.0.13&quot;#定義類型與速度P2P_UP=&quot;100KBytes/s&quot;VPN_UP=&quot;500KBytes/s&quot;RDP_P2P=&quot;500KBytes/s&quot;RDP_BAND=&quot;100KBytes/s&quot;SERV_UP=&quot;350KBytes/s&quot;GUEST_BAND=&quot;30KBytes/s&quot;#流量限制完整設定#清除規則,並加上全部通行的規則ipfw -f flushipfw -q add 10 allow all from any to any#使用ipfw pipe來定義每一項流量限制與編號ipfw pipe 1 config bw $VPN_UPipfw pipe 2 config bw $P2P_UPipfw pipe 3 config bw $RDP_P2Pipfw pipe 4 config bw $SERV_UPipfw pipe 5 config bw $GUEST_BAND#利用pipe定義從哪裡到哪裡的流量ipfw add 20 pipe 1 ip from any to $VPN_NETipfw add 25 pipe 3 ip from $P2P1_IP to any 3389 in recv $INT_IFipfw add 30 pipe 2 ip from $P2P1_IP to any in recv $INT_IFipfw add 40 pipe 2 ip from $P2P2_IP to any in recv $INT_IFipfw add 110 pipe 5 ip from $GUEST_NET to anyipfw add 120 pipe 5 ip from any to $GUEST_NETipfw add 210 pipe 4 ip from $DMZ_NET to any via ext0 這個規則基本上依照ipfw add 後的數字定義優先權數字越少的規則優先權越高","categories":[{"name":"FreeBSD","slug":"FreeBSD","permalink":"http://kiwi0093.github.io/wiki/categories/FreeBSD/"}],"tags":[{"name":"FreeBSD","slug":"FreeBSD","permalink":"http://kiwi0093.github.io/wiki/tags/FreeBSD/"}]},{"title":"bsnmp & check_mk_agent","slug":"FreeBSD/3-SNMP & Check_MK_agent","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/FreeBSD/3-SNMP & Check_MK_agent/","permalink":"http://kiwi0093.github.io/wiki/wiki/FreeBSD/3-SNMP%20&%20Check_MK_agent/","excerpt":"前言 Librenms需要SNMP才能監控,另外也可以使用check_mk_agent來輔助","text":"前言 Librenms需要SNMP才能監控,另外也可以使用check_mk_agent來輔助 參考資料 柯仓无居所 bsnmp FreeBSD有內建的bsnmp vi /etc/rc.conf 123# /etc/rc.conf--------------------------------------------------------------------------------------------------------------------------------bsnmpd_enable=&quot;YES&quot; pkg install bsnmp-ucd vi /etc/snmpd.conf 123456789101112131415161718192021222324252627282930313233343536373839404142# /etc/snmpd.conf 加上以下內容--------------------------------------------------------------------------------------------------------------------------------begemotSnmpdModulePath.&quot;ucd&quot; = &quot;/usr/local/lib/snmp_ucd.so&quot;%ucdupdateInterval = 500extCheckInterval = 100extUpdateInterval = 3000extTimeout = 60memMinimumSwap = 1600memSwapErrorMsg = &quot;No free swap!&quot;laConfig.1 = &quot;6.0&quot;laConfig.2 = &quot;5.0&quot;laConfig.3 = &quot;4.0&quot;laErrMessage.1 = &quot;1min load average is high!&quot;laErrMessage.2 = &quot;5min load average is high!&quot;laErrMessage.3 = &quot;15min load average is high!&quot;# Process tableprNames.0 = &quot;httpd&quot;prMin.0 = 3prMax.0 = 100prErrFix.0 = 1prErrFixCmd.0 = &quot;/usr/local/etc/rc.d/apache22 restart&quot;# Extension commands (extTable)extNames.0 = &quot;uname&quot;extCommand.0 = &quot;/usr/bin/uname -a&quot;extNames.1 = &quot;uptime&quot;extCommand.1 = &quot;/usr/bin/uptime&quot;# example of extension with fix commandextNames.2 = &quot;apache&quot;extCommand.2 = &quot;/usr/local/etc/rc.d/apache status&quot;extErrFix.2 = 1extErrFixCmd.2 = &quot;/usr/local/etc/rc.d/apache restart&quot; /etc/rc.d/bsnmpd restart bsnmpwalk -v 2c -c public 確認有取得資料就是OK了 check_mk_agent pre-install needed 1pkg install bash ipmitool libstatgrab git 因為check_mk_agent需要用bash跑,沒有bash是不會動的 Install and setup 取得check_mk_agent &amp; 賦予執行權限 123git clone https://github.com/librenms/librenms-agent.gitcp librenms-agent/check_mk_agent_freebsd /usr/local/bin/check_mk_agentchmod +x /usr/local/bin/check_mk_agent 上述的方法過時了…因為現在port裡面就有支援 /usr/ports/net-mgmt/check_mk_agent/ 12cd /usr/ports/net-mgmt/check_mk_agent/make install clean vi /etc/services 123# /etc/services--------------------------------------------------------------------------------------------------------------------------------check_mk 6556/tcp #check_mk agent 這個是加進去的 vi /etc/inetd.conf 123#/etc/inetd.conf--------------------------------------------------------------------------------------------------------------------------------check_mk stream tcp nowait root /usr/local/bin/check_mk_agent check_mk_agent 這個也是加進去的 vi /etc/rc.conf 1234#/etc/rc.conf--------------------------------------------------------------------------------------------------------------------------------inetd_enable=yesinetd_flags=-wW 這個也是加進去的 vi /etc/hosts.allow 12345#/etc/hosts.allow--------------------------------------------------------------------------------------------------------------------------------# Allow nagios server to access uscheck_mk_agent : 192.168.56.3 : allowcheck_mk_agent : ALL : deny 這個也是加進去 /etc/rc.d/inetd start telnet確認一下 1234telnet bsdhost 6556&lt;&lt;&lt;check_mk&gt;&gt;&gt;Version: 1.1.13i1AgentOS: freebsd 這樣就好了 結論 雖然我不是很喜歡開inetd來跑,不過這些機器跟port基本上都用FW限制死了連線,加上librenms架在裡面,所以問題應該沒有那麼大 勉強還是可以這樣用的","categories":[{"name":"FreeBSD","slug":"FreeBSD","permalink":"http://kiwi0093.github.io/wiki/categories/FreeBSD/"}],"tags":[{"name":"FreeBSD","slug":"FreeBSD","permalink":"http://kiwi0093.github.io/wiki/tags/FreeBSD/"}]},{"title":"System & Port update/upgrade","slug":"FreeBSD/4-update_system&port","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/FreeBSD/4-update_system&port/","permalink":"http://kiwi0093.github.io/wiki/wiki/FreeBSD/4-update_system&port/","excerpt":"前言 雖然主力的Gateway是FreeBSD,但是我發現這幾年來我的技能數都點到Linux（正確的說都點到V2ray去了)","text":"前言 雖然主力的Gateway是FreeBSD,但是我發現這幾年來我的技能數都點到Linux（正確的說都點到V2ray去了) 基本概念 在Linux裡面基本上沒有所謂的Base OS, 所有的程式都是可以靠同一個package manager來進行update,所以才會有 1234# Debian/Ubuntuapt update &amp;&amp; apt upgrade# Archpacman -Syu 這種一個指令搞定全世界的方法… 而FreeBSD就不一樣了,FreeBSD在這方面就比較像Windows有系統更新跟自己安裝的程式更新這兩個用不同的指令 FreeBSD 系統更新 基本指令 1234# 現有版本更新patchfreebsd-update fetch &amp;&amp; freebsd-update install# 更新到x.y-Release版freebsd-update upgrade -r x.y-RELEASE &amp;&amp; freebsd-update install Port更新 Port Tree更新 12345cd /usr/ports# 第一次使用portsnap fetch &amp;&amp; portsnap extract &amp;&amp; portsnap update# 之後使用portsnap fetch &amp;&amp; portsnap update Port Software更新 1portmaster -a pkg 其實不需要自己compile的話用pkg比較方便 1234567891011121314151617# Installpkg install &lt;pkg_name&gt;# Removepkg delete &lt;pkg_name&gt;# Autoremovepkg autoremove# Check pkgs versionpkg version# 更新repopkg update# 更新pkgpkg upgrade 結論 因為我現在不需要cutomize config to build pkg, 所以現在都是直接改用pkg來處理一切","categories":[{"name":"FreeBSD","slug":"FreeBSD","permalink":"http://kiwi0093.github.io/wiki/categories/FreeBSD/"}],"tags":[{"name":"FreeBSD","slug":"FreeBSD","permalink":"http://kiwi0093.github.io/wiki/tags/FreeBSD/"}]},{"title":"Mirrorlist選用","slug":"Linux/Manjaro/4-mirrorlist_choose","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Manjaro/4-mirrorlist_choose/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Manjaro/4-mirrorlist_choose/","excerpt":"參考網頁 FOSS Linux","text":"參考網頁 FOSS Linux By Country選擇 1sudo pacman-mirrors --country &lt;County Name&gt; 這個指令會依照選定的Country的server列表進行速度確認建立mirror-list By 速度選擇 1sudo pacman-mirrors --fasttrack &lt;數量&gt;","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Manjaro","slug":"Linux/Manjaro","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Manjaro/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Manjaro","slug":"Manjaro","permalink":"http://kiwi0093.github.io/wiki/tags/Manjaro/"},{"name":"Arch","slug":"Arch","permalink":"http://kiwi0093.github.io/wiki/tags/Arch/"}]},{"title":"Manjaro21 for VMware Guest issue","slug":"Linux/Manjaro/5-Manjaro_v21_VMWARE_guest","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Manjaro/5-Manjaro_v21_VMWARE_guest/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Manjaro/5-Manjaro_v21_VMWARE_guest/","excerpt":"前言 Manjaro 21 KDE,不知道發了什麼瘋,安裝到VMWare Workstation裡面的時候會有下面兩個問題 用Free driver &amp; none-Free driver無法開機(21.0.7修好了) 安裝後沒有VM用的Display driver顯示有問題","text":"前言 Manjaro 21 KDE,不知道發了什麼瘋,安裝到VMWare Workstation裡面的時候會有下面兩個問題 用Free driver &amp; none-Free driver無法開機(21.0.7修好了) 安裝後沒有VM用的Display driver顯示有問題 Boot from USB/ISO 雖然問題解決了,但是補充一下對策 12# 開機的時候進入grub editor把driver=free 改成 driver=mesa 就可以了 Dispaly issue fix 基本上就是缺安裝video-virtualmachine這個Vmware跟virtualbox通吃的driver 12345#先安裝上需要的packagesudo pacman -S virtualbox-guest-utils open-vm-toolssudo mhwd -i pci video-virtualmachinesudo systemctl enable vmtoolsd.servicesudo systemctl start vmtoolsd.service 理論上這樣就好了","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Manjaro","slug":"Linux/Manjaro","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Manjaro/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Manjaro","slug":"Manjaro","permalink":"http://kiwi0093.github.io/wiki/tags/Manjaro/"}]},{"title":"Manjaro KDE RDP/VNC Server via xrdp","slug":"Linux/Manjaro/7-RDP_Host_Manjaro_KDE","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Manjaro/7-RDP_Host_Manjaro_KDE/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Manjaro/7-RDP_Host_Manjaro_KDE/","excerpt":"前言 之前為了家裡要有個client console以便使用,所以我弄了個XFCE的VNC server 不過我自己比較喜歡用KDE所以…","text":"前言 之前為了家裡要有個client console以便使用,所以我弄了個XFCE的VNC server 不過我自己比較喜歡用KDE所以… 參考文獻 How to make Manjaro (KDE 5) work as a xrdp server? · Issue #1456 · neutrinolabs/xrdp · GitHub 基本作法 安裝xrdp &amp; xorgxrdp 1yay -S xrdp xorgxrdp 然後啟動服務 12sudo systemctl enable --now xrdp.servicesudo systemctl enable --now xrdp-sesman.service 然後就可以用了基本上什麼其他設定都不用改 注意事項 請記得把~/.xinitrc裡的內容改一下 12345get_session()&#123;# local dbus_args=(--sh-syntax --exit-with-session) local dbus_args=(--sh-syntax) case $1 in#記得把--exit-with-session拿掉不然會卡住","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Manjaro","slug":"Linux/Manjaro","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Manjaro/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Manjaro","slug":"Manjaro","permalink":"http://kiwi0093.github.io/wiki/tags/Manjaro/"},{"name":"Windows","slug":"Windows","permalink":"http://kiwi0093.github.io/wiki/tags/Windows/"}]},{"title":"Oracle Linux Auto Configure Script","slug":"Linux/Oracle Linux/1-autoinstall","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Oracle Linux/1-autoinstall/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Oracle%20Linux/1-autoinstall/","excerpt":"前言 因為佛心的Oracle終身免費VM,所以我去弄了幾個VM來跑 不過因為他的免費系統基本上沒什麼可以選的,所以我就都集中使用Oracle Linux 8","text":"前言 因為佛心的Oracle終身免費VM,所以我去弄了幾個VM來跑 不過因為他的免費系統基本上沒什麼可以選的,所以我就都集中使用Oracle Linux 8 基本需求 建立額外帳號 - 這個算是備援用帳號 擴容 - 將Image的大小擴大到實際上boot volume的大小（因為預設只有50GB左右的系統,但是可以單台建立到100GB的boot volumes所以需要這個 更新系統 基本安裝 - 加裝docker-ce, docker-compose,等工具 基本設定 - git clone基本設定與實際設定系統 script內容 - 改版Rev.2.0 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354#!/bin/bash#font color definecolor1=&#x27;\\e[95m&#x27; # Light Magenta for process stepcolor2=&#x27;\\e[96m&#x27; # Light Cyan for inputcolor3=&#x27;\\e[91m&#x27; # Light Red for warningcolor4=&#x27;\\e[34m&#x27; # Blue for process completedNC=&#x27;\\e[0m&#x27; # End code# Warningecho -e &quot;$&#123;color4&#125;####################################################################################$&#123;nc&#125;&quot;echo -e &quot;$&#123;color4&#125;# #$&#123;nc&#125;&quot;echo -e &quot;$&#123;color4&#125;# $&#123;color3&#125;░█████╗░░█████╗░██████╗░██╗░░░██╗ ██████╗░██╗░██████╗░██╗░░██╗████████╗$&#123;NC&#125; $&#123;color4&#125;#$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# $&#123;color3&#125;██╔══██╗██╔══██╗██╔══██╗╚██╗░██╔╝ ██╔══██╗██║██╔════╝░██║░░██║╚══██╔══╝$&#123;NC&#125; $&#123;color4&#125;#$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# $&#123;color3&#125;██║░░╚═╝██║░░██║██████╔╝░╚████╔╝░ ██████╔╝██║██║░░██╗░███████║░░░██║░░░$&#123;NC&#125; $&#123;color4&#125;#$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# $&#123;color3&#125;██║░░██╗██║░░██║██╔═══╝░░░╚██╔╝░░ ██╔══██╗██║██║░░╚██╗██╔══██║░░░██║░░░$&#123;NC&#125; $&#123;color4&#125;#$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# $&#123;color3&#125;╚█████╔╝╚█████╔╝██║░░░░░░░░██║░░░ ██║░░██║██║╚██████╔╝██║░░██║░░░██║░░░$&#123;NC&#125; $&#123;color4&#125;#$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# $&#123;color3&#125;░╚════╝░░╚════╝░╚═╝░░░░░░░░╚═╝░░░ ╚═╝░░╚═╝╚═╝░╚═════╝░╚═╝░░╚═╝░░░╚═╝░░░$&#123;NC&#125; $&#123;color4&#125;#$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# #$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# #$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# $&#123;color2&#125; For Kiwi&#x27;s own Oracle Linux on OCI using Only$&#123;NC&#125; $&#123;color4&#125;#$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# $&#123;color1&#125; Create/Modified by Kaiwei 2022/03/14$&#123;NC&#125; $&#123;color4&#125;#$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# #$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;####################################################################################$&#123;NC&#125;&quot;echo -e &quot;&quot;echo -e &quot;&quot;echo -e &quot;&quot;echo -e &quot;&quot;echo -e &quot;$&#123;color4&#125;####################################################################################$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# #$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# $&#123;color3&#125; ░██╗░░░░░░░██╗░█████╗░██████╗░███╗░░██╗██╗███╗░░██╗░██████╗░ $&#123;NC&#125;$&#123;color4&#125;#$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# $&#123;color3&#125; ░██║░░██╗░░██║██╔══██╗██╔══██╗████╗░██║██║████╗░██║██╔════╝░ $&#123;NC&#125;$&#123;color4&#125;#$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# $&#123;color3&#125; ░╚██╗████╗██╔╝███████║██████╔╝██╔██╗██║██║██╔██╗██║██║░░██╗░ $&#123;NC&#125;$&#123;color4&#125;#$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# $&#123;color3&#125; ░░████╔═████║░██╔══██║██╔══██╗██║╚████║██║██║╚████║██║░░╚██╗ $&#123;NC&#125;$&#123;color4&#125;#$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# $&#123;color3&#125; ░░╚██╔╝░╚██╔╝░██║░░██║██║░░██║██║░╚███║██║██║░╚███║╚██████╔╝ $&#123;NC&#125;$&#123;color4&#125;#$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# $&#123;color3&#125; ░░░╚═╝░░░╚═╝░░╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░╚══╝╚═╝╚═╝░░╚══╝░╚═════╝░ $&#123;NC&#125;$&#123;color4&#125;#$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# #$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# $&#123;color1&#125; This Script only for Kiwi Private Usage $&#123;NC&#125;$&#123;color4&#125;#$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# $&#123;color1&#125;There is no guarantee for any other environment $&#123;NC&#125;$&#123;color4&#125;#$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# $&#123;color1&#125;Please use for your own risk $&#123;NC&#125;$&#123;color4&#125;#$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;# #$&#123;NC&#125;&quot;echo -e &quot;$&#123;color4&#125;####################################################################################$&#123;NC&#125;&quot;echo -e &quot;&quot;echo -e &quot;&quot;echo -e &quot;$&#123;color2&#125;Press Enter to Continue$&#123;NC&#125;&quot;while :do read ANY case $ANY in *) break ;; esacdone# Create New Userecho -e &quot;$&#123;color1&#125;Create New User for rescue$&#123;NC&#125;&quot;echo -e &quot;$&#123;color2&#125;Please input username you want\\n$&#123;NC&#125;&quot;read NUSERuseradd -m -g root $&#123;NUSER&#125;echo -e &quot;$&#123;color1&#125;Setup password for the user$&#123;NC&#125;&quot;passwd $&#123;NUSER&#125;# Basic system configurationecho -e &quot;$&#123;color1&#125;Basic system configuration started$&#123;NC&#125;&quot;echo -e &quot;$&#123;color1&#125;Update system$&#123;NC&#125;&quot;yum update -y/usr/libexec/oci-growfs -yecho -e &quot;$&#123;color1&#125;Pre-install Docker-ce$&#123;NC&#125;&quot;dnf install -y dnf-utils zip unzipdnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repodnf remove -y runcecho -e &quot;$&#123;color1&#125;System tools installing$&#123;NC&#125;&quot;yum install -y docker-ce --nobestyum install -y gitecho -e &quot;$&#123;color4&#125;.........................................................................................completed$&#123;NC&#125;&quot;# Docker setupecho -e &quot;$&#123;color1&#125;Docker Service enable &amp; start$&#123;NC&#125;&quot;systemctl enable dockersystemctl start dockerecho -e &quot;$&#123;color1&#125;Docker Version$&#123;color2&#125;&quot;docker --versionecho -e &quot;&quot;echo -e &quot;&quot;echo -e &quot;$&#123;color2&#125;Press Enter to Continue$&#123;NC&#125;&quot;while :do read ANY2 case $ANY2 in *) break ;; esacdone# Docker composeecho -e &quot;$&#123;color1&#125;Docker-compose installed and configure$&#123;NC&#125;&quot;curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-composeln -s /usr/local/bin/docker-compose /usr/bin/docker-composeecho -e &quot;$&#123;color4&#125;.........................................................................................completed$&#123;NC&#125;&quot;# git clone setting from kiwi&#x27;s private git repoecho -e &quot;$&#123;color1&#125;Using Kiwi&#x27;s Private Repo to Configure$&#123;NC&#125;&quot;echo -e &quot;$&#123;color2&#125;Are You Kiwi himself?(Yes/No)$&#123;NC&#125;&quot;while :do read KIWI case $KIWI in Yes) mkdir /home/$NUSER/.ssh mkdir /root/.ssh/ echo -e &quot;$&#123;color2&#125;Please Paste your Private SSH key for Github\\n$&#123;NC&#125;&quot; vi /root/.ssh/id_rsa cp /root/.ssh/id_rsa /home/$NUSER/.ssh/ chown -R $NUSER /home/$NUSER chmod 400 /home/$NUSER/.ssh/id_rsa chmod 400 /root/.ssh/id_rsa cd /home/$NUSER git clone git@github.com:Kiwi0093/docker-compose.git docker-compose -f /home/$NUSER/docker-compose/vps/common/portainer-agent/docker-compose.yml up -d docker-compose -f /home/$NUSER/docker-compose/vps/common/watchtower/docker-compose.yml up -d break ;; No) echo -e &quot;$&#123;color1&#125;Do you want to add Portainer &amp; watchtower containers into your system?(Yes/No)$&#123;NC&#125;&quot; while : do read CONTAINER1 case $CONTAINER1 in Yes) echo -e &quot;$&#123;color1&#125;Add portainer/watchtower containers and put docker-compose.yml into /root/docker-compose/$&#123;NC&#125;&quot; # add more compose files mkdir /root/docker-compose # watchtower echo -e &quot;$&#123;color1&#125;Create docker-compose file for watchtower &amp; Portainer$&#123;NC&#125;&quot; echo &quot;version: &#x27;3&#x27;&quot; &gt; /root/docker-compose/docker-compose.yml echo &quot;services:&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; watchtower:&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; image: containrrr/watchtower&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; container_name: watchtower&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; volumes:&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; - /var/run/docker.sock:/var/run/docker.sock&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; environment:&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; - TZ=Asia/Taipei&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; restart: unless-stopped&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &#x27; command: --cleanup --schedule &quot;0 0 4 * * *&quot;&#x27; &gt;&gt; /root/docker-compose/docker-compose.yml echo -e &quot;$&#123;color1&#125;Do you want to use Portainer Host?(Yes/No)$&#123;NC&#125;&quot; while : do read CONTAINER1 case $CONTAINER1 in Yes)# Portainer echo &quot;&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; portainer:&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; image: portainer/portainer-ce:latest&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; container_name: portainer&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; environment:&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; - PUID=1000&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; ports:&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; - 9000:9000&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; volumes:&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; - /var/run/docker.sock:/var/run/docker.sock&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; - /var/lib/docker/volumes/portainer/data:/data&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; restart: always&quot; &gt;&gt; /root/docker-compose/docker-compose.yml break ;; No) echo -e &quot;$&#123;color1&#125;Processing to Protainer-agent$&#123;NC&#125;&quot; echo &quot; portainer:&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; image: portainer/agent:latest&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; container_name: portainer_agent&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; ports:&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; - 9001:9001&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; volumes:&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; - /var/run/docker.sock:/var/run/docker.sock&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; - /var/lib/docker/volumes:/var/lib/docker/volumes&quot; &gt;&gt; /root/docker-compose/docker-compose.yml echo &quot; restart: always&quot; &gt;&gt; /root/docker-compose/docker-compose.yml break ;; *) echo -e &quot;$&#123;color1&#125;Do you want to use Portainer Host?(Yes/No)$&#123;NC&#125;&quot; continue ;; esac done docker-compose -f /root/docker-compose/docker-compose.yml up -d echo -e &quot;$&#123;color1&#125;Do you want to Establish V2ray+Nginx Service?(Yes/No)$&#123;NC&#125;&quot; while : do read CONTAINER2 case $CONTAINER2 in Yes) # Start from Trafik echo -e &quot;$&#123;color1&#125;Create v2ray.yml into /root/docker-compose/$&#123;NC&#125;&quot; echo -e &quot;$&#123;color1&#125;Please input the Domain for Trafik Dashboard$&#123;NC&#125;&quot; read DASHDN echo &quot;version: &#x27;3.3&#x27;&quot; &gt; /root/docker-compose/v2ray.yml echo &quot;&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot;services:&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; traefik:&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; image: traefik:v2.5&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; container_name: traefik&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; command:&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - --api.insecure=false # &lt;== DisEnabling insecure api. Default is ture.&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - --api.dashboard=true # &lt;== Enabling the dashboard to view services, middlewares, routers, etc...&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - --api.debug=true # &lt;== Enabling additional endpoints for debugging and profiling&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - --providers.docker=true # &lt;== Enabling docker as the provider for traefik&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - --providers.docker.exposedbydefault=false # &lt;== Don&#x27;t expose every container to traefik, only expose enabled ones&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - --entrypoints.web.address=:80 # &lt;== Defining an entrypoint for port :80 named web&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - --entrypoints.web-secured.address=:443 # &lt;== Defining an entrypoint for https on port :443 named web-secured&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - --certificatesresolvers.myresolver.acme.httpchallenge=true&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - --certificatesresolvers.myresolver.acme.tlschallenge=true&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - --certificatesresolvers.myresolver.acme.email=kiwi.lin@gmail.com&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; ports:&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - 80:80&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - 443:443&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - 8080:8080&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; volumes:&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - /var/lib/docker/volumes/traefik/letsencrypt:/letsencrypt&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - /var/run/docker.sock:/var/run/docker.sock:ro&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; labels:&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; traefik.enable: true # &lt;== Enable traefik on itself to view dashboard and assign subdomain to view it&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; traefik.http.routers.http_catchall.rule: hostregexp(\\`&#123;host:.*&#125;\\`)&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; traefik.http.routers.http_catchall.entryPoints: web&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; traefik.http.routers.http_catchall.middlewares: redirect_https # &lt;== apply redirect_https middleware which is defined in the below&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; traefik.http.routers.traefik.rule: Host(\\`$DASHDN\\`) # &lt;== Setting the domain for the dashboard&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; traefik.http.routers.traefik.entryPoints: web-secured&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; traefik.http.routers.traefik.tls: true&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; traefik.http.routers.traefik.tls.certresolver: myresolver&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; traefik.http.routers.traefik.service: api@internal&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; traefik.http.middlewares.redirect_https.redirectscheme.scheme: https # &lt;== define a https redirection middleware&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; restart: unless-stopped&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot;&quot; &gt;&gt; /root/docker-compose/v2ray.yml # add Nginx &amp; V2Ray echo -e &quot;$&#123;color1&#125;Please input the Domain for V2ray$&#123;NC&#125;&quot; read V2RAYDN echo &quot; nginx:&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; image: lscr.io/linuxserver/nginx&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; container_name: V2ray_Nginx&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; environment:&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - PUID=1000&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - PGID=1000&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - TZ=Asia/Taipei&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; expose:&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - 80&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; restart: always&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; volumes:&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - /var/lib/docker/volumes/v2ray/nginx/config:/config&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; links:&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - v2ray:v2ray&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; depends_on:&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - v2ray&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; labels:&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; traefik.enable: true # &lt;== Enable traefik on itself to view dashboard and assign subdomain to view it&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; traefik.http.routers.v2ray.rule: Host(\\`$V2RAYDN\\`) # &lt;== Setting the domain for the dashboard&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; traefik.http.routers.v2ray.tls: true&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; traefik.http.routers.v2ray.tls.certresolver: myresolver&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot;&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; v2ray:&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; image: v2fly/v2fly-core&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; container_name: V2ray_V2ray&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; environment:&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - TZ=Asia/Taipei&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; expose:&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - 10000&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; restart: always&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; command: v2ray --config=/etc/v2ray/config.json&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; volumes:&quot; &gt;&gt; /root/docker-compose/v2ray.yml echo &quot; - /var/lib/docker/volumes/v2ray/v2ray:/etc/v2ray&quot; &gt;&gt; /root/docker-compose/v2ray.yml # Create nginx setting file echo -e &quot;$&#123;color1&#125;Download Nginx setting file$&#123;NC&#125;&quot; curl -o /root/default -L -s https://kiwi0093.github.io/script/OL8/default # Create v2ray setting file echo -e &quot;$&#123;color1&#125;Please input UUID for V2ray$&#123;NC&#125;&quot; read V2RAYID echo &#x27;&#123;&#x27; &gt; /root/config.json echo &#x27; &quot;log&quot;: &#123;&#x27; &gt;&gt; /root/config.json echo &#x27; &quot;loglevel&quot;: &quot;warning&quot;&#x27; &gt;&gt; /root/config.json echo &#x27; &#125;,&#x27; &gt;&gt; /root/config.json echo &#x27; &quot;inbounds&quot;: [&#x27; &gt;&gt; /root/config.json echo &#x27; &#123;&#x27; &gt;&gt; /root/config.json echo &#x27; &quot;port&quot;: 10000,&#x27; &gt;&gt; /root/config.json echo &#x27; &quot;listen&quot;: &quot;0.0.0.0&quot;,&#x27; &gt;&gt; /root/config.json echo &#x27; &quot;protocol&quot;: &quot;vless&quot;,&#x27; &gt;&gt; /root/config.json echo &#x27; &quot;settings&quot;: &#123;&#x27; &gt;&gt; /root/config.json echo &#x27; &quot;clients&quot;: [&#x27; &gt;&gt; /root/config.json echo &#x27; &#123;&#x27; &gt;&gt; /root/config.json echo &quot; \\&quot;id\\&quot;: \\&quot;$V2RAYID\\&quot;,&quot; &gt;&gt; /root/config.json echo &#x27; &quot;level&quot;: 0,&#x27; &gt;&gt; /root/config.json echo &#x27; &quot;email&quot;: &quot;kiwi@kaienroid.com&quot;&#x27; &gt;&gt; /root/config.json echo &#x27; &#125;&#x27; &gt;&gt; /root/config.json echo &#x27; ],&#x27; &gt;&gt; /root/config.json echo &#x27; &quot;decryption&quot;: &quot;none&quot;&#x27; &gt;&gt; /root/config.json echo &#x27; &#125;,&#x27; &gt;&gt; /root/config.json echo &#x27; &quot;streamSettings&quot;: &#123;&#x27; &gt;&gt; /root/config.json echo &#x27; &quot;network&quot;: &quot;ws&quot;,&#x27; &gt;&gt; /root/config.json echo &#x27; &quot;security&quot;: &quot;none&quot;,&#x27; &gt;&gt; /root/config.json echo &#x27; &quot;wsSettings&quot;: &#123;&#x27; &gt;&gt; /root/config.json echo &#x27; &quot;path&quot;: &quot;/ray&quot;&#x27; &gt;&gt; /root/config.json echo &#x27; &#125;&#x27; &gt;&gt; /root/config.json echo &#x27; &#125;&#x27; &gt;&gt; /root/config.json echo &#x27; &#125;&#x27; &gt;&gt; /root/config.json echo &#x27; ],&#x27; &gt;&gt; /root/config.json echo &#x27; &quot;outbounds&quot;: [&#x27; &gt;&gt; /root/config.json echo &#x27; &#123;&#x27; &gt;&gt; /root/config.json echo &#x27; &quot;protocol&quot;: &quot;freedom&quot;&#x27; &gt;&gt; /root/config.json echo &#x27; &#125;&#x27; &gt;&gt; /root/config.json echo &#x27; ]&#x27; &gt;&gt; /root/config.json echo &#x27;&#125;&#x27; &gt;&gt; /root/config.json echo -e &quot;$&#123;color1&#125;Please input the Domain for Trafik Dashboard$&#123;NC&#125;&quot; docker-compose -f /root/docker-compose/v2ray.yml up -d docker-compose -f /root/docker-compose/v2ray.yml down mv /root/default /var/lib/docker/volumes/v2ray/nginx/config/nginx/site-confs/ mv /root/config.json /var/lib/docker/volumes/v2ray/v2ray/ docker-compose -f /root/docker-compose/v2ray.yml up -d break ;; No) break ;; *) echo -e &quot;$&#123;color1&#125;Do you want to Establish V2ray+Nginx Service?(Yes/No)$&#123;NC&#125;&quot; continue ;; esac done break ;; No) break ;; *) echo -e &quot;$&#123;color1&#125;Do you want to add Portainer &amp; watchtower containers into your system?(Yes/No)$&#123;NC&#125;&quot; continue ;; esac done break ;; *) continue ;; esacdoneecho -e &quot;$&#123;color4&#125;.........................................................................................completed$&#123;NC&#125;&quot; 基本上就是簡單的更新好裝上該用的東西與預設加上Portainer-agent &amp; Watchtower這兩個container, 因為我會把portainer的Master放在家裡的深處…所以除了那台以外的全部都跑agent就好了… 改版說明 因為這些OL8的機器若是我自己的,基本上都是git clone我自己的repo來build service,但是考慮到有不是我的機器會拿來用而且大多數都要跑V2Ray(唉…GFW呀…) 所以我增加了直接裝上V2ray相關的code進去 Websocket+TLS需要SSL,所以我把Traefik作為基本元件包進去了 因為是用Traefik,所以我就不用V2ray預設的Httpd功能來承接封包,再包一層Nginx做轉發 因為Traefik的尿性，請務必要先設定好DNS之後再啟動不然你就只會得到一個廢掉的DN(因為服務一起來卻沒有對應到，接著你就會收到let’s encryption的Error然後把這個DN卡住至少30天…) 因為我懶，不正確輸入Yes或No都會陷入無限迴圈（大小寫也要正確唷~~~~) 結論 說來說去還是一行搞定 12sudo subash &lt;(curl -L -s https://kiwi0093.github.io/script/OL8/setup.sh)","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Oracle Linux","slug":"Linux/Oracle-Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Oracle-Linux/"}],"tags":[{"name":"Linunx","slug":"Linunx","permalink":"http://kiwi0093.github.io/wiki/tags/Linunx/"},{"name":"Manjaro","slug":"Manjaro","permalink":"http://kiwi0093.github.io/wiki/tags/Manjaro/"}]},{"title":"Package Management for Archlinux & Manjaro","slug":"Linux/Tips/1-Package_management_arch","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Tips/1-Package_management_arch/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Tips/1-Package_management_arch/","excerpt":"前言 一些Pacman/yay的使用技巧","text":"前言 一些Pacman/yay的使用技巧 參考資料 clean-up-arch-linux.md Pacman Manual 有用的參數 連帶移除depend 123sudo pacman -Rs或是yay -Rs 不用的package 列出用不到的 123sudo pacman -Qtdq或是yay -Qtdq 清除用不到的 123sudo pacman -R $(pacman -Qtdq)或是yay -R $(yay -Qtdq) 自動定時清除 使用paccache -r指令並且利用/etc/systemd/system/paccache.time 1234567#/etc/systemd/system/paccache.service---------------------------------------------------------------------------------------------------------------------------------[Unit]Description=Clean-up old pacman pkg cache[Service]ExecStart=/usr/bin/paccache -r 1234567891011# /etc/systemd/system/paccache.timer---------------------------------------------------------------------------------------------------------------------------------[Unit]Description=Clean-up old pacman pkg cache[Timer]OnCalendar=monthly #每個月做一次Persistent=true[Install]WantedBy=multi-user.target 建立好後sudo systemctl enable paccache.timer&amp;sudo systemctl start paccache.timer 清除Cahche 123sudo pacman -Sc或是yay -Sc","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Tips","slug":"Linux/Tips","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Tips/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Manjaro","slug":"Manjaro","permalink":"http://kiwi0093.github.io/wiki/tags/Manjaro/"},{"name":"Arch","slug":"Arch","permalink":"http://kiwi0093.github.io/wiki/tags/Arch/"}]},{"title":"Run Program as root","slug":"Linux/Tips/3-Run_Program_as_root","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Tips/3-Run_Program_as_root/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Tips/3-Run_Program_as_root/","excerpt":"前言 有些App,雖然有GUI但是不用root跑是會fail的,例如Netextender,不用root跑他的pppd會因為權限不足而fail","text":"前言 有些App,雖然有GUI但是不用root跑是會fail的,例如Netextender,不用root跑他的pppd會因為權限不足而fail CLI 這個最簡單 12345678# Become root then run program---------------------------------------------------------------------------------------------------------------------------------suapp# sudo, 記得要先把你的user加到sudoer裡面---------------------------------------------------------------------------------------------------------------------------------sudo app KDE 123# 修改.desktop的內容改為以下(以Netextender為例)---------------------------------------------------------------------------------------------------------------------------------/usr/bin/netExtenderGui -&gt; kdesu /usr/bin/netExtenderGui","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Tips","slug":"Linux/Tips","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Tips/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Manjaro","slug":"Manjaro","permalink":"http://kiwi0093.github.io/wiki/tags/Manjaro/"},{"name":"Arch","slug":"Arch","permalink":"http://kiwi0093.github.io/wiki/tags/Arch/"}]},{"title":"Password Expired time & complexity","slug":"Linux/Tips/4-Password_expired&complex","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Tips/4-Password_expired&complex/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Tips/4-Password_expired&complex/","excerpt":"前言 要登入的時候臨時發現密碼過期以及重設密碼的時候限制一堆很煩","text":"前言 要登入的時候臨時發現密碼過期以及重設密碼的時候限制一堆很煩 參考資料 Expired time - nixCraft Blog Complexity Expire Time Setting 1234567# chage command# list informationsudo chage -l &lt;Username&gt;# Set Expire time(days, -1 is remove)sudo chage -M &lt;time&gt; &lt;Username&gt;# Erase Expire time(days, -1 is remove)sudo chage -E &lt;time&gt; &lt;Username&gt; Complexity 123# /etc/security/pwquality.conf# set minimal password length=nminlen=n","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Tips","slug":"Linux/Tips","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Tips/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Manjaro","slug":"Manjaro","permalink":"http://kiwi0093.github.io/wiki/tags/Manjaro/"},{"name":"Arch","slug":"Arch","permalink":"http://kiwi0093.github.io/wiki/tags/Arch/"},{"name":"PhotonOS","slug":"PhotonOS","permalink":"http://kiwi0093.github.io/wiki/tags/PhotonOS/"}]},{"title":"Simple Tools for Linux","slug":"Linux/Tips/5-tools","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Tips/5-tools/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Tips/5-tools/","excerpt":"前言 有一些功能很簡單但是其實蠻好用的工具","text":"前言 有一些功能很簡單但是其實蠻好用的工具 NMAP 這是一個簡單的Port掃描程式,在沒有特別用firewall做處理的機器上可以scan看看有哪些Port有在listen 簡單語法 1nmap -sT -T4 &lt;IP address&gt; 範例 這是我隨便掃一台VNC server的結果 ncdu 這是一個可以看硬碟用量的程式跟df -H算是搭配用的 簡單語法 1ncdu / 範例 du 有些系統並沒有port進ncdu,但是會有du可以使用,基本上ncdu算是du的強化版 所以會用du指令也可以達到類似的效果 語法 1du -ahx /where/you/want/to/see | sort -rh | head -n 30 語法說明 基本上這行語法只是利用Pipe的方式把三個指令拼起來分別是 du 這就是主角,會列出指定目錄的各個目錄/檔案大小 -a, --all 列出所有檔案跟目錄的大小 -h, --human-readable 檔案/目錄的大小以人類容易閱讀的單位(kb, mb, gb)顯示 -x, --one-file-system 跳過在不同file system的目錄 --exculde=特徵 du在跑得時候會跳過滿足這種特徵的檔案 -X, --exculde-from=檔案 du在跑得時候會跳過定義的檔案內列出的所有特徵值 -t, --threshold=SIZE 在SIZE為正的時候會省略比這個SIZE還小的檔案, SIZE為負的時候則會省略比這個SIZE還大的檔案 sort 排序 -r, --reverse 反轉排序結果(因為預設是從小到大,要從大到小的話需要逆轉) -h, --human-numeric-sort 比較人類看得懂單位(如1G&gt;2K之類的) head 只顯示前多少項 -n 幾項,範例裡面是列出top 30 範例","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Tips","slug":"Linux/Tips","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Tips/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Manjaro","slug":"Manjaro","permalink":"http://kiwi0093.github.io/wiki/tags/Manjaro/"},{"name":"Arch","slug":"Arch","permalink":"http://kiwi0093.github.io/wiki/tags/Arch/"},{"name":"PhotonOS","slug":"PhotonOS","permalink":"http://kiwi0093.github.io/wiki/tags/PhotonOS/"}]},{"title":"WSL 1.0 Environment Setup","slug":"Linux/WSL/2-WSL1.0_Installation","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/WSL/2-WSL1.0_Installation/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/WSL/2-WSL1.0_Installation/","excerpt":"前言 Microsoft的WSL現在正式進入1.0版,這版最大的優點就是官方直接支援systemd的使用以及更好的支援GUI apps","text":"前言 Microsoft的WSL現在正式進入1.0版,這版最大的優點就是官方直接支援systemd的使用以及更好的支援GUI apps 基本環境 Windows版本 參考資料 The Will Will Web Microsoft官方網頁說明 基本需求 Windows 10版本 2004 和更新版本 (組建 19041 和更新版本) 或Windows 11 Windows 10的話基本上還要安裝更新檔 - KB5020030 後才能正常使用 [檔案的下載位置 - Microsoft Update Catalog](Microsoft Update Catalog) 若連結失效就去 Microsoft Update Catalog 搜尋 KB5020030 依照你的platform下載安裝 要確認你的Windows版本的話請 Ctl-R鍵入winver就可以看得到 WSL安裝 很簡單就去Microsoft Store裡搜尋wsl裝上 並把相關的打勾後跑完重開 點紅框進入傳統模式 點紅框開啟 Hyper-V要打開 這個是基本 Windows Hypervisor平台要打開 Windows子系統Linux版要打開 這個是整個wsl的基本組件 虛擬機器平台要打開 其他推薦工具 基本上Windows有一些其他的工具會讓WSL更好用 Windows Terminal 記得要裝上Nerd-font這樣你用zsh-powerline的時候才會漂亮唷(基本上有美化過得就已經有字型了) Manjaro WSL2 由於WSL內建的disturbution我都不是很喜歡(主要都是debian/Ubuntu)所以我就找了ManjaroWSL2來使用 GitHub - sileshn/ManjaroWSL2: Manjaro for WSL2 using wsldl 用法很簡單只要把抓下來的壓縮檔解壓後執行Manjaro.exe就可以了 這個版本會自動在建立好的時候啟動systemd所以連手動啟動的方式都省了 Systemd 手工在WSL內啟動systemd及確認方法如下 12345678910111213141516# 在powershell or cmd中wsl --version# 若會出現版本號確認是WSL 1.0# 在WSL內確認/etc/wsl.conf中有以下字串[boot]systemd=true# 然後在Powershell or cmdwsl --shutdownwsl# 這樣確保重新啟動後在WSL內ps --no-headers -o comm 1# 顯示 systemd 就成功了 VirtualBOX Hyper-V support 基本上只要把virtualbox裡的VM支援換成`hyper-v``就好了如下 結論 細部的WSL設定就留給下一篇寫","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"WSL","slug":"Linux/WSL","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/WSL/"}],"tags":[{"name":"Linunx","slug":"Linunx","permalink":"http://kiwi0093.github.io/wiki/tags/Linunx/"},{"name":"Windows","slug":"Windows","permalink":"http://kiwi0093.github.io/wiki/tags/Windows/"}]},{"title":"SSH Keys for Github","slug":"Misc/SSH/2-ssh_key_for_github","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Misc/SSH/2-ssh_key_for_github/","permalink":"http://kiwi0093.github.io/wiki/wiki/Misc/SSH/2-ssh_key_for_github/","excerpt":"前言 現在Github只吃ssh key的連線,不然就得用token…所以我還是把Key做了吧","text":"前言 現在Github只吃ssh key的連線,不然就得用token…所以我還是把Key做了吧 參考資料 Expired time - nixCraft Blog Complexity 沒有Key的狀態 就產生新的Key 1ssh-keygen -t rsa -C &quot;your@mail.for.github&quot; 然後把產生的id_rsa.pub裡的資料貼到Github的 Setting -&gt; SSH and GPG keys -&gt; new ssh key 然後就可以了 已經有現成的Private key 12eval `ssh-agent -s`ssh-add /location/to/your/key 變更repo連線方式 12345vi /location/to/repo/.git/config把裡面的url = https://github.com/&lt;USER&gt;/Repo.git改成url = git@github.com:&lt;USER&gt;/Repo.git 然後就可以快樂的連線了 追加 雖然可以用 ssh-add把key加入使用，但是常常會有問題需要一直加入key，根本的解決方案就是讓key file為維持檔名id_rsa就可以直接用了…","categories":[{"name":"Misc","slug":"Misc","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/"},{"name":"SSH","slug":"Misc/SSH","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/SSH/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://kiwi0093.github.io/wiki/tags/Git/"}]},{"title":"SSH基本設定與使用","slug":"Misc/SSH/1-ssh_basic","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Misc/SSH/1-ssh_basic/","permalink":"http://kiwi0093.github.io/wiki/wiki/Misc/SSH/1-ssh_basic/","excerpt":"前言 現在要求用Key pair的SSH越來越多,不管是Git, Ansible或是Oracle Cloud的VM都會要求用Key pair來連線,所以就把相關的指令整理一下","text":"前言 現在要求用Key pair的SSH越來越多,不管是Git, Ansible或是Oracle Cloud的VM都會要求用Key pair來連線,所以就把相關的指令整理一下 SSH key Pair 參考資料 GTW - SSH 公開金鑰認證：不用打密碼登入 Linux 設定教學，安全又方便] MIS腳印 - Windows 使用 SSH 金鑰免密碼登入 Linux Window工具 - Putty, Puttygen 產生Key Pair Linux/FreeBSD console 基本指令是使用ssh-keygen指令但是基於使用方便可以加上一些參數來調整 1234567891011121314151617181920212223242526272829303132# Basic from man ssh-keygenssh-keygen [-q] [-a rounds] [-b bits] [-C comment] [-f output_keyfile] [-m format] [-N new_passphrase] [-O option] [-t dsa | ecdsa | ecdsa-sk | ed25519 | ed25519-sk | rsa] [-w provider] [-Z cipher] ssh-keygen -p [-a rounds] [-f keyfile] [-m format] [-N new_passphrase] [-P old_passphrase] [-Z cipher] ssh-keygen -i [-f input_keyfile] [-m key_format] ssh-keygen -e [-f input_keyfile] [-m key_format] ssh-keygen -y [-f input_keyfile] ssh-keygen -c [-a rounds] [-C comment] [-f keyfile] [-P passphrase] ssh-keygen -l [-v] [-E fingerprint_hash] [-f input_keyfile] ssh-keygen -B [-f input_keyfile] ssh-keygen -D pkcs11 ssh-keygen -F hostname [-lv] [-f known_hosts_file] ssh-keygen -H [-f known_hosts_file]sa ssh-keygen -K [-a rounds] [-w provider] ssh-keygen -R hostname [-f known_hosts_file] ssh-keygen -r hostname [-g] [-f input_keyfile] ssh-keygen -M generate [-O option] output_file ssh-keygen -M screen [-f input_file] [-O option] output_file ssh-keygen -I certificate_identity -s ca_key [-hU] [-D pkcs11_provider] [-n principals] [-O option] [-V validity_interval] [-z serial_number] file ... ssh-keygen -L [-f input_keyfile] ssh-keygen -A [-a rounds] [-f prefix_path] ssh-keygen -k -f krl_file [-u] [-s ca_public] [-z version_number] file ... ssh-keygen -Q [-l] -f krl_file file ... ssh-keygen -Y find-principals [-O option] -s signature_file -f allowed_signers_file ssh-keygen -Y check-novalidate [-O option] -n namespace -s signature_file ssh-keygen -Y sign -f key_file -n namespace file ... ssh-keygen -Y verify [-O option] -f allowed_signers_file -I signer_identity -n namespace -s signature_file [-r revocation_file]# 基本上會用的function大概就是幾個而已-b 定義編碼長度, rsa預設是3072,其實很夠用了-t 編碼方式, 有dsa | ecdsa | ecdsa-sk | ed25519 | ed25519-sk | rsa可以挑,一般教學都是推薦用rsa-C 這個Comment可以定義對應的Email address-f 可以定義out put的key pair名稱 所以一般來說我都會這樣用 1ssh-keygen -b 4096 -t rsa -f &lt;server_or_service_name&gt; 然後就會在~/.ssh/裡面產生&lt;server_or_service_name&gt; &amp; &lt;server_or_service_name&gt;.pub兩個檔案 Windows by Putty 基本上是一樣的在右下角設定好bits,確認是哪一種,然後按下Generate就會產生Private key跟Public Key 同場加映 - 在企鵝下的ppk-&gt;pem 因為時常會用Manjaro client,所以去查了一下, Manjaro安裝putty後就自動裝上puttygen了,所以不需要再安裝,使用Ubuntu/Debian的人還還需要裝上 12#安裝Putty工具apt install putty-tools 有了工具就轉檔 12#把你的ppk檔轉成pem檔供ssh client直接使用puttygen yourkey.ppk -O private-openssh -o yourkey.pem 轉好後就可以用以下指令登入 12#使用pem登入ssh -i /your/key/file user@hostname.or.ip Public Key @ Server side 這個有兩個方法可以做 Simple Copy &amp; Paste 直接把public key的內容貼到被登入帳號的~/.ssh/authorized_keys 可以利用vi編輯的時候複製貼上或是 1cat &lt;server_or_service_name&gt;.pub &gt;&gt; ~/.ssh/authorized_keys 不過一般來說在做這件事的時候都會懶的先upload &lt;server_or_service_name&gt;.pub到目標server上,所以很少會這樣用 Putty Keygen轉換 因為Putty不吃一般的pem檔案,所以要轉換成ppk給putty從windows連線到sshd使用 讀進去後,可以加上自己的密碼 鍵入自己想要的密碼後Save as a ppk file就好了 ssh-copy-id 1ssh-copy-id -i ~/.ssh/&lt;server_or_service_name&gt;.pub USER@HOST 預設是~/.ssh/id_rsa.pub所以要用-i指令定義是哪個檔案 這樣就可以把public key弄上去,之後再去修改Server端的sshd_config把密碼登入關掉就好了 sshd_config 除了client端的設定以外,其實server端也有不少要調整的 123456789101112131415161718192021222324# 禁止Root帳號透過ssh登入PermitRootLogin no# 基本上都會建議設定要拒絕root的遠端登入,但是碰上使用ansible的時候就會覺得除了root帳號直接拿來用以外的方法都很麻煩...所以這裡要慎選# 接受Public Key認證方式PubkeyAuthentication yes# 預設的Public Key位置檔名AuthorizedKeysFile .ssh/authorized_keys# 這個其實是可以修改的,不過我都不會去改他# 不使用Build-in的密碼認證系統也禁止空白密碼PasswordAuthentication noPermitEmptyPasswords no# 禁止使用密碼認證登入ChallengeResponseAuthentication noUsePAM no# 特定User的設定(這個整段只能放在sshd_config的最後面Match &lt;User1&gt;, &lt;User2&gt;, ...# 然後定義這些User的設定, 例如 PasswordAuthentication yes# 這樣就只有User1跟User2可以用密碼登入其他都不行 SSH 其實這個很簡單就是 1ssh USER@HOST 就可以用了,但是有指定的key的話就要加參數 1ssh -i /location/private_key USER@HOST 因為是認Private key的,所以可以在常用的client主機上都放上一樣的private key來進行","categories":[{"name":"Misc","slug":"Misc","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/"},{"name":"SSH","slug":"Misc/SSH","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/SSH/"}],"tags":[{"name":"SSH","slug":"SSH","permalink":"http://kiwi0093.github.io/wiki/tags/SSH/"}]},{"title":"Shell Script - Function - Selection","slug":"Misc/Shell Script/5-selection","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Misc/Shell Script/5-selection/","permalink":"http://kiwi0093.github.io/wiki/wiki/Misc/Shell%20Script/5-selection/","excerpt":"前言 Shell Script也能做出上下選單","text":"前言 Shell Script也能做出上下選單 function 基本上這個功能是利用function功能刻出來的，我也是找到後複製修改而已 function code 參考資料 shell - Arrow key/Enter menu - Unix &amp; Linux Stack Exchange select_option 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#!/usr/bin/bash# Renders a text based list of options that can be selected by the# user using up, down and enter keys and returns the chosen option.## Arguments : list of options, maximum of 256# &quot;opt1&quot; &quot;opt2&quot; ...# Return value: selected index (0 for opt1, 1 for opt2 ...)function select_option &#123; # little helpers for terminal print control and key input ESC=$( printf &quot;\\033&quot;) cursor_blink_on() &#123; printf &quot;$ESC[?25h&quot;; &#125; cursor_blink_off() &#123; printf &quot;$ESC[?25l&quot;; &#125; cursor_to() &#123; printf &quot;$ESC[$1;$&#123;2:-1&#125;H&quot;; &#125; print_option() &#123; printf &quot; $1 &quot;; &#125; print_selected() &#123; printf &quot; $ESC[7m $1 $ESC[27m&quot;; &#125; get_cursor_row() &#123; IFS=&#x27;;&#x27; read -sdR -p $&#x27;\\E[6n&#x27; ROW COL; echo $&#123;ROW#*[&#125;; &#125; key_input() &#123; read -s -n3 key 2&gt;/dev/null &gt;&amp;2 if [[ $key = $ESC[A ]]; then echo up; fi if [[ $key = $ESC[B ]]; then echo down; fi if [[ $key = &quot;&quot; ]]; then echo enter; fi; &#125; # initially print empty new lines (scroll down if at bottom of screen) for opt; do printf &quot;\\n&quot;; done # determine current screen position for overwriting the options local lastrow=`get_cursor_row` local startrow=$(($lastrow - $#)) # ensure cursor and input echoing back on upon a ctrl+c during read -s trap &quot;cursor_blink_on; stty echo; printf &#x27;\\n&#x27;; exit&quot; 2 cursor_blink_off local selected=0 while true; do # print options by overwriting the last lines local idx=0 for opt; do cursor_to $(($startrow + $idx)) if [ $idx -eq $selected ]; then print_selected &quot;$opt&quot; else print_option &quot;$opt&quot; fi ((idx++)) done # user key control case `key_input` in enter) break;; up) ((selected--)); if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;; down) ((selected++)); if [ $selected -ge $# ]; then selected=0; fi;; esac done # cursor position back to normal cursor_to $lastrow printf &quot;\\n&quot; cursor_blink_on return $selected&#125; select_opt - 更容易在case中使用 123456function select_opt &#123; select_option &quot;$@&quot; 1&gt;&amp;2 local result=$? echo $result return $result&#125; 應用方法 select_option用法 code 123456789101112...# 已經有function select_option前提echo &quot;Select one option using up/down keys and enter to confirm:&quot;echooptions=(&quot;one&quot; &quot;two&quot; &quot;three&quot;)select_option &quot;$&#123;options[@]&#125;&quot;choice=$?echo &quot;Choosen index = $choice&quot;echo &quot; value = $&#123;options[$choice]&#125;&quot; 效果 12345Select one option using up/down keys and enter to confirm: [one] two three select_opt Code 12345678...# 在有function select_option &amp; select_opt前提下case `select_opt &quot;Yes&quot; &quot;No&quot; &quot;Cancel&quot;` in 0) echo &quot;selected Yes&quot;;; 1) echo &quot;selected No&quot;;; 2) echo &quot;selected Cancel&quot;;;esac 效果 123[selected Yes]selected Noselected Cancel","categories":[{"name":"Misc","slug":"Misc","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/"},{"name":"Shell Script","slug":"Misc/Shell-Script","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Shell-Script/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"script","slug":"script","permalink":"http://kiwi0093.github.io/wiki/tags/script/"}]},{"title":"Vi / Vim Tips","slug":"Misc/Vim/1-Vi⁄Vim tips","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Misc/Vim/1-Vi⁄Vim tips/","permalink":"http://kiwi0093.github.io/wiki/wiki/Misc/Vim/1-Vi%E2%81%84Vim%20tips/","excerpt":"前言 Vi /Vim是我很常用的Editor,所以會一點小技巧很重要","text":"前言 Vi /Vim是我很常用的Editor,所以會一點小技巧很重要 基本操作 基本指令 指令 效果 :q 不存檔離開 :q! 強制不存檔離開 :w 寫入存檔 :wq 存檔離開 :wq! 強制存檔離開 / 搜尋模式 基本操作 鍵盤指令 效果 dd 整列刪除 [數字]dd 刪除[數字]列 u Undo動作 p 貼上dd掉的內容 i 在當位置上進入編輯模式 a 在後面的位置進入編輯模式 o 在下一行進入編輯模式 進階操作 參考資料 Find and Replace in Vim / Vi Linux技術手札 指令說明 指令 效果 :%s/search_from/replace_to/g 將檔案內，所有 “search_from” 的字串替換成 “replace_to” :%s/search_from/replace_to/gc 在取代前，向使用者確認 :%s/search_from/replace_to/gi 略過英文大小寫的差異 😒/search_from/replace_to/g 只取代當行 :[行數起點:行數終點]s/search_from/replace_to/gc 指定[行數起點:行數終點]範圍取代","categories":[{"name":"Misc","slug":"Misc","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/"},{"name":"Vim","slug":"Misc/Vim","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Vim/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Manjaro","slug":"Manjaro","permalink":"http://kiwi0093.github.io/wiki/tags/Manjaro/"},{"name":"Arch","slug":"Arch","permalink":"http://kiwi0093.github.io/wiki/tags/Arch/"}]},{"title":"Vim with Powerline","slug":"Misc/Vim/2-vim&powerline","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Misc/Vim/2-vim&powerline/","permalink":"http://kiwi0093.github.io/wiki/wiki/Misc/Vim/2-vim&powerline/","excerpt":"前言 自從我開始用Linux當主要的console後就開始騷包的準備大量導入Powerline","text":"前言 自從我開始用Linux當主要的console後就開始騷包的準備大量導入Powerline 參考文獻 Powerline on Linux: An Integration Guide Pre-Start vim 12# Archsudo pacman -S vim Powerline 12# Archsudo pacman -S powerline Setting 12# Manjarocp /usr/share/vim/vim90/vimrc_example.vim ~/.vimrc 在~/.vimrc內加上 12345&quot; Powerline Settingset laststatus=2 &quot; Always display the status barpython3 from powerline.vim import setup as powerline_setuppython3 powerline_setup()python3 del powerline_setup 在Manjaro裡面不用去定義powerline_cmd=&quot;py3&quot; 效果圖 結論 就是騷而已","categories":[{"name":"Misc","slug":"Misc","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/"},{"name":"Vim","slug":"Misc/Vim","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Vim/"}],"tags":[{"name":"Editor","slug":"Editor","permalink":"http://kiwi0093.github.io/wiki/tags/Editor/"},{"name":"Unix","slug":"Unix","permalink":"http://kiwi0093.github.io/wiki/tags/Unix/"}]},{"title":"Vim folding","slug":"Misc/Vim/3-vim_folding","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Misc/Vim/3-vim_folding/","permalink":"http://kiwi0093.github.io/wiki/wiki/Misc/Vim/3-vim_folding/","excerpt":"前言 原來vim也是可以把code folding起來的","text":"前言 原來vim也是可以把code folding起來的 參考文獻 vim folding @ 工作小錦囊 :: 隨意窩 Xuite日誌 Folding | Vim Tips Wiki | Fandom 設定方法 如同文章所述, 基本的類型有好幾種最終我是選用marker 寫在.vimrc內 因為我不管怎麼用指令都弄不出來,最後還是寫在.vimrc內一次搞定 123456syntax onset foldmarker=&#123;&#123;&#123;,&#125;&#125;&#125;set foldmethod=markerset foldlevel=0 &quot; 預設全部關閉let php_folding = 1 &quot; 這個很重要set foldnestmax=3 然後就只要在folder前加上# comment &#123;&#123;&#123;`然後段落的最後加上`&#125;&#125;&#125;就好了 寫成lua for NvChad 現在我主要都換成neovim+NvChad所以這個foldering功能也得塞進NvChad的custom內 123456vim.cmd(&#x27;syntax on&#x27;)vim.cmd(&#x27;set foldmarker=&#123;&#123;&#123;,&#125;&#125;&#125;&#x27;)vim.cmd(&#x27;set foldmethod=marker&#x27;)vim.cmd(&#x27;set foldlevel=0&#x27;)vim.cmd(&#x27;let php_folding = 1&#x27;)vim.cmd(&#x27;set foldnestmax=3&#x27;) 基本上就是把vimrc內的設定用 vim.cmd('vimscript content') 的形式包起來寫過就好了 相關指令 command effect zo Open Fold zc Close Fold zm 全部縮起來(將 foldlevel-1) zM 全部縮起來(設 foldlevel=0) zf 製作出起始 Fold 符號 zF 製作出起始與結尾 Fold 符號 zi 啟用/關閉折疊 zo 打開折疊 zc 關閉折疊 zO 打開所有折疊 zC 關閉所有折疊 zx 更新折壘，即除了游標所在折疊不關，其他都關掉 結論 其實這樣很方便，不會一個檔案看起來落落長的很難看","categories":[{"name":"Misc","slug":"Misc","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/"},{"name":"Vim","slug":"Misc/Vim","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Vim/"}],"tags":[{"name":"Editor","slug":"Editor","permalink":"http://kiwi0093.github.io/wiki/tags/Editor/"},{"name":"Unix","slug":"Unix","permalink":"http://kiwi0093.github.io/wiki/tags/Unix/"}]},{"title":"Manjarowsl for Windows WSL2","slug":"Linux/WSL/ManjaroWSL/1-WSL2-ManjaroWSL","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/WSL/ManjaroWSL/1-WSL2-ManjaroWSL/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/WSL/ManjaroWSL/1-WSL2-ManjaroWSL/","excerpt":"前言 因為手上有台機器的windows拿到了權限可以安裝WSL來用…就來加裝ManjaroWSL","text":"前言 因為手上有台機器的windows拿到了權限可以安裝WSL來用…就來加裝ManjaroWSL Pre-Start 首先要先把WSL/WSL2弄好 用管理者權限打開powershell並執行下列指令來開啟Windows Subsystem for Linux 1dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart 用管理者權限打開powershell並執行下列指令來開啟Virtual Machine 1dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart Download WSL-Kernel and Install Set Default to WSL2 1wsl --set-default-version 2 Install &amp; Initialize ManjaroWSL Download ManjaroWSL很佛心已經包好了直接到這裡下載最新的zip檔 放置＆安裝 把下載好的zip檔放在你預設要作為ManjaroWSL整個系統的地方並解壓後 打開powershell 1./Manjaro.exe 就會自動進行解壓然後再執行一次 1./Manjaro.exe Initialize 首先依照提示進行是否要resize及建立new user 這裡就都選No理由如下 不會用到250GB以上 尤其是它都會mount windows的槽到/mnt/ User的部份後面的script會建立,為了好看的zsh console以及Xfce還是後面建會比較好 Configure System Run Script as root 1bash &lt;(curl -L -s https://kiwi0093.github.io/script/WSL/manjaro.sh) Script使用注意 一開始的時候自己輸入國家會比讓它跳最快的快 中間需要編輯/etc/wsl.conf的時候（就是會忽然跑出一個`vi``的界面) 123[Users]#加入以下資訊default = &lt;User Name you created and wish to be default&gt; 好了之後:wq存檔跳出 Script說明 詳細的script內容我就不貼了 Mirrorlist &amp; System Upgrade 12345678910111213141516171819202122# Basic system configurationecho -e &quot;$&#123;color1&#125;Basic system configuration started$&#123;NC&#125;&quot;echo -e &quot;$&#123;color1&#125;Setting your Repo$&#123;NC&#125;&quot;echo -e &quot;$&#123;color2&#125;Do you want to set location for the mirror-list?(Y for Location, others for fastest 3 location)$&#123;NC&#125;&quot;while :do read LT case $LT in Y) echo -e &quot;$&#123;color2&#125;Please input location you want(EX, tw for Taiwan, us for USA)\\n$&#123;NC&#125;&quot; read LT2 pacman-mirrors -c $LT2 break ;; *) pacman-mirrors --fasttrack 3 break ;; esacdoneecho -e &quot;$&#123;color1&#125;Update system$&#123;NC&#125;&quot;pacman -Syyu 簡單的說就是弄個選項來跑pacman-mirrors &amp; pacman -Syyu Basic Tools Install 12345echo -e &quot;$&#123;color1&#125;Install Basic tools$&#123;NC&#125;&quot;pacman -S git yay wget curl rsync sshpass zsh manjaro-zsh-config \\ttf-nerd-fonts-symbols ttf-meslo-nerd-font-powerlevel10k \\ttf-meslo-nerd-font-powerlevel10k powerline-fonts \\nerd-fonts-noto-sans-mono vim wireguard-tools systemd-resolvconf htop --noconfirm 在這個區塊裝上zsh及其相關的美化工具, git yay rsync wireguard及其相關工具 Xfce4及Manjaro theme 12345echo -e &quot;$&#123;color1&#125;Install Xfce4 for GUI$&#123;NC&#125;&quot;pacman -S xfce4-gtk3 xfce4-goodies xfce4-terminal network-manager-applet \\xfce4-notifyd-gtk3 xfce4-whiskermenu-plugin-gtk3 tumbler engrampa lightdm \\lightdm-gtk-greeter lightdm-gtk-greeter-settings manjaro-xfce-gtk3-settings \\manjaro-settings-manager --noconfirm 這段就是抄Manjaro官方文件的 GUI Tools &amp; 中文 12345678echo -e &quot;$&#123;color1&#125;Install GUI$ tools$&#123;NC&#125;&quot;pacman -S terminator brave-browser tigervnc gnome-pie --noconfirmecho -e &quot;$&#123;color1&#125;Install Chinese Environment$&#123;NC&#125;&quot;pacman -S adobe-source-han-serif-tw-fonts adobe-source-han-serif-hk-fonts \\adobe-source-han-serif-cn-fonts adobe-source-han-sans-tw-fonts \\adobe-source-han-sans-hk-fonts adobe-source-han-sans-cn-fonts \\adobe-source-han-serif-jp-fonts adobe-source-han-sans-jp-fonts \\fcitx fcitx-chewing fcitx-configtool fcitx-mozc fcitx-configtool --noconfirm 一樣沒裝什麼 其他的部份就是一些設定檔的匯入與帳號建立沒什麼好看的比較值得看的是 Systemd on WSL 12345678910echo -e &quot;$&#123;color1&#125;Change your root password &amp; shell to zsh$&#123;NC&#125;&quot;sudo -u $USERN yay -S genie-systemd-gitecho &#x27;genie -i&#x27; &gt; /etc/init.wslchmod +x /etc/init.wslgenie -igenie -c systemctl disable auditd.servicegenie -c systemctl disable multipathd.servicegenie -c systemctl disable systemd-modules-load.servicegenie -c systemctl enable systemd-resolved.servicegenie -c systemctl start systemd-resolved.service 經過實驗,大概能簡單又正常跑起來的就只有genie-systemd-git了他的原理我也不是很懂 反正就是裝好之後記得用 genie -i來初始化然後可以用genie -c 來執行指令或是開新的shell也可以 ### 建立desktop shortcut 使用[GWSL](GWSL | gwsl),先進行設定 GWSL Distro Tools–&gt; Display/Audio auto exporting 開啟 GWSL Distro Tools --&gt; LibGL Indirect開啟 然後 Shortcut Creator Shortcut Label - 這個是你的Windows start Menu會出現的名字隨你定義 shortcut Command - 因為是Xfce4所以固定是startxfce4 Display Mode - 要想整個desktop顯示只能選single Window或是Fullscreen Keep Xserver Instance - Display Mode若是選Fullscreen的時候這個要選true 不然會閃退 好了之後可以先Test Configuration測試一下是不是自己要的,若沒問題就`Add to Start Menu`` 結語 老實說一看到 WSL的時候很讓人開心,發現有Manjaro的時候超開心的然後真的裝上後 就沒那麼開心了,理由如下 速度沒有想像的快,尤其是開在desktop內跑的 所有multiscreen跑的程式都不能切換輸入法（或是可以試試預設改用chewing然後只用shift切換？） Desktop模式放置一段時間就會死掉…連同在裡面跑的都一起… systemd雖然勉強可以跑但是感覺還是差一大截 所以說若是只需要一個linux shell拿來跑點東西或是有什麼原因非得同時跑Windows+Linux的時候是個好選擇（應該會越來越好用）但是若要跟真的Linux Desktop一比較就蠻渣的 甚至比不上VNC另外一台Linux Desktop的效能… 不過就是有特殊用途才用呀～～～～","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"WSL","slug":"Linux/WSL","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/WSL/"},{"name":"ManjaroWSL","slug":"Linux/WSL/ManjaroWSL","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/WSL/ManjaroWSL/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Manjaro","slug":"Manjaro","permalink":"http://kiwi0093.github.io/wiki/tags/Manjaro/"},{"name":"Windows","slug":"Windows","permalink":"http://kiwi0093.github.io/wiki/tags/Windows/"}]},{"title":"Manjarowsl2","slug":"Linux/WSL/ManjaroWSL/3-WSL1.0_Manjarowsl2","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/WSL/ManjaroWSL/3-WSL1.0_Manjarowsl2/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/WSL/ManjaroWSL/3-WSL1.0_Manjarowsl2/","excerpt":"前言 我其實算是一個Manjaro中毒患者…以至於用WSL我也要用Manjaro","text":"前言 我其實算是一個Manjaro中毒患者…以至於用WSL我也要用Manjaro Manjarowsl2 GitHub - sileshn/ManjaroWSL2: Manjaro for WSL2 using wsldl 這個專案基本上跟上一版一樣都是利用wsldl: Advanced WSL launcher 達成的作法,有興趣自己打造的人也可以用wsldl自己來 Install 只要把下載的檔案解壓縮在你喜歡的位置然後執行解開的Manjaro.exe順著按完就好了 基本設定 12345678# make sure you&#x27;re root# Set your mirrorlist to what you likepacman-mirrors -c tw# system full updatepacman -Syyuu# Install basic toolspacman -S yay neovim zsh noto-fonts-cjk .......etc # completed 看到上面的內容會不會覺得很傻眼? 畢竟看起來就跟一般的Manjaro設定一模一樣… 沒錯基本上就是一樣(就是這樣才棒) 但是跟之前的版本說明比較起來有一些不同 不需要安裝DE也可以正常跑GUI apps 例如pacman -S brave-browser就會直接裝上Brave, 然後神奇的是什麼都不用作也會自動在Windows產生捷徑 可以看到我安裝的東西都會自動產生這樣的捷徑 這樣就可以直接在windows中啟動了不需要開啟wslg 注意要點 因為WSL畢竟還是一種VM(尤其是WSL2)所以雖然可以直接執行Linux GUI apps, 但是Windows的非英文輸入法是沒辦法直接輸入到Linux GUI apps裡面,所以才會需要安裝fcitx及其相關的輸入方式,例如chewing之類的 中文輸入法 1234567# /etc/profile 內加入以下# Add Chinese Input Supportexport GTK_IM_MODULE=fcitxexport XMODIFIERS=@im=fcitxexport QT_IM_MODULE=fcitxexport DefaultIMModule=fcitxfcitx-autostart &amp;&gt;/dev/null 然後在powershell中wsl --shutdown把wsl關了後再wsl打開 記得設定global hot key以便啟動(因為我們沒裝DE所以沒辦法滑鼠點切換輸入法) 緩慢的I/O 本來想說I/O的部份會很有改善,不過我實際測試在Windows下的folder進行git clone, git push, 還有hexo g -d之類常用的指令就可以明顯的看到這個I/O不行呀… 結論 雖然說WSL1.0支援systemd而且GUI app不需要wslg就可以正常的使用是很香,但是可以看到還是有些需要打磨的地方, 例如中文輸入法有時候還是會發春, I/O還是慢…etc 不過作為輕度使用(甚至中度使用)都還算是順手","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"WSL","slug":"Linux/WSL","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/WSL/"},{"name":"ManjaroWSL","slug":"Linux/WSL/ManjaroWSL","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/WSL/ManjaroWSL/"}],"tags":[{"name":"Linunx","slug":"Linunx","permalink":"http://kiwi0093.github.io/wiki/tags/Linunx/"},{"name":"Windows","slug":"Windows","permalink":"http://kiwi0093.github.io/wiki/tags/Windows/"}]},{"title":"NeoVim + NvChad - Install & Configure","slug":"Misc/Vim/NeoVim + NvChad/1-Basic Install & Configure","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Misc/Vim/NeoVim + NvChad/1-Basic Install & Configure/","permalink":"http://kiwi0093.github.io/wiki/wiki/Misc/Vim/NeoVim%20+%20NvChad/1-Basic%20Install%20&%20Configure/","excerpt":"前言 現在我都把Editor改成NeoVim,並且加裝NvChad來美化","text":"前言 現在我都把Editor改成NeoVim,並且加裝NvChad來美化 Install NeoVim 在很多Distrubution上都可以直接安裝 參考網址 Home - Neovim GitHub - neovim/neovim: Vim-fork focused on extensibility and usability 安裝方法 12345678# Arch/Manjarosudo pacman -S neovim# Debian/Ubuntu/Linuxmintsudo apt install neovim# Fedorasudo yum install neovim 基本上設定檔都在~/.config/nvim裡面 NvChad 這個基本上就是一個已經被調整好的neovim設定,全部以lua寫的標準功能集成品 簡單的說就是沒有特別安裝其他的東西單純的用lua把原先neovim的內容就可以弄成這樣要是自己想從頭弄自己的版本也是可以參考NvChad的內容自己改 參考網址 Home - NvChad GitHub - NvChad/NvChad 安裝方法 1git clone https://github.com/NvChad/NvChad ~/.config/nvim --depth=1 這會把這個設定檔專案clone到使用者home的.config/nvim然後nvim就可以直接套用了 基本上裝好後,初次啟動nvim後會trigger一部分的plugin的安裝界面 COnfigure 基本上只要去改~/.config/nvim/lua/custom/內的東西就好了,因為基礎版本本身就已經很ok了 因為custom目錄在.gitignoe內所以是可以fork原專案並且把改好的custom目錄從自己的repo下載這樣可以容易同步所有的client Fork &amp; Own Repo for custom &lt;施工中,待做完後update&gt; Manual Customize 基本上我只會增加folder的設定,這樣就很夠用了其他的就得先學會lua的語法 ~/.config/nvim/lua/custom/chadrc.lua 所有的客製化設定基本上都在這個檔內,並且邏輯是採據custom內的檔案優先形式進行,所以會有以下兩種 全部替代 在custom下放置init.lua 這個作法會清除所有NvChad的設定改套用custom/init.lua的設定來進行 部份代替 在custom下放置chadrc.lua這個會指定哪些檔案需要被哪個位置的lua替代或增加 但是格式要跟core/defualt_config.lua的格式一樣 12345678910111213141516171819202122-- Chadrc overrides this filelocal M = &#123;&#125;M.ui = &#123; -- hl = highlights hl_add = &#123;&#125;, hl_override = &#123;&#125;, changed_themes = &#123;&#125;, theme_toggle = &#123; &quot;onedark&quot;, &quot;one_light&quot; &#125;, theme = &quot;onedark&quot;, -- default theme transparency = false,&#125;--M.plugins = require &quot;custom.plugins&quot;-- check core.mappings for table structureM.mappings = require &quot;custom.mappings&quot;M.folder = require &quot;custom.folder&quot;return M 像上面的範例中我就把mappings改成我自己的版本然後在加上folder這個設定把vim foldering的功能放進去 另外提一下要在裡面加東西的話 M.XXX = require &quot;custom.XXX&quot; 這個的意思是指定去讀在custom/XXX.lua檔案的意思，所以要記得在對應的位置裡面要有對應的檔案 還有他是override對應的相關設定所以建議是copy core/XXX來修改會比直接寫新的好 修改實例 實際的chadrc.lua 12345---@type ChadrcConfiglocal M = &#123;&#125;M.ui = &#123;theme = &#x27;onedark&#x27;&#125;M.folder = require &quot;custom.folder&quot;return M folder.lua 12345678vim.cmd(&#x27;syntax on&#x27;)vim.cmd(&#x27;set foldmarker=&#123;&#123;&#123;,&#125;&#125;&#125;&#x27;)vim.cmd(&#x27;set foldmethod=marker&#x27;)vim.cmd(&#x27;set foldlevel=0&#x27;)vim.cmd(&#x27;let php_folding = 1&#x27;)vim.cmd(&#x27;set foldnestmax=3&#x27;) 基本上lua可以用vim.cmd()的方法把原來的vimrc內的設定檔拿來沿用","categories":[{"name":"Misc","slug":"Misc","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/"},{"name":"Vim","slug":"Misc/Vim","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Vim/"},{"name":"NeoVim + NvChad","slug":"Misc/Vim/NeoVim-NvChad","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Vim/NeoVim-NvChad/"}],"tags":[{"name":"Editor","slug":"Editor","permalink":"http://kiwi0093.github.io/wiki/tags/Editor/"},{"name":"Unix","slug":"Unix","permalink":"http://kiwi0093.github.io/wiki/tags/Unix/"}]},{"title":"NeoVim + NvChad - Hotkeys","slug":"Misc/Vim/NeoVim + NvChad/2-Hotkeys","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Misc/Vim/NeoVim + NvChad/2-Hotkeys/","permalink":"http://kiwi0093.github.io/wiki/wiki/Misc/Vim/NeoVim%20+%20NvChad/2-Hotkeys/","excerpt":"前言 NeoVim, NvChad都有許多快捷鍵可以使用,所以需要一個cheat sheet來協助記憶","text":"前言 NeoVim, NvChad都有許多快捷鍵可以使用,所以需要一個cheat sheet來協助記憶 Key Mapping 先說好,這個Key Mapping是可以自己修改的,如果不喜歡預設的,可以自己定義 預設Key Mapping 界面中常用 Key Mapping Function Remark 前導鍵,類似Windows很常用Ctl+XX的Ctl 預設是空白鍵, 按下去後會有提示可以參考 + ch 叫出cheat sheet,官方內建的Hotkey參考 + th Theme選擇界面,可以選你喜歡的主題 + fa 搜尋檔案,不是搜尋文件內的字串 + b 開新的buffer(分頁) 這個功能不太常用除非很常開空白的新檔案 + x 關閉正在使用的Buffer(分頁) 這個很好用,用:q!的話會直接關閉整個NeoVim(沒有Tree的時候) 切換正在使用中的Buffer(分頁) NVimTree相關 Key Mapping Function Remark + n 開啟/關閉左側的Tree + e 打開(若沒開的話)並聚焦在左側的Tree :cd 將Tree的目錄切換到 這個基本上算是指令不算HotKey","categories":[{"name":"Misc","slug":"Misc","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/"},{"name":"Vim","slug":"Misc/Vim","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Vim/"},{"name":"NeoVim + NvChad","slug":"Misc/Vim/NeoVim-NvChad","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Vim/NeoVim-NvChad/"}],"tags":[{"name":"Editor","slug":"Editor","permalink":"http://kiwi0093.github.io/wiki/tags/Editor/"},{"name":"Unix","slug":"Unix","permalink":"http://kiwi0093.github.io/wiki/tags/Unix/"}]},{"title":"Fcitx","slug":"Misc/Input Method/Fcitx","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Misc/Input Method/Fcitx/","permalink":"http://kiwi0093.github.io/wiki/wiki/Misc/Input%20Method/Fcitx/","excerpt":"前言 簡述一下中/日文輸入法設定","text":"前言 簡述一下中/日文輸入法設定 Basic Installation Arch Base 1234567# 中文字型pacman -S noto-fonts-cjk# Fcitx4 familypacman -S fcitx fcitx-mozc fcitx-chewing fcitx-configtool fcitx-qt5 fcitx-qt6# Fcitx5 familypacman -S fcitx5 fcitx5-mozc fcitx5-chewing fcitx5-configtool fcitx5-qt fcitx5-gtk Setup Fcitx4 12345/etc/environment-------------------------------------------------------------------------GTK_IM_MODULE=fcitxQT_IM_MODULE=fcitxXMODIFIERS=@im=fcitx 基本上XDG會自動啟動 若不會(例如WSL) 那就改成 12345678/etc/profile-------------------------------------------------------------------------# Add Chinese Input Supportexport GTK_IM_MODULE=fcitxexport XMODIFIERS=@im=fcitxexport QT_IM_MODULE=fcitxexport DefaultIMModule=fcitxfcitx-autostart &amp;&gt;/dev/null 也可以 Fcitx5 安装 fcitx5-input-support (AUR - manjaro-asian-input-support) 或者编辑/etc/environment 1234567/etc/environment-------------------------------------------------------------------------GTK_IM_MODULE=fcitxQT_IM_MODULE=fcitxXMODIFIERS=@im=fcitxSDL_IM_MODULE=fcitxGLFW_IM_MODULE=ibus 然後re-login就好了 結論 現在有fcitx5-input-support的前提下,除了WSL以外會建議直接上Fcitx5,比較簡單","categories":[{"name":"Misc","slug":"Misc","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/"},{"name":"Input Method","slug":"Misc/Input-Method","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Input-Method/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Manjaro","slug":"Manjaro","permalink":"http://kiwi0093.github.io/wiki/tags/Manjaro/"},{"name":"Arch","slug":"Arch","permalink":"http://kiwi0093.github.io/wiki/tags/Arch/"},{"name":"PhotonOS","slug":"PhotonOS","permalink":"http://kiwi0093.github.io/wiki/tags/PhotonOS/"}]},{"title":"Marktext & Picgo for Blog/Wiki edit","slug":"Misc/Markdown/2-Marktext&picgo","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Misc/Markdown/2-Marktext&picgo/","permalink":"http://kiwi0093.github.io/wiki/wiki/Misc/Markdown/2-Marktext&picgo/","excerpt":"前言 自從Typora開始變成收費軟體後,我就改用Open Source的Marktext,另外雖然一開始Marktext的Image Uplader預設有Github,不過它一直宣稱後面的版本要拿掉,所以還是搭配picgo來使用好了…","text":"前言 自從Typora開始變成收費軟體後,我就改用Open Source的Marktext,另外雖然一開始Marktext的Image Uplader預設有Github,不過它一直宣稱後面的版本要拿掉,所以還是搭配picgo來使用好了… Marktext 個人常用功能 功能敘述 快捷鍵 對應語法 效果 Remark 插入圖片 Ctr+shift+i ![說明文字](圖片連結) 會產生一個框框讓你輸入要插入的圖片相關資訊，插入後若有設定image uploader會自動進行 Code Fence Ctr+shift+k ```語法``` 會產生code fence的框框,雖然我還是很常直接打```來開啟不過有框框的作法可能比較漂亮 插入數學式 Ctr+shift+ $$ 這個其實我沒有很常用 Picgo Installation 對應Marktext需求，需要安裝的是PicGo-Core Manjaro 因為我現在的Desktop都是用Manjaro, 所以特別說一下,不要安裝一般網頁查到的 1yay -S picgo-appimage 這個是GUI版的，雖然也可以上傳圖片，但是Marktext對應抓不到…所以要用npm安裝 全局安裝 1sudo npm install picgo -g 要用sudo是因為我測試過不用root權限會安裝失敗 設定 1picgo set uploader 然後選Github(用其他圖床的話就選其他的) 然後填入相關的參數例如repo/token/path 就會自動產生設定檔，設定好後務必要執行以下 1picgo use uploader 這樣才會套用 設定Marktext內的Plug-in 只要選picgo, 沒有其他提示的錯誤訊息就是好了…","categories":[{"name":"Misc","slug":"Misc","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/"},{"name":"Markdown","slug":"Misc/Markdown","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Markdown/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://kiwi0093.github.io/wiki/tags/Markdown/"}]},{"title":"Markdown語法","slug":"Misc/Markdown/1-Markdown&Hexo","date":"2024-03-21T02:36:21.136Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Misc/Markdown/1-Markdown&Hexo/","permalink":"http://kiwi0093.github.io/wiki/wiki/Misc/Markdown/1-Markdown&Hexo/","excerpt":"前言 很久以前當我剛開始寫Blog的時候,曾經把我常用的語法整理過一遍(找不到了),但是最近看到一些騷操作就想拿出來獨立整理一篇","text":"前言 很久以前當我剛開始寫Blog的時候,曾經把我常用的語法整理過一遍(找不到了),但是最近看到一些騷操作就想拿出來獨立整理一篇 基本使用 基本使用的部分基本上Typora都有對應的選項或是快速鍵可以使用,所以就大概記一下就好了 #標題文字 基本上就是 # H1 標題 ## H2 標題 ### H3 標題 #### H4 標題 ##### H5 標題 ###### H6 標題 從H1~H6共有六種尺寸,算是使用Markdown語法時最常用的 分隔線 123---***+++ 效果 連結 1[標題](http網址) 效果 Kiwi’s Wiki 文字效果 語法1 語法2 效果 *斜體* _斜體_ 斜體 *粗體* _粗體_ 粗體 *粗斜體* _粗斜體_ 粗斜體 ~刪除~ 刪除 清單 無序清單 語法 123* 第一項* 第二項* 第三項 效果 第一項 第二項 第三項 * &amp; - &amp; + 都是一樣的 有序清單 語法 1231. 第一項2. 第二項3. 第三項 效果 第一項 第二項 第三項 順序顛倒也沒關係會自動排序 圖片或是影音連結 語法 1234#一般圖片連結![Alt text](/path/to/img.jpg)#youtube連結[![Dr.Berg的斷食說明](http://img.youtube.com/vi/SlzBMJvtGHo/0.jpg)](https://www.youtube.com/watch?v=SlzBMJvtGHo &quot;斷食體內變化&quot;) 效果(如youtube範例) 進階使用 基本上就是利用HTML的語法直接使用,markdown可以直接使用html語法,在&lt;&gt;&lt;&gt;tag中的東西不會被變成Markdown HTML 語法盡量包在 Markdown 語法裡面 文字效果 底線 語法 效果 &lt;u&gt;底線&lt;/u&gt; 底線 &lt;del&gt;刪除&lt;/del&gt; 刪除 字體顏色 語法 顯示結果 語法 顯示結果 &lt;font color=#800000&gt;酒紅色&lt;/font&gt; 酒紅色 &lt;font color=#FF0000&gt;紅色&lt;/font&gt; 紅色 &lt;font color=#FF6600&gt;橘色&lt;/font&gt; 橘色 &lt;font color=#FFD700&gt;金色&lt;/font&gt; 金色 &lt;font color=#FFFF00&gt;黃色&lt;/font&gt; 黃色 &lt;font color=#00FF00&gt;綠色&lt;/font&gt; 綠色 &lt;font color=#008000&gt;墨綠色&lt;/font&gt; 墨綠色 &lt;font color=#00FFFF&gt;青色&lt;/font&gt; 青色 &lt;font color=#0000FF&gt;深藍色&lt;/font&gt; 深藍色 &lt;font color=#FF00FF&gt;粉紅色&lt;/font&gt; 粉紅色 &lt;font color=#800080&gt;紫色&lt;/font&gt; 紫色 &lt;font color=#808080&gt;灰色&lt;/font&gt; 灰色 上下標 語法 效果 3&lt;sup&gt;2&lt;/sup&gt;=9 32=9 H&lt;sub&gt;2&lt;/sub&gt;O H2O 特殊符號 語法 效果 商標&amp;reg; 商標® &amp;fnof;(X)=X+1 ƒ(X)=X+1 &amp;radic;2 √2 45&amp;deg; 45° 注音 語法 1234&lt;ruby&gt;注&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;ㄓㄨˋ&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;音&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;ㄧㄣˉ&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 效果 注(ㄓㄨˋ) 音(ㄧㄣˉ) 應用方法 1我很喜歡&lt;ruby&gt;&lt;font color=blue&gt;&lt;del&gt;我家的艦隊&lt;/del&gt;&lt;/font&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;&lt;font color=red&gt;VMware Esxi&lt;/font&gt;&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 我很喜歡我家的艦隊(VMware Esxi) * 這種用法的時候在&lt;&gt;&lt;/&gt;內的區塊就全部用Html語法才不會有問題 參考文獻 西灣筆記 馬力歐的部落格","categories":[{"name":"Misc","slug":"Misc","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/"},{"name":"Markdown","slug":"Misc/Markdown","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Markdown/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://kiwi0093.github.io/wiki/tags/Markdown/"}]},{"title":"Pathfinder:WoTR - MythicSkeletonCompanion Modify","slug":"Game/PC/Pathfinder WoTR/3-Companion_modify","date":"2021-11-04T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Game/PC/Pathfinder WoTR/3-Companion_modify/","permalink":"http://kiwi0093.github.io/wiki/wiki/Game/PC/Pathfinder%20WoTR/3-Companion_modify/","excerpt":"前言 其實把跟班改好改滿後根本不用帶同伴一起冒險了,因為你這樣就等於有一個五人小隊了…","text":"前言 其實把跟班改好改滿後根本不用帶同伴一起冒險了,因為你這樣就等於有一個五人小隊了… 基本流程 因為還沒測試過直接用新創角色來創造跟班的作法,所以第一版會建議除了第一個MythicSkeletonCompanion以外（因為這個會自動生成）後面的三個都用傭兵來改會比較簡單 建議的作法 用ToyBox添加MythicSkeletonCompanion的Feat(任意那一個都可以) 重新創個你喜歡的跟班角色與肖像 修改save檔把你喜歡的跟班角色的外型section, 肖像貼到你Feat對應的跟班Section內 建立三個額外的傭兵 添加其他三個MythicSkeletonCompanion feat 修改Save檔把對應傭兵的UniqueId對應到Feat, m_pet並且在master的定義中加上這三個的UniqueId * 最新確認只需要定義Master跟Pet關係就可以了 對應資料 對應Feat UUID 種類 UUID Archer 0cebe3b375b6397438909ac9752d9792 Dual Wielder d4583662450245446ae3a56e07232e6f Tank 048456cce79943f4c9c9eec1aa5ce9a0 Two-Handed d4583662450245446ae3a56e07232e6 修改第一個MythicSkeletonCompanion外型與肖像 添加外型定義 1234567891011121314151617181920212223242526#在m_part內加上&#123; &quot;$id&quot;: &quot;6&quot;, &quot;$type&quot;: &quot;Kingmaker.UnitLogic.Parts.UnitPartDollData, Assembly-CSharp&quot;, &quot;Default&quot;: &#123; &quot;$id&quot;: &quot;7&quot;, &quot;EquipmentEntityIds&quot;: [ &quot;7368eafa3f5ee9d4bb9739b80faefdc3&quot;, &quot;9ab83dd3a06ba6a4e97900bd6ffc4aab&quot;, &quot;7c55ae7f07c9d4741b4837bd305d3ec0&quot;, &quot;b8b615fabc0f7af448fb68f009113c61&quot;, &quot;8a008a34d7462524c9b96132a28bb606&quot; ], &quot;EntityRampIdices&quot;: &#123; &quot;7c55ae7f07c9d4741b4837bd305d3ec0&quot;: 15, &quot;861171cdd3930a84faab08ab85ba924a&quot;: 8, &quot;7368eafa3f5ee9d4bb9739b80faefdc3&quot;: 8, &quot;9ab83dd3a06ba6a4e97900bd6ffc4aab&quot;: 15 &#125;, &quot;EntitySecondaryRampIdices&quot;: &#123;&#125;, &quot;Gender&quot;: &quot;Female&quot;, &quot;RacePreset&quot;: &quot;ee326fab8804493499ce07c5cd8759e2&quot;, &quot;ClothesPrimaryIndex&quot;: 9, &quot;ClothesSecondaryIndex&quot;: 9 &#125;&#125; 變更肖像 12345678910111213&quot;Descriptor&quot;: &#123; ... &quot;UISettings&quot;: &#123; &quot;$id&quot;: &quot;2694&quot;, &quot;m_AlreadyAutomaticallyAdded&quot;: [], &quot;m_CustomPortrait&quot;: &#123; &quot;$id&quot;: &quot;2695&quot;, &quot;m_CustomPortraitId&quot;: &quot;B28894B2200AAE6300A928653E91CD2B&quot; &#125;, &quot;m_Slots&quot;: &#123;&#125; &#125;, ...&#125;, 將傭兵轉變成其他三個MythicSkeletonCompanion的方法 Feat資料格式(用不到了) 1234567891011121314151617181920212223&#123; &quot;$id&quot;: &quot;109&quot;, &quot;$type&quot;: &quot;Kingmaker.UnitLogic.Feature, Assembly-CSharp&quot;, &quot;m_Context&quot;: &#123; &quot;AssociatedBlueprint&quot;: &quot;048456cce79943f4c9c9eec1aa5ce9a0&quot;, &quot;m_OwnerRef&quot;: &quot;e51cd2f4-f8e6-4956-93a7-86281cd5e92a&quot;, &quot;m_Params&quot;: null &#125;, &quot;Blueprint&quot;: &quot;048456cce79943f4c9c9eec1aa5ce9a0&quot;, &quot;UniqueId&quot;: &quot;e731dd8b-31cc-4114-9dd5-650a8672ddf0&quot;, &quot;AttachTime&quot;: &quot;12:00:47.3910000&quot;, &quot;IsActive&quot;: true, &quot;Components&quot;: &#123; &quot;$AddPet$858ef2c0-f8cf-41f4-af45-0bb06f90fa00&quot;: &#123; &quot;$type&quot;: &quot;Kingmaker.EntitySystem.EntityFactComponentDelegate`2+ComponentRuntime[[Kingmaker.EntitySystem.Entities.UnitEntityData, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null],[Kingmaker.UnitLogic.FactLogic.AddPetData, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]], Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&quot;, &quot;m_Data&quot;: &#123; &quot;$id&quot;: &quot;110&quot;, &quot;SpawnedPetRef&quot;: &quot;b27cd89c-a8b0-4a1c-a5f0-379c5e5fd9c3&quot;, &quot;Disabled&quot;: false &#125; &#125; &#125; &#125;, 基本上只要你添加了該Feat後就可以在Save檔內Search對應的UUID就可以找到對應的Section(長的像上面的段落的只有一個) 然後把你的傭兵（或是對應角色的UUID)貼在&quot;SpawnedPetRef&quot;的後面(第二個被添加的Feat這項的值會是null) Part 要變成跟班的Part Section 123456789#在m_part內加上&#123; &quot;$id&quot;: &quot;2459&quot;, &quot;$type&quot;: &quot;Kingmaker.UnitLogic.Parts.UnitPartPet, Assembly-CSharp&quot;, &quot;m_MasterRef&quot;: &#123; &quot;m_Ref&quot;: &quot;e51cd2f4-f8e6-4956-93a7-86281cd5e92a&quot; &#125;, &quot;Type&quot;: &quot;MythicSkeletalChampion&quot; &#125;, m_MasterRef下的m_Ref定義要確認UUID是主人(feat擁有者)的UUID 該主人的Part Section 1234567891011121314151617181920#在m_part內加上&#123; &quot;$id&quot;: &quot;10&quot;, &quot;$type&quot;: &quot;Kingmaker.UnitLogic.Parts.UnitPartPetMaster, Assembly-CSharp&quot;, &quot;m_Pets&quot;: [ &#123; &quot;m_Ref&quot;: &quot;b27cd89c-a8b0-4a1c-a5f0-379c5e5fd9c3&quot; &#125;, &#123; &quot;m_Ref&quot;: &quot;46694232-fba8-4a18-8daa-1a1c933290e2&quot; &#125;, &#123; &quot;m_Ref&quot;: &quot;14547546-c716-4e63-9a5c-d8126e9c01f6&quot; &#125;, &#123; &quot;m_Ref&quot;: &quot;2577f7e3-a782-439d-90df-eaa70a440af4&quot; &#125; ], &quot;m_ExPets&quot;: []&#125; 像上面範例一樣加上m_Ref的定義就會把跟班定義到裡面","categories":[{"name":"Game","slug":"Game","permalink":"http://kiwi0093.github.io/wiki/categories/Game/"},{"name":"PC","slug":"Game/PC","permalink":"http://kiwi0093.github.io/wiki/categories/Game/PC/"},{"name":"Pathfinder WoTR","slug":"Game/PC/Pathfinder-WoTR","permalink":"http://kiwi0093.github.io/wiki/categories/Game/PC/Pathfinder-WoTR/"}],"tags":[{"name":"Game","slug":"Game","permalink":"http://kiwi0093.github.io/wiki/tags/Game/"},{"name":"PC-Game","slug":"PC-Game","permalink":"http://kiwi0093.github.io/wiki/tags/PC-Game/"},{"name":"RPG","slug":"RPG","permalink":"http://kiwi0093.github.io/wiki/tags/RPG/"}]},{"title":"Pathfinder:WoTR - Party.json","slug":"Game/PC/Pathfinder WoTR/2-Party.json","date":"2021-11-03T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Game/PC/Pathfinder WoTR/2-Party.json/","permalink":"http://kiwi0093.github.io/wiki/wiki/Game/PC/Pathfinder%20WoTR/2-Party.json/","excerpt":"前言 其實Save檔裡面就定義了你的角色外型,技能,Feat, Ability,Inventory等資料,若是不喜歡用Mod或是其他工具修改的人可以手工修改,不過建議盡量不要玩到遊戲忠厚其後才修改(除非有必要)不然檔案會很大很難改","text":"前言 其實Save檔裡面就定義了你的角色外型,技能,Feat, Ability,Inventory等資料,若是不喜歡用Mod或是其他工具修改的人可以手工修改,不過建議盡量不要玩到遊戲忠厚其後才修改(除非有必要)不然檔案會很大很難改 Party.json sample 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262&#123; &quot;SceneName&quot;: &quot;&lt;cross-scene&gt;&quot;, &quot;HasEntityData&quot;: false, &quot;m_EntityData&quot;: [ &#123; &quot;$id&quot;: &quot;1&quot;, &quot;$type&quot;: &quot;Kingmaker.EntitySystem.Entities.UnitEntityData, Assembly-CSharp&quot;, &quot;m_GroupId&quot;: &quot;&lt;directly-controllable-unit&gt;&quot;, &quot;Position&quot;: &quot;-6788|4068|603&quot;, &quot;m_Orientation&quot;: 251.672562, &quot;Sleepless&quot;: 0, &quot;Parts&quot;: &#123; &quot;$id&quot;: &quot;2&quot;, &quot;m_Parts&quot;: [ &#123;&#125;, &#123; &quot;$id&quot;: &quot;4&quot;, &quot;$type&quot;: &quot;Kingmaker.UnitLogic.Parts.UnitPartCompanion, Assembly-CSharp&quot;, &quot;m_Spawner&quot;: null, &quot;m_HealOnExit&quot;: false, &quot;State&quot;: &quot;InParty&quot;, &quot;LastCampingRole&quot;: &quot;Alchemist&quot; &#125;, &#123;&#125;, &#123; &quot;$id&quot;: &quot;6&quot;, &quot;$type&quot;: &quot;Kingmaker.UnitLogic.Parts.UnitPartDollData, Assembly-CSharp&quot;, &quot;Default&quot;: &#123; &quot;$id&quot;: &quot;7&quot;, &quot;EquipmentEntityIds&quot;: [ &quot;7368eafa3f5ee9d4bb9739b80faefdc3&quot;, &quot;9ab83dd3a06ba6a4e97900bd6ffc4aab&quot;, &quot;7c55ae7f07c9d4741b4837bd305d3ec0&quot;, &quot;b8b615fabc0f7af448fb68f009113c61&quot;, &quot;8a008a34d7462524c9b96132a28bb606&quot; ], &quot;EntityRampIdices&quot;: &#123; &quot;7c55ae7f07c9d4741b4837bd305d3ec0&quot;: 15, &quot;861171cdd3930a84faab08ab85ba924a&quot;: 8, &quot;7368eafa3f5ee9d4bb9739b80faefdc3&quot;: 8, &quot;9ab83dd3a06ba6a4e97900bd6ffc4aab&quot;: 15 &#125;, &quot;EntitySecondaryRampIdices&quot;: &#123;&#125;, &quot;Gender&quot;: &quot;Female&quot;, &quot;RacePreset&quot;: &quot;ee326fab8804493499ce07c5cd8759e2&quot;, &quot;ClothesPrimaryIndex&quot;: 9, &quot;ClothesSecondaryIndex&quot;: 9 &#125; &#125;, &#123;&#125;, &#123;&#125;, &#123; &quot;$id&quot;: &quot;10&quot;, &quot;$type&quot;: &quot;Kingmaker.UnitLogic.Parts.UnitPartPetMaster, Assembly-CSharp&quot;, &quot;m_Pets&quot;: [ &#123; &quot;m_Ref&quot;: &quot;b27cd89c-a8b0-4a1c-a5f0-379c5e5fd9c3&quot; &#125;, &#123; &quot;m_Ref&quot;: &quot;46694232-fba8-4a18-8daa-1a1c933290e2&quot; &#125;, &#123; &quot;m_Ref&quot;: &quot;14547546-c716-4e63-9a5c-d8126e9c01f6&quot; &#125;, &#123; &quot;m_Ref&quot;: &quot;2577f7e3-a782-439d-90df-eaa70a440af4&quot; &#125; ], &quot;m_ExPets&quot;: [] &#125;, &#123;&#125;, &#123;&#125;, &#123;&#125; ] &#125;, &quot;Facts&quot;: &#123;&#125;, &quot;m_IsRevealed&quot;: true, &quot;Stealth&quot;: &#123;&#125;, &quot;SpawnPosition&quot;: &quot;0|0|0&quot;, &quot;LastMoveTime&quot;: &quot;2.12:30:27.8830000&quot;, &quot;Descriptor&quot;: &#123; &quot;$id&quot;: &quot;2065&quot;, &quot;m_Inventory&quot;: &#123;&#125;, &quot;m_Spellbooks&quot;: [], &quot;Faction&quot;: &quot;72f240260881111468db610b6c37c099&quot;, &quot;Stats&quot;: &#123; &quot;$id&quot;: &quot;2309&quot;, &quot;Strength&quot;: &#123;&#125;, &quot;Dexterity&quot;: &#123;&#125;, &quot;Constitution&quot;: &#123;&#125;, &quot;Intelligence&quot;: &#123;&#125;, &quot;Wisdom&quot;: &#123;&#125;, &quot;Charisma&quot;: &#123;&#125;, &quot;HitPoints&quot;: &#123;&#125;, &quot;TemporaryHitPoints&quot;: &#123;&#125;, &quot;AC&quot;: &#123;&#125;, &quot;AdditionalAttackBonus&quot;: &#123;&#125;, &quot;AdditionalDamage&quot;: &#123;&#125;, &quot;BaseAttackBonus&quot;: &#123;&#125;, &quot;AttackOfOpportunityCount&quot;: &#123;&#125;, &quot;AdditionalCMB&quot;: &#123;&#125;, &quot;AdditionalCMD&quot;: &#123;&#125;, &quot;Initiative&quot;: &#123;&#125;, &quot;Speed&quot;: &#123;&#125;, &quot;SaveFortitude&quot;: &#123;&#125;, &quot;SaveReflex&quot;: &#123;&#125;, &quot;SaveWill&quot;: &#123;&#125;, &quot;SkillMobility&quot;: &#123;&#125;, &quot;SkillAthletics&quot;: &#123;&#125;, &quot;SkillPerception&quot;: &#123;&#125;, &quot;SkillThievery&quot;: &#123;&#125;, &quot;SkillPersuasion&quot;: &#123;&#125;, &quot;SkillStealth&quot;: &#123;&#125;, &quot;SkillUseMagicDevice&quot;: &#123;&#125;, &quot;SkillKnowledgeArcana&quot;: &#123;&#125;, &quot;SkillKnowledgeWorld&quot;: &#123;&#125;, &quot;SkillLoreNature&quot;: &#123;&#125;, &quot;SkillLoreReligion&quot;: &#123;&#125;, &quot;CheckBluff&quot;: &#123;&#125;, &quot;CheckDiplomacy&quot;: &#123;&#125;, &quot;CheckIntimidate&quot;: &#123;&#125;, &quot;SneakAttack&quot;: &#123;&#125;, &quot;DamageNonLethal&quot;: &#123;&#125;, &quot;Reach&quot;: &#123;&#125; &#125;, &quot;AttackFactions&quot;: &#123;&#125;, &quot;Resources&quot;: &#123;&#125;, &quot;Progression&quot;: &#123;&#125;, &quot;UISettings&quot;: &#123; &quot;$id&quot;: &quot;2400&quot;, &quot;m_AlreadyAutomaticallyAdded&quot;: [], &quot;m_CustomPortrait&quot;: &#123; &quot;$id&quot;: &quot;2401&quot;, &quot;m_CustomPortraitId&quot;: &quot;4BE5DB6815BD1B86F14B4B687F1BA1FF&quot; &#125;, &quot;m_Slots&quot;: &#123;&#125; &#125;, &quot;State&quot;: &#123;&#125;, &quot;Proficiencies&quot;: &#123;&#125;, &quot;Alignment&quot;: &#123;&#125;, &quot;CustomGender&quot;: &quot;Female&quot;, &quot;LeftHandedOverride&quot;: true, &quot;CustomName&quot;: &quot;Kiwi Von Hohenzollen&quot;, &quot;CustomAsks&quot;: &quot;e7b22776ba8e2b84eaaff98e439639a7&quot;, &quot;ForcceUseClassEquipment&quot;: true, &quot;BirthDay&quot;: 23, &quot;BirthMonth&quot;: 10, &quot;m_IsEssentialForGame&quot;: 1, &quot;Body&quot;: &#123;&#125;, &quot;Brain&quot;: &#123;&#125;, &quot;OriginalBlueprint&quot;: &quot;4391e8b9afbb0cf43aeba700c089f56d&quot;, &quot;Blueprint&quot;: &quot;4391e8b9afbb0cf43aeba700c089f56d&quot;, &quot;MainFact&quot;: &#123;&#125;, &quot;Encumbrance&quot;: &quot;Light&quot;, &quot;HasOwnInventory&quot;: false, &quot;LastRestTime&quot;: &quot;2.07:02:52.1970000&quot; &#125;, &quot;PreviousPosition&quot;: &quot;-6788|4068|603&quot;, &quot;DesiredOrientation&quot;: 251.672562, &quot;TimeToNextRoundTick&quot;: 2.977339, &quot;LootViewed&quot;: false, &quot;UniqueId&quot;: &quot;e51cd2f4-f8e6-4956-93a7-86281cd5e92a&quot; &#125;, &#123; &quot;$id&quot;: &quot;2457&quot;, &quot;$type&quot;: &quot;Kingmaker.EntitySystem.Entities.UnitEntityData, Assembly-CSharp&quot;, &quot;m_GroupId&quot;: &quot;&lt;directly-controllable-unit&gt;&quot;, &quot;Position&quot;: &quot;-7137|4068|442&quot;, &quot;m_Orientation&quot;: 270.454346, &quot;Sleepless&quot;: 0, &quot;Parts&quot;: &#123; &quot;$id&quot;: &quot;2458&quot;, &quot;m_Parts&quot;: [ &#123; &quot;$id&quot;: &quot;2459&quot;, &quot;$type&quot;: &quot;Kingmaker.UnitLogic.Parts.UnitPartPet, Assembly-CSharp&quot;, &quot;m_MasterRef&quot;: &#123; &quot;m_Ref&quot;: &quot;e51cd2f4-f8e6-4956-93a7-86281cd5e92a&quot; &#125;, &quot;Type&quot;: &quot;MythicSkeletalChampion&quot; &#125;, &#123;&#125;, &#123; &quot;$id&quot;: &quot;2461&quot;, &quot;$type&quot;: &quot;Kingmaker.UnitLogic.Parts.UnitPartDollData, Assembly-CSharp&quot;, &quot;Default&quot;: &#123; &quot;$id&quot;: &quot;2462&quot;, &quot;EquipmentEntityIds&quot;: [ &quot;971d4ec9ff97af447b415c8eb4c5b0b5&quot;, &quot;6831469a4e2bc664f9622bdfbf5ed30c&quot;, &quot;3fa56cc5d206ca142bde8f93ad089a02&quot;, &quot;b8b615fabc0f7af448fb68f009113c61&quot;, &quot;8a008a34d7462524c9b96132a28bb606&quot; ], &quot;EntityRampIdices&quot;: &#123; &quot;3fa56cc5d206ca142bde8f93ad089a02&quot;: 11, &quot;bb6988a21733fad4296ad22537248fea&quot;: 8, &quot;971d4ec9ff97af447b415c8eb4c5b0b5&quot;: 8, &quot;6831469a4e2bc664f9622bdfbf5ed30c&quot;: 11 &#125;, &quot;EntitySecondaryRampIdices&quot;: &#123;&#125;, &quot;Gender&quot;: &quot;Female&quot;, &quot;RacePreset&quot;: &quot;e03b9c63971878743b8f53bdf14673ee&quot;, &quot;ClothesPrimaryIndex&quot;: 54, &quot;ClothesSecondaryIndex&quot;: 12 &#125; &#125;, &#123;&#125; ] &#125;, &quot;Facts&quot;: &#123;&#125;, &quot;m_IsRevealed&quot;: true, &quot;Stealth&quot;: &#123;&#125;, &quot;SpawnPosition&quot;: &quot;0|0|0&quot;, &quot;LastMoveTime&quot;: &quot;2.12:30:38.7740000&quot;, &quot;Descriptor&quot;: &#123; &quot;$id&quot;: &quot;2631&quot;, &quot;m_Inventory&quot;: &#123;&#125;, &quot;m_Damage&quot;: 291, &quot;m_Spellbooks&quot;: [], &quot;Faction&quot;: &quot;72f240260881111468db610b6c37c099&quot;, &quot;Stats&quot;: &#123;&#125;, &quot;AttackFactions&quot;: &#123;&#125;, &quot;Resources&quot;: &#123;&#125;, &quot;Progression&quot;: &#123;&#125;, &quot;UISettings&quot;: &#123; &quot;$id&quot;: &quot;2694&quot;, &quot;m_AlreadyAutomaticallyAdded&quot;: [], &quot;m_CustomPortrait&quot;: &#123; &quot;$id&quot;: &quot;2695&quot;, &quot;m_CustomPortraitId&quot;: &quot;B28894B2200AAE6300A928653E91CD2B&quot; &#125;, &quot;m_Slots&quot;: &#123;&#125; &#125;, &quot;State&quot;: &#123;&#125;, &quot;Proficiencies&quot;: &#123;&#125;, &quot;Alignment&quot;: &#123;&#125;, &quot;CustomGender&quot;: &quot;Female&quot;, &quot;LeftHandedOverride&quot;: true, &quot;CustomName&quot;: &quot;烏緹卡&quot;, &quot;BirthDay&quot;: 25, &quot;BirthMonth&quot;: 12, &quot;CustomPrefabGuid&quot;: null, &quot;m_IsEssentialForGame&quot;: 0, &quot;Body&quot;: &#123;&#125;, &quot;Brain&quot;: &#123;&#125;, &quot;OriginalBlueprint&quot;: &quot;3038bf627339a4d469e3c7455007f10d&quot;, &quot;Blueprint&quot;: &quot;3038bf627339a4d469e3c7455007f10d&quot;, &quot;MainFact&quot;: &#123; &quot;$ref&quot;: &quot;2471&quot; &#125;, &quot;Encumbrance&quot;: &quot;Light&quot;, &quot;HasOwnInventory&quot;: false, &quot;LastRestTime&quot;: &quot;2.07:02:52.1970000&quot; &#125;, &quot;PreviousPosition&quot;: &quot;-7137|4068|442&quot;, &quot;DesiredOrientation&quot;: 270.454346, &quot;TimeToNextRoundTick&quot;: 5.049661, &quot;LootViewed&quot;: false, &quot;UniqueId&quot;: &quot;b27cd89c-a8b0-4a1c-a5f0-379c5e5fd9c3&quot; &#125;&#125; Save檔的結構 基本結構 基本上就如sample一樣, 它是一個人完整定義完了之後在開始下一個重點 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&#123; &quot;SceneName&quot;: &quot;&lt;cross-scene&gt;&quot;, &quot;HasEntityData&quot;: false, &quot;m_EntityData&quot;: [ &#123; &quot;$id&quot;: &quot;1&quot;, &quot;$type&quot;: &quot;Kingmaker.EntitySystem.Entities.UnitEntityData, Assembly-CSharp&quot;, &quot;m_GroupId&quot;: &quot;&lt;directly-controllable-unit&gt;&quot;, &quot;Position&quot;: &quot;-6788|4068|603&quot;, &quot;m_Orientation&quot;: 251.672562, &quot;Sleepless&quot;: 0, &quot;Parts&quot;: &#123;&#125;, &quot;Facts&quot;: &#123;&#125;, &quot;m_IsRevealed&quot;: true, &quot;Stealth&quot;: &#123;&#125;, &quot;SpawnPosition&quot;: &quot;0|0|0&quot;, &quot;LastMoveTime&quot;: &quot;2.12:30:27.8830000&quot;, &quot;Descriptor&quot;: &#123;&#125;, &quot;PreviousPosition&quot;: &quot;-6788|4068|603&quot;, &quot;DesiredOrientation&quot;: 251.672562, &quot;TimeToNextRoundTick&quot;: 2.977339, &quot;LootViewed&quot;: false, &quot;UniqueId&quot;: &quot;e51cd2f4-f8e6-4956-93a7-86281cd5e92a&quot; &#125;, &#123; &quot;$id&quot;: &quot;2457&quot;, &quot;$type&quot;: &quot;Kingmaker.EntitySystem.Entities.UnitEntityData, Assembly-CSharp&quot;, &quot;m_GroupId&quot;: &quot;&lt;directly-controllable-unit&gt;&quot;, &quot;Position&quot;: &quot;-7137|4068|442&quot;, &quot;m_Orientation&quot;: 270.454346, &quot;Sleepless&quot;: 0, &quot;Parts&quot;: &#123;&#125;, &quot;Facts&quot;: &#123;&#125;, &quot;m_IsRevealed&quot;: true, &quot;Stealth&quot;: &#123;&#125;, &quot;SpawnPosition&quot;: &quot;0|0|0&quot;, &quot;LastMoveTime&quot;: &quot;2.12:30:38.7740000&quot;, &quot;Descriptor&quot;: &#123;&#125;, &quot;PreviousPosition&quot;: &quot;-7137|4068|442&quot;, &quot;DesiredOrientation&quot;: 270.454346, &quot;TimeToNextRoundTick&quot;: 5.049661, &quot;LootViewed&quot;: false, &quot;UniqueId&quot;: &quot;b27cd89c-a8b0-4a1c-a5f0-379c5e5fd9c3&quot; &#125;, &#123;&#125;&#125; 所以若要搜索建議可以用&quot;m_GroupId&quot;作為關鍵字進行搜尋 大致分類 主結構 123456789101112131415161718&quot;$id&quot;: &quot;2457&quot;,&quot;$type&quot;: &quot;Kingmaker.EntitySystem.Entities.UnitEntityData, Assembly-CSharp&quot;,&quot;m_GroupId&quot;: &quot;&lt;directly-controllable-unit&gt;&quot;,&quot;Position&quot;: &quot;-7137|4068|442&quot;,&quot;m_Orientation&quot;: 270.454346,&quot;Sleepless&quot;: 0,&quot;Parts&quot;: &#123;&#125;, #角色的外型,buff,Pet都在這一個Section&quot;Facts&quot;: &#123;&#125;, #角色的feat, ability都在這一個Section&quot;m_IsRevealed&quot;: true,&quot;Stealth&quot;: &#123;&#125;,&quot;SpawnPosition&quot;: &quot;0|0|0&quot;,&quot;LastMoveTime&quot;: &quot;2.12:30:38.7740000&quot;,&quot;Descriptor&quot;: &#123;&#125;, #角色最重要的定義,後面會另外break down&quot;PreviousPosition&quot;: &quot;-7137|4068|442&quot;,&quot;DesiredOrientation&quot;: 270.454346,&quot;TimeToNextRoundTick&quot;: 5.049661,&quot;LootViewed&quot;: false,&quot;UniqueId&quot;: &quot;b27cd89c-a8b0-4a1c-a5f0-379c5e5fd9c3&quot; #角色的UniqueID,每個角色都有一個不重複的 Parts - Pet &amp; Master 123456789101112131415161718192021222324252627282930313233343536373839#定義Pet種類與其Master&quot;Parts&quot;: &#123; &quot;$id&quot;: &quot;2458&quot;, &quot;m_Parts&quot;: [ &#123; &quot;$id&quot;: &quot;2459&quot;, &quot;$type&quot;: &quot;Kingmaker.UnitLogic.Parts.UnitPartPet, Assembly-CSharp&quot;, &quot;m_MasterRef&quot;: &#123; &quot;m_Ref&quot;: &quot;e51cd2f4-f8e6-4956-93a7-86281cd5e92a&quot; #這裡要確認跟Master的UniqueID一致 &#125;, &quot;Type&quot;: &quot;MythicSkeletalChampion&quot; #這種一共有三大種 &#125;, ] &#125;#定義Master的Pet們&quot;Parts&quot;: &#123; &quot;$id&quot;: &quot;2&quot;, &quot;m_Parts&quot;: [ &#123; &quot;$id&quot;: &quot;10&quot;, &quot;$type&quot;: &quot;Kingmaker.UnitLogic.Parts.UnitPartPetMaster, Assembly-CSharp&quot;, &quot;m_Pets&quot;: [ &#123; &quot;m_Ref&quot;: &quot;b27cd89c-a8b0-4a1c-a5f0-379c5e5fd9c3&quot; #定義寵物的UniqueID,用這個格式增加數量 &#125;, &#123; &quot;m_Ref&quot;: &quot;46694232-fba8-4a18-8daa-1a1c933290e2&quot; &#125;, &#123; &quot;m_Ref&quot;: &quot;14547546-c716-4e63-9a5c-d8126e9c01f6&quot; &#125;, &#123; &quot;m_Ref&quot;: &quot;2577f7e3-a782-439d-90df-eaa70a440af4&quot; &#125; ], &quot;m_ExPets&quot;: [] &#125; ] &#125;, 因為系統限制,除了不同大種類差異的會增加以外其他的不會自動加上第二個所以需要手動加上 Pet Type AnimeCompanion MythicSkeletalChampion DragonAzataCompaion Part - 外型 123456789101112131415161718192021222324252627282930&quot;Parts&quot;: &#123; &quot;$id&quot;: &quot;2&quot;, &quot;m_Parts&quot;: [ &#123; &quot;$id&quot;: &quot;6&quot;, &quot;$type&quot;: &quot;Kingmaker.UnitLogic.Parts.UnitPartDollData, Assembly-CSharp&quot;, &quot;Default&quot;: &#123; &quot;$id&quot;: &quot;7&quot;, &quot;EquipmentEntityIds&quot;: [ #各外型部位的UUID,若有總表可以直接修改 &quot;7368eafa3f5ee9d4bb9739b80faefdc3&quot;, &quot;9ab83dd3a06ba6a4e97900bd6ffc4aab&quot;, &quot;7c55ae7f07c9d4741b4837bd305d3ec0&quot;, &quot;b8b615fabc0f7af448fb68f009113c61&quot;, &quot;8a008a34d7462524c9b96132a28bb606&quot; ], &quot;EntityRampIdices&quot;: &#123; #顏色定義,髮色/膚色什麼的 &quot;7c55ae7f07c9d4741b4837bd305d3ec0&quot;: 15, &quot;861171cdd3930a84faab08ab85ba924a&quot;: 8, &quot;7368eafa3f5ee9d4bb9739b80faefdc3&quot;: 8, &quot;9ab83dd3a06ba6a4e97900bd6ffc4aab&quot;: 15 &#125;, &quot;EntitySecondaryRampIdices&quot;: &#123;&#125;, &quot;Gender&quot;: &quot;Female&quot;, #外型性別 &quot;RacePreset&quot;: &quot;ee326fab8804493499ce07c5cd8759e2&quot;, &quot;ClothesPrimaryIndex&quot;: 9, #衣服顏色 &quot;ClothesSecondaryIndex&quot;: 9 &#125; &#125; ]&#125; 基本上只有第一個MythicSkeletalChampion會需要去剪下其他的來貼,其他的都會建議用傭兵來改會比較快 Descriptor 1234567891011121314151617181920212223242526272829303132333435363738&quot;Descriptor&quot;: &#123; &quot;$id&quot;: &quot;2631&quot;, &quot;m_Inventory&quot;: &#123;&#125;, &quot;m_Damage&quot;: 291, &quot;m_Spellbooks&quot;: [], &quot;Faction&quot;: &quot;72f240260881111468db610b6c37c099&quot;, &quot;Stats&quot;: &#123;&#125;, &quot;AttackFactions&quot;: &#123;&#125;, &quot;Resources&quot;: &#123;&#125;, &quot;Progression&quot;: &#123;&#125;, &quot;UISettings&quot;: &#123; &quot;$id&quot;: &quot;2694&quot;, &quot;m_AlreadyAutomaticallyAdded&quot;: [], &quot;m_CustomPortrait&quot;: &#123; &quot;$id&quot;: &quot;2695&quot;, &quot;m_CustomPortraitId&quot;: &quot;B28894B2200AAE6300A928653E91CD2B&quot; #定義頭像 &#125;, &quot;m_Slots&quot;: &#123;&#125; &#125;, &quot;State&quot;: &#123;&#125;, &quot;Proficiencies&quot;: &#123;&#125;, &quot;Alignment&quot;: &#123;&#125;, &quot;CustomGender&quot;: &quot;Female&quot;, #系統性別跟外型沒關係 &quot;LeftHandedOverride&quot;: true, &quot;CustomName&quot;: &quot;烏緹卡&quot;, #名字可以用中文 &quot;BirthDay&quot;: 25, &quot;BirthMonth&quot;: 12, &quot;CustomPrefabGuid&quot;: null, &quot;m_IsEssentialForGame&quot;: 0, &quot;Body&quot;: &#123;&#125;, &quot;Brain&quot;: &#123;&#125;, &quot;OriginalBlueprint&quot;: &quot;3038bf627339a4d469e3c7455007f10d&quot;, &quot;Blueprint&quot;: &quot;3038bf627339a4d469e3c7455007f10d&quot;, &quot;MainFact&quot;: &#123;&#125;, &quot;Encumbrance&quot;: &quot;Light&quot;, &quot;HasOwnInventory&quot;: false, &quot;LastRestTime&quot;: &quot;2.07:02:52.1970000&quot;&#125;, 其他重點 Json construction 1234567891011&#123; &quot;All&quot;:( &quot;data&quot;: &quot;A&quot; ),&#123; &quot;wrote&quot;: &#123; &quot;like&quot;:&#123; &quot;this&quot;: &quot;B&quot; &#125; &#125; &#125;&#125; 用&#123; &#125;或是[ ]把設定框起來,同一層定義的用,連結,所以要變成人看得懂的需要先整理成sample那樣的格式 id &amp; $ref 在Pathfinder兩代的save file中需要注意每個獨立的項目均會assign一個id,這個id不需要依照順序只要不重複即可 $ref是用來呼叫被定義好的id &quot; &quot;符號與:不要忘記 若是&quot; &quot; : [ ] &#123; &#125;符號有漏的就會讓整個文件的對齊跑了機器會讀不出來","categories":[{"name":"Game","slug":"Game","permalink":"http://kiwi0093.github.io/wiki/categories/Game/"},{"name":"PC","slug":"Game/PC","permalink":"http://kiwi0093.github.io/wiki/categories/Game/PC/"},{"name":"Pathfinder WoTR","slug":"Game/PC/Pathfinder-WoTR","permalink":"http://kiwi0093.github.io/wiki/categories/Game/PC/Pathfinder-WoTR/"}],"tags":[{"name":"Game","slug":"Game","permalink":"http://kiwi0093.github.io/wiki/tags/Game/"},{"name":"PC-Game","slug":"PC-Game","permalink":"http://kiwi0093.github.io/wiki/tags/PC-Game/"},{"name":"RPG","slug":"RPG","permalink":"http://kiwi0093.github.io/wiki/tags/RPG/"}]},{"title":"Pathfinder:WoTR - Save Modding Intruduce","slug":"Game/PC/Pathfinder WoTR/1-Save file modding","date":"2021-10-31T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Game/PC/Pathfinder WoTR/1-Save file modding/","permalink":"http://kiwi0093.github.io/wiki/wiki/Game/PC/Pathfinder%20WoTR/1-Save%20file%20modding/","excerpt":"前言 上一代的Pathfinder:Kingmaker的時候已經搞過一次，這次也不免俗也要改一下","text":"前言 上一代的Pathfinder:Kingmaker的時候已經搞過一次，這次也不免俗也要改一下 主要變更 最多可以有六個跟班？（每個正常角色） 經過測試有以下三種共六個跟班可以改出來 Animal Companion ​ 每種動物的動物夥伴都是獨立的Feat, 搞不好可以每種帶一隻？？（不過還沒測試） MythicSkeleton Archer Dual Wielder Tank Two-Handed Azata Dragon Companion 基本原理 要帶的小弟,需要滿足三個條件就可以帶 Feature defined m_pet defined m_master defined 也就是說這一代不是單純定義主人與寵物關係就可以變成寵物,還需要有配套的feat,雖然還是有限制,但是比起上一代只能定義一個 m_pet來的放寬了 Save檔編輯 Save檔所在位置 C:\\Users\\&#123;Username&#125;\\AppData\\LocalLow\\Owlcat Games\\Pathfinder Wrath Of The Righteous\\Saved Games 因為AppData是隱藏目錄.所以需要手動進入 記錄檔為*.zks可以當作一般的Zip解開,解開後的檔案有兩個重點檔案 party.json 這個檔案紀錄了整個隊伍裡面每一個角色(包括隊友跟寵物)的資訊,我們想要變更跟班的外貌與種族請編輯這個 player.json 這個檔案主要是紀錄主角的一些訊息 工具 Windows Editor 推薦使用notepad++ 整理Json File 使用Notepad++的extension - JstoolPlug-in,再讀入json file的時候可以利用Jstool裡的JSFormat功能把json對齊成好看的樣子 Linux Editor 推薦使用Notepadqq 整理Json File 1cat &lt;file&gt; | python -m jstool | &gt; &lt;new file&gt; 這個指令要注意file&amp;new file要用不同的檔名才不會有問題 其他所需 Unity ModManager ToyBox Mod - 需要assign相關feat給主角以及後續的跟班升級與裝備","categories":[{"name":"Game","slug":"Game","permalink":"http://kiwi0093.github.io/wiki/categories/Game/"},{"name":"PC","slug":"Game/PC","permalink":"http://kiwi0093.github.io/wiki/categories/Game/PC/"},{"name":"Pathfinder WoTR","slug":"Game/PC/Pathfinder-WoTR","permalink":"http://kiwi0093.github.io/wiki/categories/Game/PC/Pathfinder-WoTR/"}],"tags":[{"name":"Game","slug":"Game","permalink":"http://kiwi0093.github.io/wiki/tags/Game/"},{"name":"PC-Game","slug":"PC-Game","permalink":"http://kiwi0093.github.io/wiki/tags/PC-Game/"},{"name":"RPG","slug":"RPG","permalink":"http://kiwi0093.github.io/wiki/tags/RPG/"}]},{"title":"Manajro Tweak & Application","slug":"Linux/Manjaro/3-tweek&application","date":"2021-06-22T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Manjaro/3-tweek&application/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Manjaro/3-tweek&application/","excerpt":"前言 雖然寫了一個Manjaro的自動安裝script,但是某程度上並不是很實用,因為Manjaro在我個人的使用上是當Desktop使用的,其實不是真的很需要自動安裝的script 所以我就針對現在(21.0.7)整理一下我個人會使用的程式與系統調整","text":"前言 雖然寫了一個Manjaro的自動安裝script,但是某程度上並不是很實用,因為Manjaro在我個人的使用上是當Desktop使用的,其實不是真的很需要自動安裝的script 所以我就針對現在(21.0.7)整理一下我個人會使用的程式與系統調整 Tweak 環境條件 Manjaro KDE 21.0.7 變更Mirror-list Manjaro比Arch人性化的地方在於它有提供工具可以直接變更Mirror-list而不用靠編輯文件檔(可能其他人會覺得那樣比較簡潔乾淨又快速) 1234#依照國別選擇sudo pacman-mirrors --country &lt;County Name&gt;#依照速度選擇sudo pacman-mirrors --fasttrack &lt;數量&gt; 之前我還住在中國的時候習慣性是把Mirror-list設成中國這樣可以省掉很多因為牆的問題 現在回台灣了應該都會改以速度為原則來選,甚至不選就可以了 安裝VGA Driver 1sudo mhwd -a [pci or usb connection] [free or nonfree drivers] 0300 這個就會自動確認並且下載安裝了 VM Guest OS 安裝ISO無法開機 這個發生在21.0.6版,理由大概是因為Manjaro針對VM Guest的Driver做了調整,所以導致預設開機的driver=free無法正確驅動顯示,導致會卡在mhwd偵測 解決方案就是在開機選單中手動修改grub的開機參數 1234#將原先預設參數中的driver=free#改成driver=mesa 改用mesa來驅動顯示就可以了開了,不過21.0.7的時候這個問題又被改好了 進入VM後無法resize解析度以及不會自動fit畫面大小 這個是目前21版的毛病(以前用20或是19沒有這個問題不知道後面的版本會不會修正)原因是因為缺乏VM顯示的driver造成的 12#安裝需要的Packagesudo pacman -S open-vm-tools virtualbox-guest-utils 雖然不算是正式的解決,因為沒裝上video-virtualmachine這個driver(怎麼安裝怎麼fail,後面可能會修好吧) 但是這樣畫面就可以動了,於是我也就先不管了 Console 之前我會自己裝powerline,或是power10k這種東西來美化我的console,但是很神奇的是,21.0.7開始Manjaro的zsh就有寫好漂漂亮亮的powerline顯示可以使用,我就不用自己再弄,但是還是需要調整一下 tmux Tmux其實就是我以前愛用的Screen的強化版(真的強很多) 1234567#安裝tmuxsudo pacman -S tmux#加裝oh-my-tmux美化cdgit clone https://github.com/gpakosz/.tmux.gitln -s -f .tmux/.tmux.confcp .tmux/.tmux.conf.local . 使用oh-my-tmux的最大好處除了漂亮以外就是他增加了C-a作為他的prefix,這比起他預設的C-b更接近screen的用法 幾個常用的快捷鍵如下 指令 效果 C-a + % 分隔左右 C-a + - 分隔上下 C-a + &quot; 分隔上下 C-a + 方向鍵 選擇區塊 C-a + c 新的分頁 C-a + 數字 跳去數字的分頁 C-a + w 從列表選擇窗口 C-a + , 重新命名分頁 C-a + d Detach 整個tmux(同screen) 其他的啟動參數 1234#列出在跑的tmux sessiontmux ls#接著第$數字個sessiontmxu at -t $數字 參考資料 阮一峰的网络日志 ryerh的github yakuake 這是一個下拉式的console,以前我會移除,但是最近發現他其實很好用,所以就保留著,設定上沒什麼特別的,基本上就是 調整下拉後的寬度,我習慣是90% 調整下拉後的高度,我習慣是80% 設定使用的是/bin/zsh,這個也可以用chsh把shell都改過就好了 要使用的時候按F12就可以了(應該可以設定改成其他的鍵,但是我個人覺得F12蠻好的),用其他的GUI程式的時候就會自動縮起來不佔空間 沒有exit前再次按F12會回到正在跑的console,這點很好用 yay 1sudo pacman -S base-devel yay 這是神器肯定要上的 中文輸入 這個是我們作為中文使用者需要的東西,在Linux上我喜歡用新酷音 1yay -S fcitx fcitx-qt5 fcitx-configtool fcitx-chewing fcitx-mozc 安裝後還需要增加以下設定才可以正常運作 12345#/etc/profile內加入以下# Add Chinese Input Supportexport GTK_IM_MODULE=fcitxexport XMODIFIERS=@im=fcitxexport QT_IM_MODULE=fcitx 然後重跑fcitx就可以用了 Application 因為我都是拿Manjaro當desktop使用,所以也沒用什麼太花俏的程式 網路相關 Browser 目前我都是用Brave作為我的主力browser,但是Brave是在AUR裡面的所以要用yay安裝 1yay -S brave 這樣就好了,通常我還會移除firefox,因為我沒用上 FTP client 1yay -S filezilla Filezilla也支援SFTP跟ppk檔,所以蠻方便的,不過近日大家都在用web的cloud在傳輸,傳統的ftp/sftp使用的機率越來越低,其實不裝也可以 RDP 1yay -S remmina freerdp 這樣就可以用rdp遠端控制其他的windwos了 Github-desktop(Optional) 1yay -S github-desktop 雖然可以用console的git,但是有時候GUI還是比較好用的 Hexo(Optional) 1yay -S nodejs npm 因為我基本上安裝Hexo都是為了我自己的Blog/Wiki,若不是的可以任意找一個目錄 1sudo npm install -g hexo-cli 就可以開始使用了 Putty(Optional) 1yay -S putty 其實在Linux下Putty不是很需要,但是因為我會有ppk檔的使用需求所以還是加上會比較好(或是用比較傳統的方式把ssh-key放進console裡面也可以) 文書工作相關 Typora 1yay -S typora 這個是我用來寫Blog/Wiki用的主要工具,是個很好用的Markdown編輯器,記得搭配上picogo來上傳圖片 Onlyoffice 1yay -S onlyoffice-desktopeditors 這是一個跟M$ Office相容性很高的免費Office程式,安裝後只有Word,Excel,Powerpoint相容程式可以用,本來想弄server版的但是一直沒成功就懶了 VM相關 VMWare Workstation 1yay -S vmware-workstation 沒什麼特別的,但是記得要去找SN不然不能用","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Manjaro","slug":"Linux/Manjaro","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Manjaro/"}],"tags":[{"name":"Linunx","slug":"Linunx","permalink":"http://kiwi0093.github.io/wiki/tags/Linunx/"},{"name":"Manjaro","slug":"Manjaro","permalink":"http://kiwi0093.github.io/wiki/tags/Manjaro/"}]},{"title":"整合型Archlinux安裝Script - 8.arch_v2ray_gate_k.sh說明","slug":"Linux/Arch Linux/Scripts/8-arch_v2ray_gate_k","date":"2021-06-22T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Arch Linux/Scripts/8-arch_v2ray_gate_k/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Arch%20Linux/Scripts/8-arch_v2ray_gate_k/","excerpt":"本條目已不再適用,不僅停止維護,原先的script也被移除了","text":"本條目已不再適用,不僅停止維護,原先的script也被移除了 使用前 這個script預設是自動帶出來跑的,但是也是可以手動自己跑 這個script是用在有兩張網路卡的條件下的 Script的直接位置如下： https://Kiwi0093.github.io/script/Arch/arch_v2ray_gate_k.sh Script內容 Script內容說明 基本定義 12345#!/bin/zsh#Parmeter Pre-DefineCOLOR1=&#x27;\\e[94m&#x27;COLOR2=&#x27;\\e[32m&#x27;NC=&#x27;\\e[0m&#x27; 定義Script中字串的顏色 設定時區與硬體時間 1234567891011121314151617181920212223242526#change Timezone to CTS(Taipei)echo -e &quot;$&#123;COLOR1&#125;Please select your time zone\\n1)Taipei\\n2)Shanghai\\n*)Whatever..I don&#x27;t care\\n$&#123;NC&#125;&quot;while :do read ZONE case $ZONE in 1) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Taipei$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime hwclock --systohc --utc break ;; 2) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Shanghai$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime hwclock --systohc --utc break ;; *) echo -e &quot;$&#123;COLOR1&#125;Nobody cares the local time!!$&#123;NC&#125;&quot; hwclock --systohc --utc break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 網路設定 Hostname設定 123456#Hostnameecho -e &quot;$&#123;COLOR1&#125;Please input your hostname\\n$&#123;NC&#125;&quot;read HOSTNAMEecho $&#123;HOSTNAME&#125; &gt; /etc/hostnameecho &quot;127.0.0.1 localhost $&#123;HOSTNAME&#125;&quot; &gt;&gt; /etc/hostsecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 輸入卡號定義NIC名稱 123456789#Set Mac Addressecho -e &quot;$&#123;COLOR1&#125;Define your NIC by Mac address$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Please input your EXT Mac Address:\\n$&#123;NC&#125;&quot;read OUTSIDEecho &#x27;SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, ATTR&#123;address&#125;==&quot;&#x27;$&#123;OUTSIDE&#125;&#x27;&quot;, NAME=&quot;EXT0&quot;&#x27; &gt; /etc/udev/rules.d/10-network.rulesecho -e &quot;$&#123;COLOR1&#125;Please input your INT Mac Address:\\n$&#123;NC&#125;&quot;read INSIDEecho &#x27;SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, ATTR&#123;address&#125;==&quot;&#x27;$&#123;INSIDE&#125;&#x27;&quot;, NAME=&quot;INT0&quot;&#x27; &gt;&gt; /etc/udev/rules.d/10-network.rulesecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 這個設定是利用固定的**Mac Address來定義NIC Interface的名字為EXT0** 設定對內固定IP 123456789101112# Set INT networkecho -e &quot;$&#123;COLOR1&#125;Setting your INT0$&#123;NC&#125;&quot;echo &quot;Description=&#x27;INT0 IP SETTING&#x27;&quot; &gt; /etc/netctl/INT0.serviceecho &quot;Interface=INT0&quot; &gt;&gt; /etc/netctl/INT0.serviceecho &quot;Connection=ethernet&quot; &gt;&gt; /etc/netctl/INT0.serviceecho &quot;IP=static&quot; &gt;&gt; /etc/netctl/INT0.serviceecho -e &quot;$&#123;COLOR1&#125;Please input your INT IP:\\n$&#123;NC&#125;&quot;read INT_IPecho &quot;Address=(&#x27;$&#123;INT_IP&#125;/24&#x27;)&quot; &gt;&gt; /etc/netctl/INT0.serviceecho -e &quot;$&#123;COLOR2&#125;Enable INT0$&#123;NC&#125;&quot;netctl enable INT0.serviceecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot; IP請設定在192.168/16的範圍內 設定對外網路,可選固定IP或是PPPOE方式連線 123456789101112131415161718192021222324252627282930313233343536373839404142434445# Set EXT networkecho -e &quot;$&#123;COLOR1&#125;Please select your connection\\n1)PPPOE\\n2)Static IP\\n&quot;whiledo read CONNECT case $CONNECT in 1) echo -e &quot;$&#123;COLOR1&#125;Setting your PPPOE$&#123;NC&#125;&quot; echo &quot;Description=&#x27;EXT0 PPPOE SETTING&#x27;&quot; &gt; /etc/netctl/EXT0.service echo &quot;Interface=EXT0&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;Connection=pppoe&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input your PPPOE Account:\\n:$&#123;NC&#125;&quot; read ISP echo &quot;User=&#x27;$&#123;ISP&#125;&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input your PPPOE password:\\n$&#123;NC&#125;&quot; read ISPPW echo &quot;Password=&#x27;$&#123;ISPPW&#125;&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;ConnectionMode=&#x27;persist&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;UsePeerDNS=false&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Enable EXT0&#123;NC&#125;&quot; netctl enable EXT0.service break ;; 2) echo -e &quot;$&#123;COLOR1&#125;Setting your Static IP$&#123;NC&#125;&quot; echo &quot;Description=&#x27;EXT0 IP SETTING&#x27;&quot; &gt; /etc/netctl/EXT0.service echo &quot;Interface=EXT0&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;Connection=ethernet&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;IP=static&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input your IP address:\\n$&#123;NC&#125;&quot; read EXT_IP echo &quot;Address=(&#x27;$&#123;EXT_IP&#125;/24&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input Gateway IP address:\\n$&#123;NC&#125;&quot; read GATE_IP echo &quot;Gateway=&#x27;$&#123;GATE_IP&#125;&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input DNS IP address:\\n$&#123;NC&#125;&quot; read DNS_IP echo &quot;DNS=(&#x27;$&#123;DNS_IP&#125;&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR2&#125;Enable EXT0$&#123;NC&#125;&quot; netctl enable EXT0.service break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;EXT set completed.$&#123;NC&#125;&quot; 設定Gateway Routing 1234#Set Natecho -e &quot;$&#123;COLOR1&#125;Open package fowrading$&#123;NC&#125;&quot;echo &quot;net.ipv4.ip_forward=1&quot; &gt; /etc/sysctl/30-ipforward.confecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot; iptable設定與systemd 12345678910111213141516171819# iptable scriptecho -e &quot;$&#123;COLOR1&#125;Create Iptable start script$&#123;NC&#125;&quot;echo &quot;#Natd&quot; &gt; /etc/iptables/iptable.shecho &quot;iptables -t nat -A POSTROUTING -s 192.168/16 -j MASQUERADE&quot; &gt;&gt; /etc/iptables/iptable.shchmod 750 /etc/iptables/iptable.shecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot;# systemdecho -e &quot;$&#123;COLOR1&#125;Create Systemd Service$&#123;NC&#125;&quot;echo &quot;[Unit] &gt; /etc/systemd/system/iptables.serviceecho &quot;Description=iptables rules &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot; &quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;[Service]&quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;ExecStart=/bin/sh /etc/iptables/iptable.sh&quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot; &quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;[Install]&quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;WantedBy=multi-user.target&quot; &gt;&gt; /etc/systemd/system/iptables.servicesystemctl enable iptables.serviceecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot; 變更root密碼與建立其他帳號 123456789101112131415161718#Root Passwordecho -e &quot;$&#123;COLOR1&#125;設定你的root密碼$&#123;NC&#125;&quot;passwdchsh -s /bin/zshecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#add Userecho -e &quot;$&#123;COLOR1&#125;Add user account:$&#123;NC&#125;&quot;echo -n &quot;$&#123;COLOR1&#125;What ID you want:$&#123;NC&#125;&quot;read YOURIDuseradd -m -g root -s /bin/zsh $&#123;YOURID&#125;passwd $&#123;YOURID&#125;echo -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Add $YOURID into sudo list$&#123;NC&#125;&quot;pacman -Syu sudoecho &quot;$&#123;YOURID&#125; ALL=(ALL) ALL&quot; &gt;&gt; /etc/sudoersecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 安裝程式 12345#install Toolsecho -e &quot;$&#123;COLOR1&#125;Install Packages$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;screen$&#123;NC&#125;&quot;pacman -Sy screen v2rayecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 安裝Bootloader 12345#install Bootloaderecho -e &quot;$&#123;COLOR1&#125;Install grub Boot Loader into /dev/sda$&#123;NC&#125;&quot;grub-install --target=i386-pc /dev/sdagrub-mkconfig -o /boot/grub/grub.cfgecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 同步後離開Arch-chroot 12345#Finished installsyncsyncsyncexit 完整版的script 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166#------------------------------------------------------------------------------#(所有動作都是在change root內完成的)#------------------------------------------------------------------------------#!/bin/zsh#Parmeter Pre-DefineCOLOR1=&#x27;\\e[94m&#x27;COLOR2=&#x27;\\e[32m&#x27;NC=&#x27;\\e[0m&#x27;#change Timezone to CTS(Taipei)echo -e &quot;$&#123;COLOR1&#125;Please select your time zone\\n1)Taipei\\n2)Shanghai\\n*)Whatever..I don&#x27;t care\\n$&#123;NC&#125;&quot;while :do read ZONE case $ZONE in 1) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Taipei$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime hwclock --systohc --utc break ;; 2) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Shanghai$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime hwclock --systohc --utc break ;; *) echo -e &quot;$&#123;COLOR1&#125;Nobody cares the local time!!$&#123;NC&#125;&quot; hwclock --systohc --utc break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#Set Mac Addressecho -e &quot;$&#123;COLOR1&#125;Define your NIC by Mac address$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Please input your EXT Mac Address:\\n$&#123;NC&#125;&quot;read OUTSIDEecho &#x27;SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, ATTR&#123;address&#125;==&quot;&#x27;$&#123;OUTSIDE&#125;&#x27;&quot;, NAME=&quot;EXT0&quot;&#x27; &gt; /etc/udev/rules.d/10-network.rulesecho -e &quot;$&#123;COLOR1&#125;Please input your INT Mac Address:\\n$&#123;NC&#125;&quot;read INSIDEecho &#x27;SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, ATTR&#123;address&#125;==&quot;&#x27;$&#123;INSIDE&#125;&#x27;&quot;, NAME=&quot;INT0&quot;&#x27; &gt;&gt; /etc/udev/rules.d/10-network.rulesecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;# Set INT networkecho -e &quot;$&#123;COLOR1&#125;Setting your INT0$&#123;NC&#125;&quot;echo &quot;Description=&#x27;INT0 IP SETTING&#x27;&quot; &gt; /etc/netctl/INT0.serviceecho &quot;Interface=INT0&quot; &gt;&gt; /etc/netctl/INT0.serviceecho &quot;Connection=ethernet&quot; &gt;&gt; /etc/netctl/INT0.serviceecho &quot;IP=static&quot; &gt;&gt; /etc/netctl/INT0.serviceecho -e &quot;$&#123;COLOR1&#125;Please input your INT IP:\\n$&#123;NC&#125;&quot;read INT_IPecho &quot;Address=(&#x27;$&#123;INT_IP&#125;/24&#x27;)&quot; &gt;&gt; /etc/netctl/INT0.serviceecho -e &quot;$&#123;COLOR2&#125;Enable INT0$&#123;NC&#125;&quot;netctl enable INT0.serviceecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot;# Set EXT networkecho -e &quot;$&#123;COLOR1&#125;Please select your connection\\n1)PPPOE\\n2)Static IP\\n&quot;whiledo read CONNECT case $CONNECT in 1) echo -e &quot;$&#123;COLOR1&#125;Setting your PPPOE$&#123;NC&#125;&quot; echo &quot;Description=&#x27;EXT0 PPPOE SETTING&#x27;&quot; &gt; /etc/netctl/EXT0.service echo &quot;Interface=EXT0&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;Connection=pppoe&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input your PPPOE Account:\\n:$&#123;NC&#125;&quot; read ISP echo &quot;User=&#x27;$&#123;ISP&#125;&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input your PPPOE password:\\n$&#123;NC&#125;&quot; read ISPPW echo &quot;Password=&#x27;$&#123;ISPPW&#125;&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;ConnectionMode=&#x27;persist&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;UsePeerDNS=false&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Enable EXT0&#123;NC&#125;&quot; netctl enable EXT0.service break ;; 2) echo -e &quot;$&#123;COLOR1&#125;Setting your Static IP$&#123;NC&#125;&quot; echo &quot;Description=&#x27;EXT0 IP SETTING&#x27;&quot; &gt; /etc/netctl/EXT0.service echo &quot;Interface=EXT0&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;Connection=ethernet&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;IP=static&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input your IP address:\\n$&#123;NC&#125;&quot; read EXT_IP echo &quot;Address=(&#x27;$&#123;EXT_IP&#125;/24&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input Gateway IP address:\\n$&#123;NC&#125;&quot; read GATE_IP echo &quot;Gateway=&#x27;$&#123;GATE_IP&#125;&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input DNS IP address:\\n$&#123;NC&#125;&quot; read DNS_IP echo &quot;DNS=(&#x27;$&#123;DNS_IP&#125;&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR2&#125;Enable EXT0$&#123;NC&#125;&quot; netctl enable EXT0.service break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;EXT set completed.$&#123;NC&#125;&quot;#Set Natecho -e &quot;$&#123;COLOR1&#125;Open package fowrading$&#123;NC&#125;&quot;echo &quot;net.ipv4.ip_forward=1&quot; &gt; /etc/sysctl/30-ipforward.confecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot;# iptable scriptecho -e &quot;$&#123;COLOR1&#125;Create Iptable start script$&#123;NC&#125;&quot;echo &quot;#Natd&quot; &gt; /etc/iptables/iptable.shecho &quot;iptables -t nat -A POSTROUTING -s 192.168/16 -j MASQUERADE&quot; &gt;&gt; /etc/iptables/iptable.shchmod 750 /etc/iptables/iptable.shecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot;# systemdecho -e &quot;$&#123;COLOR1&#125;Create Systemd Service$&#123;NC&#125;&quot;echo &quot;[Unit] &gt; /etc/systemd/system/iptables.serviceecho &quot;Description=iptables rules &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot; &quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;[Service]&quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;ExecStart=/bin/sh /etc/iptables/iptable.sh&quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot; &quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;[Install]&quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;WantedBy=multi-user.target&quot; &gt;&gt; /etc/systemd/system/iptables.servicesystemctl enable iptables.serviceecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot;#Root Passwordecho -e &quot;$&#123;COLOR1&#125;設定你的root密碼$&#123;NC&#125;&quot;passwdchsh -s /bin/zshecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#add Userecho -e &quot;$&#123;COLOR1&#125;Add user account:$&#123;NC&#125;&quot;echo -n &quot;$&#123;COLOR1&#125;What ID you want:$&#123;NC&#125;&quot;read YOURIDuseradd -m -g root -s /bin/zsh $&#123;YOURID&#125;passwd $&#123;YOURID&#125;echo -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Add $YOURID into sudo list$&#123;NC&#125;&quot;pacman -Syu sudoecho &quot;$&#123;YOURID&#125; ALL=(ALL) ALL&quot; &gt;&gt; /etc/sudoersecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#install Toolsecho -e &quot;$&#123;COLOR1&#125;Install Packages$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;screen$&#123;NC&#125;&quot;pacman -Sy screen v2rayecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#install Bootloaderecho -e &quot;$&#123;COLOR1&#125;Install grub Boot Loader into /dev/sda$&#123;NC&#125;&quot;grub-install --target=i386-pc /dev/sdagrub-mkconfig -o /boot/grub/grub.cfgecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#Finished installsyncsyncsyncexit","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Arch Linux","slug":"Linux/Arch-Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Arch-Linux/"},{"name":"Scripts","slug":"Linux/Arch-Linux/Scripts","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Arch-Linux/Scripts/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Archlinux","slug":"Archlinux","permalink":"http://kiwi0093.github.io/wiki/tags/Archlinux/"}]},{"title":"整合型Archlinux安裝Script - 1.Before Start","slug":"Linux/Arch Linux/Scripts/1-intro","date":"2021-06-14T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Arch Linux/Scripts/1-intro/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Arch%20Linux/Scripts/1-intro/","excerpt":"前言 在Linux的世界裡,我最喜歡Arch系的系統,但是Arch Linux的安裝並不是很人性化所以我就想說自己寫script來進行安裝","text":"前言 在Linux的世界裡,我最喜歡Arch系的系統,但是Arch Linux的安裝並不是很人性化所以我就想說自己寫script來進行安裝 適用範圍 這是一個用在**VMware ESXi上的汎用型Arch linux**安裝script,基本預設條件如下 Intel CPU(Script裡面有AMD-ucode) 1~2GB的RAM 20GB以上的HDD空間 這個版本會做以下可選項目 *update 2021/06/15 因為搬回台灣用不上了所以刪除 Ver.K並不再維護該條目 Simple Arch linux 基本型Arch Linux,只安裝基本的系統工具 單NIC with固定MAC Address &amp; static IP Copy Live CD中的zsh設定 V2Ray Server Arch Linux with V2Ray without V2Ray 設定 單NIC with固定MAC Address &amp; Static IP Copy Live CD中的zsh設定 V2Ray Client Gateway Arch Linux with V2Ray without V2Ray 設定 無ipatable設定 雙NIC with固定MAC Address 外網可選PPPOE或Static IP 內網為固定IP Copy Live CD中的zsh設定 V2Ray Client Gateway Kiwi private version Arch Linux with V2Ray with現有Kiwi的相關設定(加密,私人使用) 直接套用Kiwi現有的iptable(加密,私人使用) 雙NIC with固定MAC Address 外網可選PPPOE或Static IP 內網為固定IP Copy Live CD中的zsh設定 Nextcloud Server(後面發現其實用docker比較快) Arch Linux With Nextcloud from package 單NIC with固定MAC Address &amp; Static IP Copy Live CD中的zsh設定 使用方式 用LiveCD開機後,確認網路是好的的狀態下執行 1zsh &lt;(curl -L -s https://Kiwi0093.gitub.io/script/Arch/arch.sh) *牆國天朝會用DNS污染來擋 https://raw.githubusercontent.com/ 所以,若在牆內使用可以先設定好/etc/hosts看看是不是可以克服 *後來我都改用https://Kiwi0093.github.io這個web直接放我的Script 參考資料 Arch Wiki - 非常詳細的Arch Wiki幾乎所有Archlinux的設定都有相關說明,而且很多都有中文翻譯非常好用 Archlinux Install Guide - 這是中文的官方安裝說明文件,算是安裝的最基礎,實際上就是Arch Wiki的一部分 Miro’s Blog - 這份Archlinux的安裝筆記寫得很不錯","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Arch Linux","slug":"Linux/Arch-Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Arch-Linux/"},{"name":"Scripts","slug":"Linux/Arch-Linux/Scripts","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Arch-Linux/Scripts/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Archlinux","slug":"Archlinux","permalink":"http://kiwi0093.github.io/wiki/tags/Archlinux/"}]},{"title":"整合型Archlinux安裝Script - 3.arch.sh說明","slug":"Linux/Arch Linux/Scripts/3-arch_sh","date":"2021-06-14T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Arch Linux/Scripts/3-arch_sh/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Arch%20Linux/Scripts/3-arch_sh/","excerpt":"使用前 先確認用LiveCD開起來的系統有網路 用host raw.githubusercontent.com確認是否可以連上script,不行的話請設定/etc/hosts或DNS設定 Script的直接位置如下： https://Kiwi0093.github.io/script/Arch/arch.sh 可以手動設定網路(若網路沒有DCHP可以跑的話) 123#利用ip指令設定網路連線ip address add $YOUR_IP/24 dev $your_devip route add default $Gateway_IP dev $your_dev","text":"使用前 先確認用LiveCD開起來的系統有網路 用host raw.githubusercontent.com確認是否可以連上script,不行的話請設定/etc/hosts或DNS設定 Script的直接位置如下： https://Kiwi0093.github.io/script/Arch/arch.sh 可以手動設定網路(若網路沒有DCHP可以跑的話) 123#利用ip指令設定網路連線ip address add $YOUR_IP/24 dev $your_devip route add default $Gateway_IP dev $your_dev Script內容 Script內容說明 基本定義 1234567891011#!/bin/sh#Parmeter Pre-Define#Color for warningCOLOR_W=&#x27;\\e[35m&#x27;#Color for descriptionCOLOR1=&#x27;\\e[94m&#x27;COLOR2=&#x27;\\e[32m&#x27;# Color for Highlight packageCOLOR_H1=&#x27;\\e[96m&#x27;COLOR_H2=&#x27;\\e[34m&#x27;NC=&#x27;\\e[0m&#x27; 這個script default只有顯示顏色是寫死的,可以參考Script語法說明裡面的說明修改顏色,或是自己修改的時候增加變數設定 *Update 2021/06/15 修改為四色,同Manjaro script 警示標語 12345678#Notice before useecho -e &quot;$&#123;COLOR_W&#125;=====================Warning=======================\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= Kiwi&#x27;s Arch linux Auto install script Ver.1.1 =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= This Script for Kiwi private use. =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= If you have any issue on usage, =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= Please DON&#x27;T Feedback to Kiwi =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= And you should take your own responsibility =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;===================================================\\n$&#123;NC&#125;&quot; 同Manjaro script加上警示標語,並且加上版號管控 設定時區 1234#start ntpecho -e &quot;$&#123;COLOR1&#125;Starting NTP Service$&#123;NC&#125;&quot;timedatectl set-ntp trueecho -e &quot;$&#123;COLOR2&#125;NTP Setup Completed$&#123;NC&#125;&quot; 設定Mirror list 1234567891011121314151617181920212223#Modify Mirrorlist to setting countryecho -n &quot;$&#123;COLOR1&#125;Please Select the country you want to set for mirror list\\n$&#123;NC&#125;$&#123;COLOR_H1&#125;C)China\\nT)Taiwan\\n*)whatever..I don&#x27;t care\\n$&#123;NC&#125;&quot;while :do read COUNTRY case $COUNTRY in C) echo -e &quot;$&#123;COLOR2&#125;Set China$&#123;NC&#125;&quot; sed -i &#x27;/Score/&#123;/China/!&#123;n;s/^/#/&#125;&#125;&#x27; /etc/pacman.d/mirrorlist break ;; T) echo -e &quot;$&#123;COLOR2&#125;SetTaiwan$&#123;NC&#125;&quot; sed -i &#x27;/Score/&#123;/Taiwan/!&#123;n;s/^/#/&#125;&#125;&#x27; /etc/pacman.d/mirrorlist break ;; *) echo -e &quot;$&#123;COLOR2&#125;Keep original Setting$&#123;NC&#125;&quot; break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 由於Archlinux內建沒有pacman-mirrors指令可以使用,所以只能採用官方的方式用sed去處理/etc/pacman.d/mirrorlist達到設定mirror list的內容 後面加上的pacman -Syyu主要是用來更新mirror list的使用所下的指令 *Update 2021/06/15 選項全數加上顏色tag增加目視辨識度 Fdisk &amp; Mount 123456789101112131415161718#Fdiskecho -e &quot;$&#123;COLOR1&#125;Partition your HDD please create sda1 for Data and sda2 for Swap.$&#123;NC&#125;&quot;fdisk /dev/sdaecho -e &quot;$&#123;COLOR2&#125;Partition Setup Completed$&#123;NC&#125;&quot;#Formatecho -e &quot;$&#123;COLOR1&#125;Format /dev/sda1 as EXT4 format$&#123;NC&#125;&quot;mkfs.ext4 /dev/sda1echo -e &quot;$&#123;COLOR2&#125;EXT4 formatting Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Format /dev/sda2 as Linux Swap$&#123;NC&#125;&quot;mkswap /dev/sda2echo -e &quot;$&#123;COLOR2&#125;Swap Formatting Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Mount /dev/sda1 to /mnt$&#123;NC&#125;&quot;mount /dev/sda1 /mntecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Mount Swap$&#123;NC&#125;&quot;swapon /dev/sda2echo -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 這裡是為什麼這個script無法成為萬用script的主要原因之一,因為這裡的**format**部份寫死了HDD分割後的定義與mount,使其失去彈性 加以因為所有使用這個script的場合都是在**VMware ESXi**下安裝Archlinux guest的關係,所以採用簡單的fdisk取代其他類型分割軟體,也是在這裡等於限死了後面的grub得安裝在MBR內而非現在流行的UFEI script中採用最常見但是效率不是最好的ext4格式作為這個archlinux的系統格式,喜歡的話可以自己改成自己喜歡的方式進行 安裝 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#Installecho -e &quot;$&#123;COLOR1&#125;Starting Install Archlinux into /mnt$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Please select your CPU vendor and Linux Kernel you want:\\n$&#123;NC&#125;$&#123;COLOR_H1&#125;1)Intel+Linux\\n2)Intel+Linux-LTS\\n3)Amd+Linux\\n4)Amd+Linux-LTS\\n5)Linux-LTS Kernel\\n*)Whatever, Normal Linux Kernel is good enough to me\\n$&#123;NC&#125;&quot;while :do read CPU case $CPU in 1) echo -e &quot;$&#123;COLOR2&#125;Linux Kernel＋Intel$&#123;NC&#125;&quot; pacman -Syyu pacstrap /mnt base linux linux-firmware vim zsh curl netctl intel-ucode grub dnsutils open-vm-tools vim net-tools openssh break ;; 2) echo -e &quot;$&#123;COLOR2&#125;Linux-LTS Kernel＋Intel$&#123;NC&#125;&quot; pacman -Syyu pacstrap /mnt base linux-lts linux-firmware vim zsh curl netctl intel-ucode grub dnsutils open-vm-tools vim net-tools openssh break ;; 3) echo -e &quot;$&#123;COLOR2&#125;Linux Kernel＋Amd$&#123;NC&#125;&quot; pacman -Syyu pacstrap /mnt base linux linux-firmware vim zsh curl netctl amd-ucode grub dnsutils open-vm-tools vim net-tools openssh break ;; 4) echo -e &quot;$&#123;COLOR2&#125;Linux-LTS Kernel＋Amd$&#123;NC&#125;&quot; pacman -Syyu pacstrap /mnt base linux-lts linux-firmware vim zsh curl netctl amd-ucode grub dnsutils open-vm-tools vim net-tools openssh break ;; 5) echo -e &quot;$&#123;COLOR2&#125;Linux-LTS Kernel$&#123;NC&#125;&quot; pacman -Syyu pacstrap /mnt base linux-lts linux-firmware vim zsh curl netctl grub dnsutils open-vm-tools vim net-tools openssh break ;; *) echo -e &quot;$&#123;COLOR2&#125;Linux Kernel$&#123;NC&#125;&quot; pacman -Syyu pacstrap /mnt base linux linux-firmware vim zsh curl netctl grub dnsutils open-vm-tools vim net-tools openssh break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 因為這個安裝動作是在Live CD的系統內替HDD安裝package,所以不能用**pacman指令只能用pacstrap**指令package安裝到指定的位置去 pacstrap /&lt;location&gt; package1 package2 .... 我們可以利用這個指令把本來要到archchroot內才安裝的程式中的共用部份直接放在這裡直接跑就好了,目前還沒實驗過全部的程式都放在這個地方跑,但是應該部會影響systemd的運作 替新系統建立fstab 1234#fstabecho -e &quot;$&#123;COLOR1&#125;Starting Gernerate fstab$&#123;NC&#125;&quot;genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstabecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 因為Archlinux沒有一個所謂的安裝程式會在HDD分割後自動建立fstab到新系統內,所以會使用genfstab指令建立後直接送到HDD內的*/etc/*內 Copy zsh的設定到新系統 1234#Copy Zshecho -e &quot;$&#123;COLOR1&#125;Starting Copy ZSH setting file to new Archlinux$&#123;NC&#125;&quot;cp -Rv /etc/zsh /mnt/etc/echo -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 因為我個人蠻喜歡Arch linux Live CD裡面預設的zshrc設定風格,所以就乾脆在安裝的時候會自動copy設定檔,以後所有透過這個安裝的Arch linux就可以有統一個shell sytle. 選擇fetch哪一個安裝script並且進入arch-root 1234567891011121314151617181920212223242526272829303132echo -n &quot;$&#123;COLOR1&#125;Please select which type you want$&#123;NC&#125;$&#123;COLOR_H1&#125;\\na)Simple Server\\nb)Nextcloud Server\\nc)V2Ray Server\\nd)V2Ray Gateway\\n*)I&#x27;m the best! let me do by my own!!\\n$&#123;NC&#125;&quot;while :do read SCRIPT case $SCRIPT in a) echo -e &quot;$&#123;COLOR2&#125;Simple Arch Linux$&#123;NC&#125;&quot; arch-chroot /mnt /bin/zsh &lt;(curl -L -s https://Kiwi0093.github.io/script/simple_arch.sh) break ;; b) echo -e &quot;$&#123;COLOR2&#125;Nextcloud Server$&#123;NC&#125;&quot; arch-chroot /mnt /bin/zsh &lt;(curl -L -s https://Kiwi0093.github.io/script/nextc_arch.sh) break ;; c) echo -e &quot;$&#123;COLOR2&#125;V2Ray Server$&#123;NC&#125;&quot; arch-chroot /mnt /bin/zsh &lt;(curl -L -s https://Kiwi0093.github.io/script/arch_v2ray.sh) break ;; d) echo -e &quot;$&#123;COLOR2&#125;V2Ray Gateway$&#123;NC&#125;&quot; arch-chroot /mnt /bin/zsh &lt;(curl -L -s https://Kiwi0093.github.io/script/arch_v2ray_gate.sh) break ;; *) echo -e &quot;$&#123;COLOR2&#125;Yes! you&#x27;re the chosen one!$&#123;NC&#125;&quot; arch-root /mnt /bin/zsh break ;; esacdone 由於Arch linux的安裝邏輯是 先在Live CD的OS內對HDD進行處理,然後把透過網路把新的archlinux的系統裝進HDD內,然後chroot到新的系統內,利用新的系統的東西,進行初步的設定與啟動設定等動作,最後再完全退出重開改以HDD進行開機這樣算是完成了一個新的系統的安裝 所以做成選項自動在進入arch-chroot後執行該跑得script,或是空的進入arch-chroot後讓人自己處理 *Update 2021/06/15 刪除Kiwi’s Private Router選項,因為用不到了 進入Arch-chroot與離開後自動重開機 12345echo -e &quot;$&#123;COLOR2&#125;Finished Installation, will reboot, Good luck$&#123;NC&#125;&quot;# Rebootecho -e &quot;$&#123;COLOR2&#125;Rebooting...$&#123;NC&#125;&quot;reboot 完整內容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163#!/bin/sh#Parmeter Pre-Define#Color for warningCOLOR_W=&#x27;\\e[35m&#x27;#Color for descriptionCOLOR1=&#x27;\\e[94m&#x27;COLOR2=&#x27;\\e[32m&#x27;# Color for Highlight packageCOLOR_H1=&#x27;\\e[96m&#x27;COLOR_H2=&#x27;\\e[34m&#x27;NC=&#x27;\\e[0m&#x27;#Notice before useecho -e &quot;$&#123;COLOR_W&#125;=====================Warning=======================\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= Kiwi&#x27;s Arch linux Auto install script Ver.1.1 =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= This Script for Kiwi private use. =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= If you have any issue on usage, =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= Please DON&#x27;T Feedback to Kiwi =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= And you should take your own responsibility =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;===================================================\\n$&#123;NC&#125;&quot;#start ntpecho -e &quot;$&#123;COLOR1&#125;Starting NTP Service$&#123;NC&#125;&quot;timedatectl set-ntp trueecho -e &quot;$&#123;COLOR2&#125;NTP Setup Completed$&#123;NC&#125;&quot;#Modify Mirrorlist to setting countryecho -n &quot;$&#123;COLOR1&#125;Please Select the country you want to set for mirror list\\n$&#123;NC&#125;$&#123;COLOR_H1&#125;C)China\\nT)Taiwan\\n*)whatever..I don&#x27;t care\\n$&#123;NC&#125;&quot;while :do read COUNTRY case $COUNTRY in C) echo -e &quot;$&#123;COLOR2&#125;Set China$&#123;NC&#125;&quot; sed -i &#x27;/Score/&#123;/China/!&#123;n;s/^/#/&#125;&#125;&#x27; /etc/pacman.d/mirrorlist break ;; T) echo -e &quot;$&#123;COLOR2&#125;SetTaiwan$&#123;NC&#125;&quot; sed -i &#x27;/Score/&#123;/Taiwan/!&#123;n;s/^/#/&#125;&#125;&#x27; /etc/pacman.d/mirrorlist break ;; *) echo -e &quot;$&#123;COLOR2&#125;Keep original Setting$&#123;NC&#125;&quot; break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#Fdiskecho -e &quot;$&#123;COLOR1&#125;Partition your HDD please create sda1 for Data and sda2 for Swap.$&#123;NC&#125;&quot;fdisk /dev/sdaecho -e &quot;$&#123;COLOR2&#125;Partition Setup Completed$&#123;NC&#125;&quot;#Formatecho -e &quot;$&#123;COLOR1&#125;Format /dev/sda1 as EXT4 format$&#123;NC&#125;&quot;mkfs.ext4 /dev/sda1echo -e &quot;$&#123;COLOR2&#125;EXT4 formatting Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Format /dev/sda2 as Linux Swap$&#123;NC&#125;&quot;mkswap /dev/sda2echo -e &quot;$&#123;COLOR2&#125;Swap Formatting Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Mount /dev/sda1 to /mnt$&#123;NC&#125;&quot;mount /dev/sda1 /mntecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Mount Swap$&#123;NC&#125;&quot;swapon /dev/sda2echo -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#Installecho -e &quot;$&#123;COLOR1&#125;Starting Install Archlinux into /mnt$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Please select your CPU vendor and Linux Kernel you want:\\n$&#123;NC&#125;$&#123;COLOR_H1&#125;1)Intel+Linux\\n2)Intel+Linux-LTS\\n3)Amd+Linux\\n4)Amd+Linux-LTS\\n5)Linux-LTS Kernel\\n*)Whatever, Normal Linux Kernel is good enough to me\\n$&#123;NC&#125;&quot;while :do read CPU case $CPU in 1) echo -e &quot;$&#123;COLOR2&#125;Linux Kernel＋Intel$&#123;NC&#125;&quot; pacman -Syyu pacstrap /mnt base linux linux-firmware vim zsh curl netctl intel-ucode grub dnsutils open-vm-tools vim net-tools openssh break ;; 2) echo -e &quot;$&#123;COLOR2&#125;Linux-LTS Kernel＋Intel$&#123;NC&#125;&quot; pacman -Syyu pacstrap /mnt base linux-lts linux-firmware vim zsh curl netctl intel-ucode grub dnsutils open-vm-tools vim net-tools openssh break ;; 3) echo -e &quot;$&#123;COLOR2&#125;Linux Kernel＋Amd$&#123;NC&#125;&quot; pacman -Syyu pacstrap /mnt base linux linux-firmware vim zsh curl netctl amd-ucode grub dnsutils open-vm-tools vim net-tools openssh break ;; 4) echo -e &quot;$&#123;COLOR2&#125;Linux-LTS Kernel＋Amd$&#123;NC&#125;&quot; pacman -Syyu pacstrap /mnt base linux-lts linux-firmware vim zsh curl netctl amd-ucode grub dnsutils open-vm-tools vim net-tools openssh break ;; 5) echo -e &quot;$&#123;COLOR2&#125;Linux-LTS Kernel$&#123;NC&#125;&quot; pacman -Syyu pacstrap /mnt base linux-lts linux-firmware vim zsh curl netctl grub dnsutils open-vm-tools vim net-tools openssh break ;; *) echo -e &quot;$&#123;COLOR2&#125;Linux Kernel$&#123;NC&#125;&quot; pacman -Syyu pacstrap /mnt base linux linux-firmware vim zsh curl netctl grub dnsutils open-vm-tools vim net-tools openssh break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#fstabecho &quot;$&#123;COLOR1&#125;Starting Gernerate fstab$&#123;NC&#125;&quot;genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstabecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#Copy Zshecho &quot;$&#123;COLOR1&#125;Starting Copy ZSH setting file to new Archlinux$&#123;NC&#125;&quot;cp -Rv /etc/zsh /mnt/etc/echo -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -n &quot;$&#123;COLOR1&#125;Please select which type you want$&#123;NC&#125;$&#123;COLOR_H1&#125;\\na)Simple Server\\nb)Nextcloud Server\\nc)V2Ray Server\\nd)V2Ray Gateway\\n*)I&#x27;m the best! let me do by my own!!\\n$&#123;NC&#125;&quot;while :do read SCRIPT case $SCRIPT in a) echo -e &quot;$&#123;COLOR2&#125;Simple Arch Linux$&#123;NC&#125;&quot; arch-chroot /mnt /bin/zsh &lt;(curl -L -s https://Kiwi0093.github.io/script/simple_arch.sh) break ;; b) echo -e &quot;$&#123;COLOR2&#125;Nextcloud Server$&#123;NC&#125;&quot; arch-chroot /mnt /bin/zsh &lt;(curl -L -s https://Kiwi0093.github.io/script/nextc_arch.sh) break ;; c) echo -e &quot;$&#123;COLOR2&#125;V2Ray Server$&#123;NC&#125;&quot; arch-chroot /mnt /bin/zsh &lt;(curl -L -s https://Kiwi0093.github.io/script/arch_v2ray.sh) break ;; d) echo -e &quot;$&#123;COLOR2&#125;V2Ray Gateway$&#123;NC&#125;&quot; arch-chroot /mnt /bin/zsh &lt;(curl -L -s https://Kiwi0093.github.io/script/arch_v2ray_gate.sh) break ;; *) echo -e &quot;$&#123;COLOR2&#125;Yes! you&#x27;re the chosen one!$&#123;NC&#125;&quot; arch-root /mnt /bin/zsh break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;Finished Installation, will reboot, Good luck$&#123;NC&#125;&quot;# Rebootecho -e &quot;$&#123;COLOR2&#125;Rebooting...$&#123;NC&#125;&quot;reboot","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Arch Linux","slug":"Linux/Arch-Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Arch-Linux/"},{"name":"Scripts","slug":"Linux/Arch-Linux/Scripts","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Arch-Linux/Scripts/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Archlinux","slug":"Archlinux","permalink":"http://kiwi0093.github.io/wiki/tags/Archlinux/"}]},{"title":"整合型Archlinux安裝Script - 4.simple_arch.sh說明","slug":"Linux/Arch Linux/Scripts/4-simple_arch","date":"2021-06-14T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Arch Linux/Scripts/4-simple_arch/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Arch%20Linux/Scripts/4-simple_arch/","excerpt":"使用前 這個script預設是自動帶出來跑的,但是也是可以手動自己跑 Script的直接位置如下： https://Kiwi0093.github.io/script/Arch/simple_arch.sh","text":"使用前 這個script預設是自動帶出來跑的,但是也是可以手動自己跑 Script的直接位置如下： https://Kiwi0093.github.io/script/Arch/simple_arch.sh Script內容 Script內容說明 基本定義 1234567891011#!/bin/sh#Parmeter Pre-Define#Color for warningCOLOR_W=&#x27;\\e[35m&#x27;#Color for descriptionCOLOR1=&#x27;\\e[94m&#x27;COLOR2=&#x27;\\e[32m&#x27;# Color for Highlight packageCOLOR_H1=&#x27;\\e[96m&#x27;COLOR_H2=&#x27;\\e[34m&#x27;NC=&#x27;\\e[0m&#x27; 定義Script中字串的顏色 *Update 2021/06/15 統一改為四色 增加警語 123456789#Notice before useecho -e &quot;$&#123;COLOR_W&#125;=====================Warning=======================\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= Kiwi&#x27;s Arch linux Auto install script Ver.1.1 =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= Simple Arch linus Install script Ver.1.1 =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= This Script for Kiwi private use. =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= If you have any issue on usage, =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= Please DON&#x27;T Feedback to Kiwi =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= And you should take your own responsibility =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;===================================================\\n$&#123;NC&#125;&quot; 設定時區與硬體時間 1234567891011121314151617181920212223242526#change Timezoneecho -e &quot;$&#123;COLOR1&#125;Please select your time zone\\n$&#123;NC&#125;$&#123;COLOR_H1&#125;1)Taipei\\n2)Shanghai\\n*)Whatever..I don&#x27;t care\\n$&#123;NC&#125;&quot;while :do read ZONE case $ZONE in 1) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Taipei$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime hwclock --systohc --utc break ;; 2) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Shanghai$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime hwclock --systohc --utc break ;; *) echo -e &quot;$&#123;COLOR1&#125;Nobody cares the local time!!$&#123;NC&#125;&quot; hwclock --systohc --utc break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 設定Locale確認terminal是UTF8(不然Tmux不能動) 12345678910#locale-gen to add en_US &amp; zh_TWecho -e &quot;$&#123;COLOR1&#125;Setting local file$&#123;NC&#125;&quot;echo &quot;en_US.UTF-8 UTF-8&quot; &gt;&gt; /etc/locale.genecho &quot;zh_TW.UTF-8 UTF-8&quot; &gt;&gt; /etc/locale.genecho -e &quot;$&#123;COLOR1&#125;Generate locale.conf$&#123;NC&#125;&quot;locale-genecho -e &quot;$&#123;COLOR1&#125;Setting locale.conf$&#123;NC&#125;&quot;echo LANG=en_US.UTF-8 &gt; /etc/locale.confexport LANG=en_US.UTF-8echo -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 網路設定 123456789101112131415161718192021222324252627282930#Hostnameecho -e &quot;$&#123;COLOR1&#125;Please input your hostname\\n$&#123;NC&#125;&quot;read HOSTNAMEecho $&#123;HOSTNAME&#125; &gt; /etc/hostnameecho &quot;127.0.0.1 localhost $&#123;HOSTNAME&#125;&quot; &gt;&gt; /etc/hostsecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Define your NIC by Mac address$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Please input your MAC Address(need to be lowcase):\\n$&#123;NC&#125;&quot;read OUTSIDEecho &#x27;SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, ATTR&#123;address&#125;==&quot;&#x27;$&#123;OUTSIDE&#125;&#x27;&quot;, NAME=&quot;EXT0&quot;&#x27; &gt; /etc/udev/rules.d/10-network.rulesecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Define your IP for EXT0:$&#123;NC&#125;&quot;echo &quot;Description=&#x27;EXT0 IP SETTING&#x27;&quot; &gt; /etc/netctl/EXT0.serviceecho &quot;Interface=EXT0&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho &quot;Connection=ethernet&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho &quot;IP=static&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your IP address:\\n$&#123;NC&#125;&quot;read EXT_IPecho &quot;Address=(&#x27;$&#123;EXT_IP&#125;/24&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your Gateway IP address:\\n$&#123;NC&#125;&quot;read GATE_IPecho &quot;Gateway=&#x27;$&#123;GATE_IP&#125;&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your DNS IP address:\\n$&#123;NC&#125;&quot;read DNS_IPecho &quot;DNS=(&#x27;$&#123;DNS_IP&#125;&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -e &quot;$&#123;COLOR2&#125;Enable EXT0$&#123;NC&#125;&quot;netctl enable EXT0.serviceecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot; 這個設定是利用固定的**Mac Address來定義NIC Interface的名字為EXT0** MAC address記得要用全小寫不然會有問題 這個設定是使用netctl進行的 變更root密碼與建立其他帳號 123456789101112131415161718#Root Passwordecho -e &quot;$&#123;COLOR1&#125;Set your root password$&#123;NC&#125;&quot;passwdchsh -s /bin/zshecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#add Userecho -e &quot;$&#123;COLOR1&#125;Add user account:$&#123;NC&#125;&quot;echo -n &quot;$&#123;COLOR1&#125;What ID you want:$&#123;NC&#125;&quot;read YOURIDuseradd -m -g root -s /bin/zsh $&#123;YOURID&#125;passwd $&#123;YOURID&#125;echo -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Add $YOURID into sudo list$&#123;NC&#125;&quot;pacman -Syu sudoecho &quot;$&#123;YOURID&#125; ALL=(ALL) ALL&quot; &gt;&gt; /etc/sudoersecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 安裝程式 12345#install Toolsecho -e &quot;$&#123;COLOR1&#125;Install Packages$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;screen$&#123;NC&#125;&quot;pacman -Sy screenecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 因為是Simple Arch,所以預設只裝了screen 安裝Bootloader 12345#install Bootloaderecho -e &quot;$&#123;COLOR1&#125;Install grub Boot Loader into /dev/sda$&#123;NC&#125;&quot;grub-install --target=i386-pc /dev/sdagrub-mkconfig -o /boot/grub/grub.cfgecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 同步後離開Arch-chroot 12345#Finished installsyncsyncsyncexit 完整版的script 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127#!/bin/sh#Parmeter Pre-Define#Color for warningCOLOR_W=&#x27;\\e[35m&#x27;#Color for descriptionCOLOR1=&#x27;\\e[94m&#x27;COLOR2=&#x27;\\e[32m&#x27;# Color for Highlight packageCOLOR_H1=&#x27;\\e[96m&#x27;COLOR_H2=&#x27;\\e[34m&#x27;NC=&#x27;\\e[0m&#x27;#Notice before useecho -e &quot;$&#123;COLOR_W&#125;=====================Warning=======================\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= Kiwi&#x27;s Arch linux Auto install script Ver.1.1 =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= Simple Arch linus Install script Ver.1.1 =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= This Script for Kiwi private use. =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= If you have any issue on usage, =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= Please DON&#x27;T Feedback to Kiwi =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= And you should take your own responsibility =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;===================================================\\n$&#123;NC&#125;&quot;#change Timezoneecho -e &quot;$&#123;COLOR1&#125;Please select your time zone\\n$&#123;NC&#125;$&#123;COLOR_H1&#125;1)Taipei\\n2)Shanghai\\n*)Whatever..I don&#x27;t care\\n$&#123;NC&#125;&quot;while :do read ZONE case $ZONE in 1) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Taipei$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime hwclock --systohc --utc break ;; 2) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Shanghai$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime hwclock --systohc --utc break ;; *) echo -e &quot;$&#123;COLOR1&#125;Nobody cares the local time!!$&#123;NC&#125;&quot; hwclock --systohc --utc break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#locale-gen to add en_US &amp; zh_TWecho -e &quot;$&#123;COLOR1&#125;Setting local file$&#123;NC&#125;&quot;echo &quot;en_US.UTF-8 UTF-8&quot; &gt;&gt; /etc/locale.genecho &quot;zh_TW.UTF-8 UTF-8&quot; &gt;&gt; /etc/locale.genecho -e &quot;$&#123;COLOR1&#125;Generate locale.conf$&#123;NC&#125;&quot;locale-genecho -e &quot;$&#123;COLOR1&#125;Setting locale.conf$&#123;NC&#125;&quot;echo LANG=en_US.UTF-8 &gt; /etc/locale.confexport LANG=en_US.UTF-8echo -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#Hostnameecho -e &quot;$&#123;COLOR1&#125;Please input your hostname\\n$&#123;NC&#125;&quot;read HOSTNAMEecho $&#123;HOSTNAME&#125; &gt; /etc/hostnameecho &quot;127.0.0.1 localhost $&#123;HOSTNAME&#125;&quot; &gt;&gt; /etc/hostsecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Define your NIC by Mac address$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Please input your MAC Address(need to be lowcase):\\n$&#123;NC&#125;&quot;read OUTSIDEecho &#x27;SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, ATTR&#123;address&#125;==&quot;&#x27;$&#123;OUTSIDE&#125;&#x27;&quot;, NAME=&quot;EXT0&quot;&#x27; &gt; /etc/udev/rules.d/10-network.rulesecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Define your IP for EXT0:$&#123;NC&#125;&quot;echo &quot;Description=&#x27;EXT0 IP SETTING&#x27;&quot; &gt; /etc/netctl/EXT0.serviceecho &quot;Interface=EXT0&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho &quot;Connection=ethernet&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho &quot;IP=static&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your IP address:\\n$&#123;NC&#125;&quot;read EXT_IPecho &quot;Address=(&#x27;$&#123;EXT_IP&#125;/24&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your Gateway IP address:\\n$&#123;NC&#125;&quot;read GATE_IPecho &quot;Gateway=&#x27;$&#123;GATE_IP&#125;&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your DNS IP address:\\n$&#123;NC&#125;&quot;read DNS_IPecho &quot;DNS=(&#x27;$&#123;DNS_IP&#125;&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -e &quot;$&#123;COLOR2&#125;Enable EXT0$&#123;NC&#125;&quot;netctl enable EXT0.serviceecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot;#Root Passwordecho -e &quot;$&#123;COLOR1&#125;Set your root password$&#123;NC&#125;&quot;passwdchsh -s /bin/zshecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#add Userecho -e &quot;$&#123;COLOR1&#125;Add user account:$&#123;NC&#125;&quot;echo -n &quot;$&#123;COLOR1&#125;What ID you want:$&#123;NC&#125;&quot;read YOURIDuseradd -m -g root -s /bin/zsh $&#123;YOURID&#125;passwd $&#123;YOURID&#125;echo -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Add $YOURID into sudo list$&#123;NC&#125;&quot;pacman -Syu sudoecho &quot;$&#123;YOURID&#125; ALL=(ALL) ALL&quot; &gt;&gt; /etc/sudoersecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#install Toolsecho -e &quot;$&#123;COLOR1&#125;Install Packages$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;tmux$&#123;NC&#125;&quot;pacman -Syu tmuxecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#install Bootloaderecho -e &quot;$&#123;COLOR1&#125;Install grub Boot Loader into /dev/sda$&#123;NC&#125;&quot;grub-install --target=i386-pc /dev/sdagrub-mkconfig -o /boot/grub/grub.cfgecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#Finished installsyncsyncsyncexit","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Arch Linux","slug":"Linux/Arch-Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Arch-Linux/"},{"name":"Scripts","slug":"Linux/Arch-Linux/Scripts","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Arch-Linux/Scripts/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Archlinux","slug":"Archlinux","permalink":"http://kiwi0093.github.io/wiki/tags/Archlinux/"}]},{"title":"BATTLETECH - Mod武器修改技巧","slug":"Game/PC/Battletech/1-weapon_modify","date":"2021-05-18T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Game/PC/Battletech/1-weapon_modify/","permalink":"http://kiwi0093.github.io/wiki/wiki/Game/PC/Battletech/1-weapon_modify/","excerpt":"Mod 這個遊戲的Mod在Nexus mods裡面就有","text":"Mod 這個遊戲的Mod在Nexus mods裡面就有 Modify 修改武器參數,可隨意複製後修改 改入商店作法 使用Save Editor直接修改入Save檔套用 複製武器/裝備 檔名不能重複,可直接複製想要的類型後加**_數字** 修改檔案 武器設定檔是json檔案,用notepad++ 範例如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&#123; &quot;Category&quot; : &quot;Ballistic&quot;, --類型 &quot;Type&quot; : &quot;Autocannon&quot;, &quot;WeaponSubType&quot; : &quot;UAC20&quot;, &quot;MinRange&quot; : 0, --最短有效距離 &quot;MaxRange&quot; : 400, --最長有效距離 &quot;RangeSplit&quot; : [ 180, 180, 270 ], &quot;AmmoCategory&quot; : &quot;AC20&quot;, --彈藥類型 &quot;StartingAmmoCapacity&quot; : 0, --初始彈藥量 &quot;HeatGenerated&quot; : 48, --熱量 &quot;Damage&quot; : 200, --傷害 &quot;OverheatedDamageMultiplier&quot; : 0, &quot;EvasiveDamageMultiplier&quot; : 0, &quot;EvasivePipsIgnored&quot; : 0, &quot;DamageVariance&quot; : 0, &quot;HeatDamage&quot; : 0, &quot;StructureDamage&quot; : 0, &quot;AccuracyModifier&quot; : 0, &quot;CriticalChanceMultiplier&quot; : 1, &quot;AOECapable&quot; : false, &quot;IndirectFireCapable&quot; : false, &quot;RefireModifier&quot; : 0, &quot;ShotsWhenFired&quot; : 10, &quot;ProjectilesPerShot&quot; : 3, --每次開槍會有幾顆子彈 &quot;AttackRecoil&quot; : 4, --後座力 &quot;Instability&quot; : 1, --不穩定性 &quot;WeaponEffectID&quot; : &quot;WeaponEffect-Weapon_AC20_Ultra&quot;, &quot;Description&quot; : &#123; &quot;Cost&quot; : 650000, &quot;Rarity&quot; : 99, &quot;Purchasable&quot; : true, &quot;Manufacturer&quot; : &quot;Kiwi Tech&quot;, --顯示的製造商可以任意修改 &quot;Model&quot; : &quot;Shredder Autocannon&quot;, &quot;UIName&quot; : &quot;UAC/20 Ver.K&quot;, --顯示的武器名稱 &quot;Id&quot; : &quot;Weapon_Autocannon_UAC20_4-Kali_Yama&quot;, --這個要同檔名 &quot;Name&quot; : &quot;UAC/20 Ver.K&quot;, --同UIName &quot;Details&quot; : &quot;Delivering unparalleled damage output, Ultra AC/20s issue nightmarish volleys of devastation. Like all Ultra Autocannon weaponry, UAC/20s suffer from substantial recoil effects from firing and consume two ammo per attack.&quot;, --細項可以任意編輯 &quot;Icon&quot; : &quot;uixSvgIcon_weapon_Ballistic&quot; &#125;, &quot;BonusValueA&quot; : &quot;+ 50 Dmg.&quot;, --額外效果 &quot;BonusValueB&quot; : &quot;- 3000 Heat / Turn&quot;, --額外效果 &quot;ComponentType&quot; : &quot;Weapon&quot;, &quot;ComponentSubType&quot; : &quot;Weapon&quot;, &quot;PrefabIdentifier&quot; : &quot;uac5&quot;, &quot;InventorySize&quot; : 1, --佔多少格子 &quot;Tonnage&quot; : 20, --裝備重量 &quot;AllowedLocations&quot; : &quot;All&quot;, &quot;DisallowedLocations&quot; : &quot;All&quot;, &quot;CriticalComponent&quot; : false, &quot;statusEffects&quot; : [ ], &quot;ComponentTags&quot; : &#123; &quot;items&quot; : [ &quot;component_type_variant&quot;, &quot;component_type_variant2&quot;, &quot;range_standard&quot;, &quot;component_type_lostech&quot;, &quot;BLACKLISTED&quot; ], &quot;tagSetSourceFile&quot; : &quot;&quot; &#125;&#125; Save Editor 使用這個mod","categories":[{"name":"Game","slug":"Game","permalink":"http://kiwi0093.github.io/wiki/categories/Game/"},{"name":"PC","slug":"Game/PC","permalink":"http://kiwi0093.github.io/wiki/categories/Game/PC/"},{"name":"Battletech","slug":"Game/PC/Battletech","permalink":"http://kiwi0093.github.io/wiki/categories/Game/PC/Battletech/"}],"tags":[{"name":"Game","slug":"Game","permalink":"http://kiwi0093.github.io/wiki/tags/Game/"},{"name":"PC-Game","slug":"PC-Game","permalink":"http://kiwi0093.github.io/wiki/tags/PC-Game/"},{"name":"SLG","slug":"SLG","permalink":"http://kiwi0093.github.io/wiki/tags/SLG/"}]},{"title":"Manajro Auto configure script - Intro","slug":"Linux/Manjaro/Scripts/1-autoinstall","date":"2020-12-24T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Manjaro/Scripts/1-autoinstall/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Manjaro/Scripts/1-autoinstall/","excerpt":"前言 老實說這個script的實用性不是很高,充其量是拿來恢復自己使用的Manjaro-KDE,即使如此,後來還是發現因為會改來改去,可能後面拆成多個小的script還比較實在","text":"前言 老實說這個script的實用性不是很高,充其量是拿來恢復自己使用的Manjaro-KDE,即使如此,後來還是發現因為會改來改去,可能後面拆成多個小的script還比較實在 基本介紹 使用指令 1bash &lt;(curl -L https://Kiwi0093.github.io/script/Manajro/manjaro.sh) 這裡還是使用萬用的shell &lt;(Curl -L URL/script)語法來跑,試過改用curl -L URL/script | shell來跑的結果就是script中的一些等待輸入都會有問題,詳細細節我也不是懂為什麼,反正就是盡量不要用pipe去跑shell script比較不會有問題 內容介紹 這個script的內容主要是讓我可以快速的把自己在用的Manjro環境快速的port到新裝的機器或是VM上,減少重複設定調整工作環境的作業,這份主要會先說明整體會裝上什麼跟會產生什麼,詳細的script後面會分段來說明 Terminator : 一個console程式支援分頁使用,上次看到Garuda裡面用的terminal看起來也蠻好看的若有找到其他更順手的會把他換掉 PowerLevel10k : 這個基本上就是個terminal美化工具,但是在企鵝下使用terminal的機率那麼高弄的漂漂亮亮的賞心悅目不好嗎？,基本就是powerlevel10k加上一些nerd font,最多還會在加個neofetch V2ray系列 : 因為身在牆國天朝所以這個變成必裝的程式(其實在只在宿舍內使用的機器到是可以不裝因為已經在gateway處理掉了)主要是裝Qv2ray跟V2ray用圖形界面來控制 '*'其實要再更Nerdy一點的話可以拋棄圖形界面只用單純的v2ray+config.json搭配systemed來跑也是可以的…不過Desktop嘛…還是弄個GUI比較應景 不過這幾次試跑都發現安裝Qv2ray很浪費時間…還常常error…可能再多幾次讓我沒耐心了就會拿掉(或是做成選項！？) Rambox : 作為一個有朋友的人(這個毋庸置疑…),我還是會需要一些IM,以及Mail的client,Rambox目前算是用起來很順的整合型界面,(YES,他只是整合了各種web界面的東西) Brave : 因為我不是那麼喜歡firefox所以會改用Brave Blog/Wiki寫作系列 : 這裡面包含了Typora - 我目前最喜歡的Markdown編輯器, Git &amp; Github-Desktop - 我知道其實CLI的git就應該夠用了,但是GUI的Githhub-Desktop其實也是很好用的尤其是沒有把git的CLI指令弄的那麼熟的我來說…,另外還要加上Typora上傳圖片需要的Picgo Putty : 其實某程度上直接使用terminal來跑ssh client是比Linux版的Putty好用的,但是這樣pkk的key就沒辦法直接用,加上要開ssh tunel的話還是寫好設定的Putty比較方便所以我都會裝上但是大概只有連回老家的時候才會用 Remmina : 這個其實還要裝上freerdp才能直接跑rdp,我基本上都是用這玩意+ssh tunel連回老家的P2P windows Filezilla : 其實這個東西現在已經沒什麼用了,因為還會採取FTP/SFTP傳輸的事情少了…但是還是會習慣性的裝上以備不時之需 gnome-pie : 這個是個Launcher,但是看起來很炫所以我現在很喜歡會放在必安裝的清單中使用 fcitx系列 : 作為一個非英語母語的人,我絕對需要非英語的輸入法…所以我一般會用這個裝上chewing(酷音)以及Mozc來應付我的中日文打字需求… teamviewer : 其實我沒有很常用teamviewer,只是會習慣性裝上以備不時之需 VMware Workstation pro (optional) : 這個我做成選項,因為我有些機器是裝在VM裡面的就不搞VM中的VM這種把戲了… KDE 個人趣味小東西 (optional) ： 這個其實就是安裝一些Widget或是開機動畫等…後面可能會連多重開機的主題都放進去… 結論 雖然一開始是我自己用的私人script,不過我還是會盡量寫成可以通用(沒什麼意義就是了),然後把個人色彩很強的東西盡量都做成optional","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Manjaro","slug":"Linux/Manjaro","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Manjaro/"},{"name":"Scripts","slug":"Linux/Manjaro/Scripts","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Manjaro/Scripts/"}],"tags":[{"name":"Linunx","slug":"Linunx","permalink":"http://kiwi0093.github.io/wiki/tags/Linunx/"},{"name":"Manjaro","slug":"Manjaro","permalink":"http://kiwi0093.github.io/wiki/tags/Manjaro/"}]},{"title":"Manajro Auto configure script - script","slug":"Linux/Manjaro/Scripts/2-Installscript","date":"2020-12-24T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Manjaro/Scripts/2-Installscript/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Manjaro/Scripts/2-Installscript/","excerpt":"前言 這個script就跟自動安裝一樣其實用處不大,主要還是拿來當作shell script的寫作練習","text":"前言 這個script就跟自動安裝一樣其實用處不大,主要還是拿來當作shell script的寫作練習 基本定義與警告 1234567891011121314151617181920#!/bin/sh#Parmeter Pre-Define#Color for warningCOLOR_W=&#x27;\\e[35m&#x27;#Color for descriptionCOLOR1=&#x27;\\e[94m&#x27;COLOR2=&#x27;\\e[32m&#x27;# Color for Highlight packageCOLOR_H1=&#x27;\\e[96m&#x27;COLOR_H2=&#x27;\\e[34m&#x27;NC=&#x27;\\e[0m&#x27;clear#Notice before useecho -e &quot;$&#123;COLOR_W&#125;=====================Warning=====================\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= This Script for Kiwi private use. =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= If you have any issue on usage, =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= Please DON&#x27;T Feedback to Kiwi =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= And you should take your own responsibility =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;=================================================\\n$&#123;NC&#125;&quot; 這次我把顏色分成五種(很厚工吧),然後加上一個警告標語在最前面,我想後面應該會把所有的script都重新以這個表頭開始重寫,這樣看起來比較像一回事 Mirrorlist定義與套用(加上系統更新) 12345678910111213141516171819202122232425262728293031323334353637# Choose Country for pacman-mirrorsecho -e &quot;$&#123;COLOR1&#125;Please choose the loaction you want to set for Mirror\\n $&#123;COLOR_H&#125;C) China\\n T) Taiwan\\n L) Let me type what I want\\n F) Fastest Mirror from all country\\n Any other) Use Manjaro Default\\n &gt;$&#123;NC&#125;&quot;while :do read COUNTRY case $COUNTRY in C) echo -e &quot;$&#123;COLOR2&#125;Using China Mirrors$&#123;NC&#125;&quot; sudo pacman-mirrors -c China break ;; T) echo -e &quot;$&#123;COLOR2&#125;Using Taiwan Mirrors$&#123;NC&#125;&quot; sudo pacman-mirrors -c Taiwan break ;; L) echo -e &quot;$&#123;COLOR2&#125;Please input coutry you want (ie:United_States)\\n$&#123;NC&#125;&quot; read COUNTRY_INPUT sudo pacman-mirrors -c $COUNTRY_INPUT break ;; F) echo -e &quot;$&#123;COLOR2&#125;Use All Country for Fastest Mirror$&#123;NC&#125;&quot; sudo pacman-mirrors --fasttrack 3 break ;; *) echo -e &quot;$&#123;COLOR2&#125;Use Default setting$&#123;NC&#125;&quot; break ;; esacdone# Apply Mirrorlist and update systemecho -e &quot;$&#123;COLOR1&#125;Update your system$&#123;NC&#125;&quot;sudo pacman -Syyu 由於Manjaro有pacman-mirrors可以用,所以就跟**Arch Linux**的Script不同可以直接用指令,這裡我還加上了四種選項 牆國天朝(現在物理上待在這裡所以肯定要有這個選項) 台灣(畢竟是老家還是放一下) 自己輸入(這算是要是有要用的其他人可以靠手打或是我有時候手賤…) 依照速度排序全世界前三快的機器,(理論上這個最好,不用分國家,但是…一套跑下來很耗時間…) 使用原來的設定啥都不改 接著就是一個單純的sudo pacman -Syyu利用-Syy更新Mirrorlist,就算不想upgrade系統也得跑一下sudo pacman -Syy不然前面弄mirrorlist弄半天就是浪費時間 安裝基本軟體 123# Install Basic toolsecho -e &quot;$&#123;COLOR1&#125;Install Packages$&#123;NC&#125;&quot;sudo pacman -S --noconfirm yay gcc make patch fakeroot binutils neofetch vim terminator pkgconf fcitx fcitx-qt5 fcitx-configtool fcitx-chewing fcitx-mozc zsh zsh-syntax-highlighting zsh-autosuggestions zsh-theme-powerlevel10k awesome-terminal-fonts v2ray putty filezilla remmina freerdp git 如同簡介說的我會把一些常用的東西都裝上會放在這個secssion主要是因為這些都是直接用sudo pacman就可以很快裝上的東西 安裝**ttf-meslo-nerd-font-powerlevel10k** 123456789101112131415161718192021222324252627282930313233echo -e &quot;$&#123;COLOR1&#125;Do you need pre-download ttf files for $&#123;COLOR_H2&#125;ttf-meslo-nerd-font-powerlevel10k$&#123;NC&#125;\\n $&#123;COLOR_H1&#125;Y) Yes\\n N) No need.\\n &gt;$&#123;NC&#125;&quot;while :do read TTF case $TTF in Y) echo -e &quot;$&#123;COLOR2&#125;Download TTF files for install Issue$&#123;NC&#125;&quot; mkdir ~/.cache/yay/ttf-meslo-nerd-font-powerlevel10k curl -o ~/.cache/yay/ttf-meslo-nerd-font-powerlevel10k/MesloLGS-NF-Bold-1.000.ttf https://Kiwi0093.github.io/script/Manjaro/MesloLGS-NF-Bold-1.000.ttf curl -o ~/.cache/yay/ttf-meslo-nerd-font-powerlevel10k/MesloLGS-NF-Bold-Italic-1.000.ttf https://Kiwi0093.github.io/script/Manjaro/MesloLGS-NF-Bold-Italic-1.000.ttf curl -o ~/.cache/yay/ttf-meslo-nerd-font-powerlevel10k/MesloLGS-NF-Italic-1.000.ttf https://Kiwi0093.github.io/script/Manjaro/MesloLGS-NF-Italic-1.000.ttf curl -o ~/.cache/yay/ttf-meslo-nerd-font-powerlevel10k/MesloLGS-NF-Regular-1.000.ttf https://Kiwi0093.github.io/script/Manjaro/MesloLGS-NF-Regular-1.000.ttf yay -S --noconfirm ttf-meslo-nerd-font-powerlevel10k # Download Zeon.ttf &amp; Install echo -e &quot;$&#123;COLOR2&#125;Download &amp; Install Zeon font for Zeon Icon$&#123;NC&#125;&quot; sudo mkdir /usr/local/share/fonts/z sudo curl -o /usr/local/share/fonts/z/zeon.ttf https://Kiwi0093.github.io/script/Manjaro/zeon.ttf break ;; N) echo -e &quot;$&#123;COLOR2&#125;Normal Installation$&#123;NC&#125;&quot; yay -S --noconfirm ttf-meslo-nerd-font-powerlevel10k # Download Zeon.ttf &amp; Install echo -e &quot;$&#123;COLOR2&#125;Download &amp; Install Zeon font for Zeon Icon$&#123;NC&#125;&quot; sudo mkdir /usr/local/share/fonts/z sudo curl -o /usr/local/share/fonts/z/zeon.ttf https://Kiwi0093.github.io/script/Manjaro/zeon.ttf break ;; *) echo -e &quot;$&#123;COLOR_H1&#125;Please enter your choice Y or A or N$&#123;NC&#125;&quot; ;; esacdone 本來是很簡單的yay -S ttf-meslo-nerd-font-powerlevel10k就該搞定的,但是由於牆國天朝的網路特殊性很容易下載不下來安裝所需要的ttf檔案 所以才會採取預下載的方式先從script放置點(這裡要是連不上一開始就拿不到script可以跑) 至於這個nerd-font的用途就是當我在使用powerlevel10k的時候需要用到一些文字圖示來美化,所以需要這些font檔才能正確顯示 另外我也惡趣味的做了一個zeon.ttf裡面只有兩個字,就是我光榮ジオン公国＆ネオ ジオン的國徽自己用就不太管是不是合法使用圖像了 安裝yay才能裝的軟體 12# Install yay package echo -e &quot;$&#123;COLOR1&#125;Prepare to install package via yay$&#123;NC&#125;&quot; 因為用yay安裝程式通常需要比較長的下載時間跟compile時間所以我就把所有透過這個安裝的全部做成選項 Brave 1234567891011121314151617181920# Install Braveecho -e &quot;$&#123;COLOR1&#125;Do you want to install $&#123;COLOR_H2&#125;Brave-bin$&#123;NC&#125; for your browser?\\nIt should spend much time\\n $&#123;COLOR_H1&#125;Y) Yes\\n N) No please skip this \\n &gt;$&#123;NC&#125;&quot;while :do read BRAVE case $BRAVE in Y) echo -e &quot;$&#123;COLOR2&#125;Install Brave-bin via yay$&#123;NC&#125;&quot; yay -S --noconfirm brave-bin break ;; N) echo -e &quot;$&#123;COLOR2&#125;Skip Brave installation$&#123;NC&#125;&quot; break ;; *) echo -e &quot;$&#123;COLOR_H1&#125;Please enter your choice Y or A or N$&#123;NC&#125;&quot; ;; esacdone Qv2ray 1234567891011121314151617181920212223242526272829# Install Qv2rayecho -e &quot;$&#123;COLOR1&#125;Do you want to install $&#123;COLOR_H2&#125;Qv2ray$&#123;NC&#125;?\\nIt should spend much time\\n $&#123;COLOR_H1&#125;Y) Yes install via yay\\n A) Using AppImage version\\n N)No Need\\n &gt;$&#123;NC&#125;&quot;while :do read QV2RAY case $QV2RAY in Y) echo -e &quot;$&#123;COLOR2&#125;Install QV2Ray via yay$&#123;NC&#125;&quot; yay -S --noconfirm qv2ray break ;; A) echo -e &quot;$&#123;COLOR_H1&#125;Please enter Qv2ray Version(ie:2.6.3)$&#123;NC&#125;&quot; read Q_VERSION echo -e &quot;$&#123;COLOR2&#125;Download QV2Ray AppImage from Github$&#123;NC&#125;&quot; mkdir ~/Applications wget https://github.com/Qv2ray/Qv2ray/releases/download/v$&#123;Q_VERSION&#125;/Qv2ray.v$&#123;Q_VERSION&#125;.linux-x64.AppImage mv ./Qv2ray.v* ~/Applications/Qv2ray.v$&#123;Q_VERSION&#125;.linux-x64.AppImage break ;; N) echo -e &quot;$&#123;COLOR2&#125;Skip Qv2ray Installation$&#123;NC&#125;&quot; break ;; *) echo -e &quot;$&#123;COLOR_H1&#125;Please enter your choice Y or A or N$&#123;NC&#125;&quot; ;; esacdone 基於經驗,Qv2ray的安裝很容易會卡住很難裝,所以我就額外加了一個安裝AppImage版的作法 Teamviewer 1234567891011121314151617181920# Install Teamviewerecho -e &quot;$&#123;COLOR1&#125;Do you want to install $&#123;COLOR_H2&#125;Teamviewer$&#123;NC&#125;?\\nIt should spend much time\\n $&#123;COLOR_H1&#125;Y) Yes\\n N) No please skip this\\n &gt;$&#123;NC&#125;&quot;while :do read TEAM case $TEAM in Y) echo -e &quot;$&#123;COLOR2&#125;Install Teamviewer via yay$&#123;NC&#125;&quot; yay -S --noconfirm teamviewer break ;; N) echo -e &quot;$&#123;COLOR2&#125;Skip teamviewer Installation$&#123;NC&#125;&quot; break ;; *) echo -e &quot;$&#123;COLOR_H1&#125;Please enter your choice Y or A or N$&#123;NC&#125;&quot; ;; esacdone Typora 123456789101112131415161718192021222324252627282930313233343536373839# Install Typoraecho -e &quot;$&#123;COLOR1&#125;Do you want to install $&#123;COLOR_H2&#125;Typora$&#123;NC&#125;?\\nIt should spend much time\\n $&#123;COLOR_H1&#125;Y) Yes\\n N) No please skip this\\n &gt;$&#123;NC&#125;&quot;while :do read TYPORA case $TYPORA in Y) echo -e &quot;$&#123;COLOR2&#125;Install Typora via yay$&#123;NC&#125;&quot; yay -S --noconfirm typora echo -e &quot;$&#123;COLOR1&#125;Do you need to Install/Set up $&#123;COLOR_H2&#125;Pigco$&#123;NC&#125; for picture upload\\n $&#123;COLOR_H1&#125;Y) Yes\\n N) Please Skip\\n &gt;$&#123;NC&#125;&quot; while : do read PICGO case $PICGO in Y) echo -e &quot;$&#123;COLOR2&#125;Please install by Typora$&#123;NC&#125;&quot; typora break ;; N) echo -e &quot;$&#123;COLOR2&#125;Skip Picgo$&#123;NC&#125;&quot; break ;; *) echo -e &quot;$&#123;COLOR2&#125;Please enter your choice Y or A or N$&#123;NC&#125;&quot; ;; esac done break ;; N) echo -e &quot;$&#123;COLOR2&#125;Skip Typora Installation$&#123;NC&#125;&quot; break ;; *) echo -e &quot;$&#123;COLOR_H1&#125;Please enter your choice Y or A or N$&#123;NC&#125;&quot; ;; esacdone 因為Typora跟Picgo基本上都是配套的而且我試過最方便的安裝方式就是打開Typora用他的GUI安裝,所以這個部份在選擇要安裝Picgo後會啟動你的Typora讓你手工安裝 VMware Workstation 123456789101112131415161718192021222324# Install VMware Workstationecho -e &quot;$&#123;COLOR1&#125;Do you want to install $&#123;COLOR_H2&#125;VMware Workstation$&#123;NC&#125;?\\nIt should spend much time\\n $&#123;COLOR_H1&#125;Y) Yes\\n N) No please skip this\\n &gt;$&#123;NC&#125;&quot;while :do read VMW case $TEAM in Y) echo -e &quot;$&#123;COLOR2&#125;Install VMware Workstation via yay$&#123;NC&#125;&quot; yay -S --noconfirm vmware-workstation sudo systemctl enable vmware-networks sudo systemctl start vmware-networks sudo systemctl enable vmware-usbarbitrator.service sudo systemctl start vmware-usbarbitrator.service break ;; N) echo -e &quot;$&#123;COLOR2&#125;Skip VMware Workstation Installation$&#123;NC&#125;&quot; break ;; *) echo -e &quot;$&#123;COLOR_H1&#125;Please enter your choice Y or A or N$&#123;NC&#125;&quot; ;; esacdone Github-Desktop 1234567891011121314151617181920# Install Github-Desktopecho -e &quot;$&#123;COLOR1&#125;Do you want to install $&#123;COLOR_H2&#125;Github-desktop-bin$&#123;NC&#125;?\\nIt should spend much time\\n $&#123;COLOR_H1&#125;Y) Yes\\n N) No please skip this\\n &gt;$&#123;NC&#125;&quot;while :do read GITH case $GITH in Y) echo -e &quot;$&#123;COLOR2&#125;Install Github-Desktop via yay$&#123;NC&#125;&quot; yay -S --noconfirm github-desktop-bin break ;; N) echo -e &quot;$&#123;COLOR2&#125;Skip Github-Desktop Installation$&#123;NC&#125;&quot; break ;; *) echo -e &quot;$&#123;COLOR_H1&#125;Please enter your choice Y or A or N$&#123;NC&#125;&quot; ;; esacdone Hexo套裝 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# Install Hexo Setecho -e &quot;$&#123;COLOR1&#125;Do you want to install Do you need to Install $&#123;COLOR_H2&#125;Hexo$&#123;NC&#125; for Blog or Wiki?\\nIt should spend much time\\n $&#123;COLOR_H1&#125;Y) Yes\\n N) No please skip this\\n &gt;$&#123;NC&#125;&quot;while :do read HEXO case $HEXO in Y) echo -e &quot;$&#123;COLOR2&#125;Install basic packages for Hexo$&#123;NC&#125;&quot; yay -S --noconfirm nodejs npm echo -e &quot;$&#123;COLOR1&#125;Do you have set your own Hexo?\\n $&#123;COLOR_H1&#125;Y) Yes\\n K)I&#x27;m Kiwi please apply my setting\\n &gt;$&#123;NC&#125;&quot; while : do read H_SET case $H_SET in Y) echo -e &quot;$&#123;COLOR_H1&#125;Please input your Hexo Blog folder with full path(ie:~/hexo)\\n &gt;$&#123;NC&#125;&quot; read PATH mkdir $PATH cd $PATH sudo npm install -g hexo-cli break ;; K) echo -e &quot;$&#123;COLOR2&#125;Please start restore Kiwi&#x27;s Blog setting$&#123;NC&#125;&quot; mkdir ~/GitHub cd ~/GitHub git clone https://github.com/Kiwi0093/Blog.git git clone https://github.com/Kiwi0093/Wiki-site.git cd ~/GitHub/Blog/ sudo npm install -g hexo-cli npm install hexo-theme-next cd ~/GitHub/Wiki-site sudo npm install -g hexo-cli git clone https://github.com/zthxxx/hexo-theme-Wikitten.git themes/Wikitten npm i -S hexo-autonofollow hexo-directory-category hexo-generator-feed hexo-generator-json-content hexo-generator-sitemap break ;; *) echo -e &quot;$&#123;COLOR_H1&#125;Please enter your choice Y or A or N$&#123;NC&#125;&quot; ;; esac done break ;; N) echo -e &quot;$&#123;COLOR2&#125;Skip Hexo Installation$&#123;NC&#125;&quot; break ;; *) echo -e &quot;$&#123;COLOR_H1&#125;Please enter your choice Y or A or N$&#123;NC&#125;&quot; ;; esacdone 這個Secssion主要是用來恢復我的Blog&amp;Wiki,但是考慮到這個scipt要有某程度上的彈性,所以我加了一個**Are you Kiwi?**的相關選項,因為clone我的git也不好upload所以…git clone他也沒什麼用唷 個人設定相關 設定zsh相關 12345678910111213# Personal setting# change shell to zsh &amp; import powerlevel10k settingecho -e &quot;$&#123;COLOR2&#125;Change default shell to zsh$&#123;NC&#125;&quot;sudo chsh -s /bin/zshchsh -s /bin/zsh# download setting and applyecho -e &quot;$&#123;COLOR2&#125;Download and apply powerlevel10k setting$&#123;NC&#125;&quot;sudo curl -o /etc/zsh/zshrc https://kiwi0093.github.io/script/Manjaro/zsh/zshrcsudo curl -o /etc/zsh/aliasrc https://kiwi0093.github.io/script/Manjaro/zsh/aliasrcsudo curl -o /etc/zsh/p10k.zsh https://Kiwi0093.github.io/script/Manjaro/zsh/p10k.zshsudo cp /etc/zsh/zshrc /root/.zshrccp /etc/zsh/zshrc ~/.zshrc 設定中文輸入法環境 1234# Chinese Input ENV Settingecho -e &quot;$&#123;COLOR2&#125;Setting Fcitx Chinese Input ENV $&#123;NC&#125;&quot;curl -o profile https://Kiwi0093.github.io/script/Manjaro/profilesudo mv ./profile /etc/profile 恢復Qv2ray設定 1234567891011121314151617181920212223242526272829303132333435363738394041# Restore Qv2ray Settingecho -e &quot;$&#123;COLOR1&#125;Are you Kiwi?\\nIf you are, do you need to restore your private $&#123;COLOR_H2&#125;Qv2ray$&#123;NC&#125; setting\\n $&#123;COLOR_H1&#125;Y) Yes\\n N) No I don&#x27;t need\\n &gt;$&#123;NC&#125;&quot;while :do read Q_SET case $Q_SET in Y) echo -e &quot;$&#123;COLOR1&#125;Check QV2ray installed$&#123;NC&#125;&quot; if [ -f &quot;~/Applications/Qv2ray*AppImage&quot; ]; then echo -e &quot;$&#123;COLOR2&#125;AppImage Version Installed$&#123;NC&#125;&quot; curl -o qv2ray.e.tar.gz https://Kiwi0093.github.io/script/Manjaro/qv2ray.e.tar.gz openssl enc -d -aes256 -in qv2ray.e.tar.gz -out qv2ray.tar.gz tar zxvf qv2ray.tar.gz rm -rf ~/.config/qv2ray mv ./qv2ray ~/.config/ rm -rf ./qv2ray.* else echo -e &quot;$&#123;COLOR2&#125;No Qv2ray AppImage found$&#123;NC&#125;&quot; fi if [ -f &quot;/usr/bin/qv2ray&quot; ]; then echo -e &quot;$&#123;COLOR2&#125;Qv2ray Installed$&#123;NC&#125;&quot; curl -o qv2ray.e.tar.gz https://Kiwi0093.github.io/script/Manjaro/qv2ray.e.tar.gz openssl enc -d -aes256 -in qv2ray.e.tar.gz -out qv2ray.tar.gz tar zxvf qv2ray.tar.gz rm -rf ~/.config/qv2ray mv ./qv2ray ~/.config/ rm -rf ./qv2ray.* else echo -e &quot;$&#123;COLOR2&#125;No Qv2ray found$&#123;NC&#125;&quot; fi break ;; N) echo -e &quot;$&#123;COLOR2&#125;Skip QV2Ray Setting$&#123;NC&#125;&quot; break ;; *) echo -e &quot;$&#123;COLOR_H1&#125;Please enter your choice Y or A or N$&#123;NC&#125;&quot; ;; esacdone 這裡加上了確認是否有安裝Qv2ray的判別式,沒安裝的話就不會restore,另外因為都是私人的設定所以我的設定檔都有openssl加密沒有密碼也沒用 同步Brave 1234567891011121314151617181920212223242526272829303132333435363738# Open Brave to set SYNCecho -e &quot;$&#123;COLOR1&#125;Are you Kiwi?\\nIf you are, do you need to SYNC your private $&#123;COLOR_H2&#125;Brave$&#123;NC&#125; setting\\n $&#123;COLOR_H1&#125;Y) Yes\\n N) No I don&#x27;t need\\n &gt;$&#123;NC&#125;&quot;while :do read B_SET case $B_SET in Y) echo -e &quot;$&#123;COLOR1&#125;Check Brave installed$&#123;NC&#125;&quot; if [ -f &quot;/usr/bin/brave&quot; ]; then echo -e &quot;$&#123;COLOR2&#125;Brave Installed$&#123;NC&#125;&quot; curl -o brave.e https://Kiwi0093.github.io/script/Manjaro/brave.e openssl enc -d -aes256 -in brave.e -out brave clear echo &quot;&quot; echo &quot;&quot; echo &quot;&quot; cat ./brave echo &quot;&quot; echo &quot;&quot; echo &quot;&quot; echo -e &quot;$&#123;COLOR2&#125;please set SYNC for your brave$&#123;NC&#125;&quot; brave rm ./brave* else echo -e &quot;$&#123;COLOR2&#125;No Brave found$&#123;NC&#125;&quot; echo -e &quot;$&#123;COLOR2&#125;Skip Brave Setting$&#123;NC&#125;&quot; fi break ;; N) echo -e &quot;$&#123;COLOR2&#125;Skip Brave Setting$&#123;NC&#125;&quot; break ;; *) echo -e &quot;$&#123;COLOR_H1&#125;Please enter your choice Y or A or N$&#123;NC&#125;&quot; ;; esacdone 因為Brave的同步只能把他打開然後貼上SYNC CODE(不然就得Backup整個conf檔)所以我就弄了一個加密檔案,解密後會打開brave並且把code打在terminal上 Restore Picgo設定 1234567891011121314151617181920212223242526272829# Open restart picgo settingecho -e &quot;$&#123;COLOR1&#125;Are you Kiwi?\\nIf you are, do you need to SYNC your private $&#123;COLOR_H2&#125;Picgo$&#123;NC&#125; setting\\n $&#123;COLOR_H1&#125;Y) Yes\\n N) No I don&#x27;t need\\n &gt;$&#123;NC&#125;&quot;while :do read P_SET case $P_SET in Y) echo -e &quot;$&#123;COLOR1&#125;Check Picgo installed$&#123;NC&#125;&quot; if [ -f &quot;~/.config/Typora/picgo/linux/picgo&quot; ]; then echo -e &quot;$&#123;COLOR2&#125;Picgo Installed$&#123;NC&#125;&quot; curl -o config.json.e https://Kiwi0093.github.io/script/Manjaro/picgo/config.json.e openssl enc -d -aes256 -in config.json.e -out config.json mv ./config.json ~/.picgo/ rm config.json.e else echo -e &quot;$&#123;COLOR2&#125;No Picgo found$&#123;NC&#125;&quot; echo -e &quot;$&#123;COLOR2&#125;Skip picgo Setting$&#123;NC&#125;&quot; fi break ;; N) echo -e &quot;$&#123;COLOR2&#125;Skip Picgo Setting$&#123;NC&#125;&quot; break ;; *) echo -e &quot;$&#123;COLOR_H1&#125;Please enter your choice Y or A or N$&#123;NC&#125;&quot; ;; esacdone 因為這個裡面有我的Github token,所以我只能加密… Restore Gnome-pie 1234567891011121314151617181920212223242526272829# Restore Gnome-pie Settingecho -e &quot;$&#123;COLOR1&#125;Are you Kiwi?\\nIf you are, do you need to restore your $&#123;COLOR_H2&#125;gnome-pie$&#123;NC&#125; setting\\n $&#123;COLOR_H1&#125;Y) Yes\\n N) No I don&#x27;t need\\n &gt;$&#123;NC&#125;&quot;while :do read P_SET case $P_SET in Y) echo -e &quot;$&#123;COLOR1&#125;Check Gnome-Pie installed$&#123;NC&#125;&quot; if [ -f &quot;/usr/bin/gnome-pie&quot; ]; then echo -e &quot;$&#123;COLOR2&#125;Gnome-pie Installed$&#123;NC&#125;&quot; curl -o gnome-pie.tar.gz https://Kiwi0093.github.io/script/Manjaro/gnome-pie.tar.gz tar zxvf gnome-pie.tar.gz rm -rf ~/.config/gnome-pie mv ./gnome-pie ~/.config else echo -e &quot;$&#123;COLOR2&#125;No Gnome-pie found$&#123;NC&#125;&quot; echo -e &quot;$&#123;COLOR2&#125;Skip Gnome-pie Setting$&#123;NC&#125;&quot; fi break ;; N) echo -e &quot;$&#123;COLOR2&#125;Skip Gnome-pie Setting$&#123;NC&#125;&quot; break ;; *) echo -e &quot;$&#123;COLOR_H1&#125;Please enter your choice Y or A or N$&#123;NC&#125;&quot; ;; esacdone Gnome-pie這個玩意沒什麼隱私需求所以是直接copy明碼來恢復 KDE Plasmaoid 1234567891011121314151617# Install Kde Plasmaoidecho -e &quot;$&#123;COLOR1&#125;Install KDE plasma Widget &amp; Splash\\n$&#123;NC&#125;&quot;if [ -d &quot;/usr/include/plasma&quot; ];then echo -e &quot;$&#123;COLOR2&#125;KDE Plasma Found$&#123;NC&#125;&quot; curl -o plasma-simpleMonitor-v0.6.plasmoid https://Kiwi0093.github.io/script/Manjaro/plasma-simpleMonitor-v0.6.plasmoid plasmapkg2 -i plasma-simpleMonitor-v0.6.plasmoid ~/.local/share/plasma/plasmoids/ rm -f plasma-simpleMonitor-v0.6.plasmoid curl -o VioletEvergarden-Splash.tar.gz https://Kiwi0093.github.io/script/Manjaro/VioletEvergarden-Splash.tar.gz plasmapkg2 -i VioletEvergarden-Splash.tar.gz ~/.local/share/plasma/look-and-feel/ rm -f VioletEvergarden-Splash.tar.gz curl -o plasma-org.kde.plasma.desktop-appletsrc https://Kiwi0093.github.io/script/Manjaro/plasma-org.kde.plasma.desktop-appletsrc mv ./plasma-org.kde.plasma.desktop-appletsrc ~/.config/else echo -e &quot;$&#123;COLOR2&#125;KDE Plasma NOT found$&#123;NC&#125;&quot;fi 其實就是自動裝上我喜歡的simple monitor跟一個很騷的開機splash,但是裝完後還是得手動調整 結論 這個script寫起來還蠻開心的,可能後面會找機會把**Arch Linux**的安裝script照這個標準重寫一下","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Manjaro","slug":"Linux/Manjaro","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Manjaro/"},{"name":"Scripts","slug":"Linux/Manjaro/Scripts","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Manjaro/Scripts/"}],"tags":[{"name":"Linunx","slug":"Linunx","permalink":"http://kiwi0093.github.io/wiki/tags/Linunx/"},{"name":"Manjaro","slug":"Manjaro","permalink":"http://kiwi0093.github.io/wiki/tags/Manjaro/"}]},{"title":"Shell Script - 字元定義","slug":"Misc/Shell Script/1-font","date":"2020-12-03T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Misc/Shell Script/1-font/","permalink":"http://kiwi0093.github.io/wiki/wiki/Misc/Shell%20Script/1-font/","excerpt":"參考資料 參考iT邦幫忙-30天不間斷-資工隨筆大雜燴系列第20篇","text":"參考資料 參考iT邦幫忙-30天不間斷-資工隨筆大雜燴系列第20篇 特殊字元 符號 名稱 意義 $ 變數 取變數名稱對應的值 # 註解 跳脫符號 特殊及萬用字元還原成一般字元 | 管線 ; 分隔連續指令符號 $ 工作控制 將指令變成背景執行 / 目錄符號 分隔路徑 &gt;,&gt;&gt; 資料重導向(輸出) &lt;，&lt;&lt; 資料重導向(輸入) ‘’ 單引號 無法取變數值 “” 雙引號 可以取變數值 \\ 或是 $() 裏面包執行的指令 () 子 shell的始末 {} 中間爲命令區塊 萬用字元 符號 功能 * 0到無窮多個任意字元 ? 一個以上的任意字元 [] 一個以上括號內的字元 - 編碼範圍內的所有字元，例如[0-9]代表0到9之間的所有數字 ^ 後面接的字元都不要，例如[^0-9]代表0-9之間的所有字元都不接","categories":[{"name":"Misc","slug":"Misc","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/"},{"name":"Shell Script","slug":"Misc/Shell-Script","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Shell-Script/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"script","slug":"script","permalink":"http://kiwi0093.github.io/wiki/tags/script/"}]},{"title":"Shell Script - echo語法的用法","slug":"Misc/Shell Script/2-echo","date":"2020-12-03T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Misc/Shell Script/2-echo/","permalink":"http://kiwi0093.github.io/wiki/wiki/Misc/Shell%20Script/2-echo/","excerpt":"參考資料 參考FLOZz’ MISC的說明頁面","text":"參考資料 參考FLOZz’ MISC的說明頁面 基本語法 1echo -? &quot;you can see this&quot; echo的後面可以加-e, -n , -p等 最常見的是使用-e因為加上-e後可以讓&quot;&quot;內的顏色控制碼生效,換行碼生效等等效果 內文使用 可以使用 \\n - 換行 \\e - 跟字型有關的控制碼開頭 Formatting Set Code Description Example Preview 1 Bold/Bright echo -e &quot;Normal \\e[1mBold&quot; Normal Bold 2 Dim echo -e &quot;Normal \\e[2mDim&quot; Normal Dim 4 Underlined echo -e &quot;Normal \\e[4mUnderlined&quot; Normal Underlined 5 Blink 1) echo -e &quot;Normal \\e[5mBlink&quot; Normal Blink 7 Reverse (invert the foreground and background colors) echo -e &quot;Normal \\e[7minverted&quot; Normal inverted 8 Hidden (useful for passwords) echo -e &quot;Normal \\e[8mHidden&quot; Normal Hidden Reset Code Description Example Preview 0 Reset all attributes echo -e &quot;\\e[0mNormal Text&quot; Normal Text 21 Reset bold/bright echo -e &quot;Normal \\e[1mBold \\e[21mNormal&quot; Normal Bold Normal 22 Reset dim echo -e &quot;Normal \\e[2mDim \\e[22mNormal&quot; Normal Dim Normal 24 Reset underlined echo -e &quot;Normal \\e[4mUnderlined \\e[24mNormal&quot; Normal Underlined Normal 25 Reset blink echo -e &quot;Normal \\e[5mBlink \\e[25mNormal&quot; Normal Blink Normal 27 Reset reverse echo -e &quot;Normal \\e[7minverted \\e[27mNormal&quot; Normal inverted Normal 28 Reset hidden echo -e &quot;Normal \\e[8mHidden \\e[28mNormal&quot; Normal Hidden Normal 8/16 colors Foreground (text) Code Color Example Preview 39 Default foreground color echo -e &quot;Default \\e[39mDefault&quot; Default Default 30 Black echo -e &quot;Default \\e[30mBlack&quot; Default Black 31 Red echo -e &quot;Default \\e[31mRed&quot; Default Red 32 Green echo -e &quot;Default \\e[32mGreen&quot; Default Green 33 Yellow echo -e &quot;Default \\e[33mYellow&quot; Default Yellow 34 Blue echo -e &quot;Default \\e[34mBlue&quot; Default Blue 35 Magenta echo -e &quot;Default \\e[35mMagenta&quot; Default Magenta 36 Cyan echo -e &quot;Default \\e[36mCyan&quot; Default Cyan 37 Light gray echo -e &quot;Default \\e[37mLight gray&quot; Default Light gray 90 Dark gray echo -e &quot;Default \\e[90mDark gray&quot; Default Dark gray 91 Light red echo -e &quot;Default \\e[91mLight red&quot; Default Light red 92 Light green echo -e &quot;Default \\e[92mLight green&quot; Default Light green 93 Light yellow echo -e &quot;Default \\e[93mLight yellow&quot; Default Light yellow 94 Light blue echo -e &quot;Default \\e[94mLight blue&quot; Default Light blue 95 Light magenta echo -e &quot;Default \\e[95mLight magenta&quot; Default Light magenta 96 Light cyan echo -e &quot;Default \\e[96mLight cyan&quot; Default Light cyan 97 White echo -e &quot;Default \\e[97mWhite&quot; Default White Background Code Color Example Preview 49 Default background color echo -e &quot;Default \\e[49mDefault&quot; Default Default 40 Black echo -e &quot;Default \\e[40mBlack&quot; Default Black 41 Red echo -e &quot;Default \\e[41mRed&quot; Default Red 42 Green echo -e &quot;Default \\e[42mGreen&quot; Default Green 43 Yellow echo -e &quot;Default \\e[43mYellow&quot; Default Yellow 44 Blue echo -e &quot;Default \\e[44mBlue&quot; Default Blue 45 Magenta echo -e &quot;Default \\e[45mMagenta&quot; Default Magenta 46 Cyan echo -e &quot;Default \\e[46mCyan&quot; Default Cyan 47 Light gray echo -e &quot;Default \\e[47mLight gray&quot; Default Light gray 100 Dark gray echo -e &quot;Default \\e[100mDark gray&quot; Default Dark gray 101 Light red echo -e &quot;Default \\e[101mLight red&quot; Default Light red 102 Light green echo -e &quot;Default \\e[102mLight green&quot; Default Light green 103 Light yellow echo -e &quot;Default \\e[103mLight yellow&quot; Default Light yellow 104 Light blue echo -e &quot;Default \\e[104mLight blue&quot; Default Light blue 105 Light magenta echo -e &quot;Default \\e[105mLight magenta&quot; Default Light magenta 106 Light cyan echo -e &quot;Default \\e[106mLight cyan&quot; Default Light cyan 107 White echo -e &quot;Default \\e[107mWhite&quot; Default White","categories":[{"name":"Misc","slug":"Misc","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/"},{"name":"Shell Script","slug":"Misc/Shell-Script","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Shell-Script/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"script","slug":"script","permalink":"http://kiwi0093.github.io/wiki/tags/script/"}]},{"title":"Shell Script - 變數說明","slug":"Misc/Shell Script/3-var","date":"2020-12-03T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Misc/Shell Script/3-var/","permalink":"http://kiwi0093.github.io/wiki/wiki/Misc/Shell%20Script/3-var/","excerpt":"參考資料 參考iT邦幫忙-30天不間斷-資工隨筆大雜燴系列第20篇","text":"參考資料 參考iT邦幫忙-30天不間斷-資工隨筆大雜燴系列第20篇 基本變數定義 12變數=XYZ$&#123;變數&#125; 自動變數 變數名稱 說明 $? 表示上一個指令的離開狀況，一般指令正常離開會傳回 0。不正常離開則會傳回 1、2 等數值。 $$ 這一個 shell 的 process ID number $! 最後一個在背景執行的程式的 process number $- 這個參數包含了傳遞給 shell 旗標 (flag)。 $1 代表第一個參數，$2 則為第二個參數，依此類推。而 $0 為這個 shell script 的檔名。 $# 執行時，給這個 Shell Script 參數的個數 $* 包含所有輸入的參數，$@ 即代表 $1, 2,….直到所有參數結束。2,….直到所有參數結束。2,….直到所有參數結束。* 將所有參數無間隔的連在一起，存成一個單一的參數。也就是說 $* 代表了 “$1 $2 $3…”。 $@ 包含所有輸入的參數，$@ 即代表 $1, 2,….直到所有參數結束。2,….直到所有參數結束。2,….直到所有參數結束。@ 用將所有參數以空白為間隔，存在 $@ 中。也就是說 $@ 代表了 “$1” “$2” “$3”….。 $BASH_ENV absolute path of startup file $CDPATH directories searched by cd $FCEDIT absolute path of history editor $LINENO current line number in shell script $LINES terminal height $PPID process ID of parent $RANDOM random integer $SECONDS number of seconds since shell started $SHELL absolute pathname of preferred shell $TMOUT seconds to log out after lack of use 空變數的處理 變數 說明 ${var:-word} 如果變數 var 尚未設定或是 null，則將使用 word 這個值，但不改變 var 變數的內容。 ${var:=word} 如果變數 var 尚未設定或是 null，則變數 var 的內容將等於 word 這個字串，並使用這個新的值。 ${var:?word} 如果變數 var 已經設定了，而且不是 null，則將使用變數 var。否則則印出 word 這個字串，並強制離開程式。我們可以設定一個字串 “Parameter null or not set” 來在變數未設定時印出，並終止程式。 ${var:+word} 如果變數 var 已經設定了，而且不是 null，則以 word 這個字串取代它，否則就不取代。 輸入型變數 使用read指令讀取key入的內容為變數內容如 123echo -n &quot;please input a var for use&quot;read varecho -e &quot;$&#123;var&#125;&quot; 螢幕上會先出現 1please input a var for use 然後停住等待輸入,若輸入good則會出現 1good","categories":[{"name":"Misc","slug":"Misc","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/"},{"name":"Shell Script","slug":"Misc/Shell-Script","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Shell-Script/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"script","slug":"script","permalink":"http://kiwi0093.github.io/wiki/tags/script/"}]},{"title":"Shell Script - Case迴圈","slug":"Misc/Shell Script/4-loop","date":"2020-12-03T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Misc/Shell Script/4-loop/","permalink":"http://kiwi0093.github.io/wiki/wiki/Misc/Shell%20Script/4-loop/","excerpt":"前言 Loop是shell script裡面很重要的一個function","text":"前言 Loop是shell script裡面很重要的一個function Case迴圈 1234567891011121314151617181920212223echo -e &quot;想要給你看的a)A b)B c)C&quot;while:do read 變數 case $變數 in a) 選A要做的事情 break ;; b) 選B要做的事情 continue ;; c) 選C要做的事情 exit ;; *) 選ABC以外任意鍵要做的事情 exit ;; esacdone 這是應用了echo,while,do,case做出來的讓人選ABC,然後依照其輸入的選擇做反應的寫法 break - 離開迴圈繼續跑後面的東西 continue - 回到迴圈的頭重新等待輸入 exit - 離開這個script","categories":[{"name":"Misc","slug":"Misc","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/"},{"name":"Shell Script","slug":"Misc/Shell-Script","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Shell-Script/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"script","slug":"script","permalink":"http://kiwi0093.github.io/wiki/tags/script/"}]},{"title":"整合型Archlinux安裝Script - 2.架構說明","slug":"Linux/Arch Linux/Scripts/2-construction","date":"2020-12-03T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Arch Linux/Scripts/2-construction/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Arch%20Linux/Scripts/2-construction/","excerpt":"前言 其實不用搞成這麼複雜的,但是寫的時候想說寫的細一點,順便拿來練習寫shell script","text":"前言 其實不用搞成這麼複雜的,但是寫的時候想說寫的細一點,順便拿來練習寫shell script 架構說明 因為**Arch Linux**的安裝邏輯如下 先在Live CD的OS內對HDD進行處理,然後把透過網路把新的archlinux的系統裝進HDD內,然後chroot到新的系統內,利用新的系統的東西,進行初步的設定與啟動設定等動作,最後再完全退出重開改以HDD進行開機這樣算是完成了一個新的系統的安裝 所以在Script的使用上是把所有的選項在arch-chroot後都做成獨立的script進行如同下面的圖","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Arch Linux","slug":"Linux/Arch-Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Arch-Linux/"},{"name":"Scripts","slug":"Linux/Arch-Linux/Scripts","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Arch-Linux/Scripts/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Archlinux","slug":"Archlinux","permalink":"http://kiwi0093.github.io/wiki/tags/Archlinux/"}]},{"title":"整合型Archlinux安裝Script - 6.arch_v2ray.sh說明","slug":"Linux/Arch Linux/Scripts/6-arch_v2ray","date":"2020-12-03T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Arch Linux/Scripts/6-arch_v2ray/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Arch%20Linux/Scripts/6-arch_v2ray/","excerpt":"使用前 這個script預設是自動帶出來跑的,但是也是可以手動自己跑 Script的直接位置如下： https://Kiwi0093.github.io/script/Arch/arch_v2ray.sh","text":"使用前 這個script預設是自動帶出來跑的,但是也是可以手動自己跑 Script的直接位置如下： https://Kiwi0093.github.io/script/Arch/arch_v2ray.sh Script內容 Script內容說明 基本定義 12345#!/bin/zsh#Parmeter Pre-DefineCOLOR1=&#x27;\\e[94m&#x27;COLOR2=&#x27;\\e[32m&#x27;NC=&#x27;\\e[0m&#x27; 定義Script中字串的顏色 設定時區與硬體時間 1234567891011121314151617181920212223242526#change Timezone to CTS(Taipei)echo -e &quot;$&#123;COLOR1&#125;Please select your time zone\\n1)Taipei\\n2)Shanghai\\n*)Whatever..I don&#x27;t care\\n$&#123;NC&#125;&quot;while :do read ZONE case $ZONE in 1) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Taipei$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime hwclock --systohc --utc break ;; 2) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Shanghai$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime hwclock --systohc --utc break ;; *) echo -e &quot;$&#123;COLOR1&#125;Nobody cares the local time!!$&#123;NC&#125;&quot; hwclock --systohc --utc break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 網路設定 123456789101112131415161718192021222324252627282930#Hostnameecho -e &quot;$&#123;COLOR1&#125;Please input your hostname\\n$&#123;NC&#125;&quot;read HOSTNAMEecho $&#123;HOSTNAME&#125; &gt; /etc/hostnameecho &quot;127.0.0.1 localhost $&#123;HOSTNAME&#125;&quot; &gt;&gt; /etc/hostsecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Define your NIC by Mac address$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Please input your MAC Address:\\n$&#123;NC&#125;&quot;read OUTSIDEecho &#x27;SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, ATTR&#123;address&#125;==&quot;&#x27;$&#123;OUTSIDE&#125;&#x27;&quot;, NAME=&quot;EXT0&quot;&#x27; &gt; /etc/udev/rules.d/10-network.rulesecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Define your IP for EXT0:$&#123;NC&#125;&quot;echo &quot;Description=&#x27;EXT0 IP SETTING&#x27;&quot; &gt; /etc/netctl/EXT0.serviceecho &quot;Interface=EXT0&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho &quot;Connection=ethernet&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho &quot;IP=static&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your IP address:\\n$&#123;NC&#125;&quot;read EXT_IPecho &quot;Address=(&#x27;$&#123;EXT_IP&#125;/24&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your Gateway IP address:\\n$&#123;NC&#125;&quot;read GATE_IPecho &quot;Gateway=&#x27;$&#123;GATE_IP&#125;&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your DNS IP address:\\n$&#123;NC&#125;&quot;read DNS_IPecho &quot;DNS=(&#x27;$&#123;DNS_IP&#125;&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -e &quot;$&#123;COLOR2&#125;Enable EXT0$&#123;NC&#125;&quot;netctl enable EXT0.serviceecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot; 這個設定是利用固定的**Mac Address來定義NIC Interface的名字為EXT0** 這個設定是使用netctl進行的 變更root密碼與建立其他帳號 123456789101112131415161718#Root Passwordecho -e &quot;$&#123;COLOR1&#125;Set your root password$&#123;NC&#125;&quot;passwdchsh -s /bin/zshecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#add Userecho -e &quot;$&#123;COLOR1&#125;Add user account:$&#123;NC&#125;&quot;echo -n &quot;$&#123;COLOR1&#125;What ID you want:$&#123;NC&#125;&quot;read YOURIDuseradd -m -g root -s /bin/zsh $&#123;YOURID&#125;passwd $&#123;YOURID&#125;echo -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Add $YOURID into sudo list$&#123;NC&#125;&quot;pacman -Syu sudoecho &quot;$&#123;YOURID&#125; ALL=(ALL) ALL&quot; &gt;&gt; /etc/sudoersecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 安裝程式 12345#install Toolsecho -e &quot;$&#123;COLOR1&#125;Install Packages$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;screen$&#123;NC&#125;&quot;pacman -Sy screen v2ray certbot certbot-nginx nginxecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 裝上screen,v2ray, certbot,certbot-nginx,nginx,因為不想直接放config.json也不想盜用別人的一鍵安裝script所以只有把基本的裝上,其他的設定還是參考其他資料自己手工來吧 安裝Bootloader 12345#install Bootloaderecho -e &quot;$&#123;COLOR1&#125;Install grub Boot Loader into /dev/sda$&#123;NC&#125;&quot;grub-install --target=i386-pc /dev/sdagrub-mkconfig -o /boot/grub/grub.cfgecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 同步後離開Arch-chroot 12345#Finished installsyncsyncsyncexit 完整版的script 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103#------------------------------------------------------------------------------#(所有動作都是在change root內完成的)#------------------------------------------------------------------------------#!/bin/zsh#Parmeter Pre-DefineCOLOR1=&#x27;\\e[94m&#x27;COLOR2=&#x27;\\e[32m&#x27;NC=&#x27;\\e[0m&#x27;#change Timezone to CTS(Taipei)echo -e &quot;$&#123;COLOR1&#125;Please select your time zone\\n1)Taipei\\n2)Shanghai\\n*)Whatever..I don&#x27;t care\\n$&#123;NC&#125;&quot;while :do read ZONE case $ZONE in 1) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Taipei$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime hwclock --systohc --utc break ;; 2) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Shanghai$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime hwclock --systohc --utc break ;; *) echo -e &quot;$&#123;COLOR1&#125;Nobody cares the local time!!$&#123;NC&#125;&quot; hwclock --systohc --utc break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#Hostnameecho -e &quot;$&#123;COLOR1&#125;Please input your hostname\\n$&#123;NC&#125;&quot;read HOSTNAMEecho $&#123;HOSTNAME&#125; &gt; /etc/hostnameecho &quot;127.0.0.1 localhost $&#123;HOSTNAME&#125;&quot; &gt;&gt; /etc/hostsecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Define your NIC by Mac address$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Please input your MAC Address:\\n$&#123;NC&#125;&quot;read OUTSIDEecho &#x27;SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, ATTR&#123;address&#125;==&quot;&#x27;$&#123;OUTSIDE&#125;&#x27;&quot;, NAME=&quot;EXT0&quot;&#x27; &gt; /etc/udev/rules.d/10-network.rulesecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Define your IP for EXT0:$&#123;NC&#125;&quot;echo &quot;Description=&#x27;EXT0 IP SETTING&#x27;&quot; &gt; /etc/netctl/EXT0.serviceecho &quot;Interface=EXT0&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho &quot;Connection=ethernet&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho &quot;IP=static&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your IP address:\\n$&#123;NC&#125;&quot;read EXT_IPecho &quot;Address=(&#x27;$&#123;EXT_IP&#125;/24&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your Gateway IP address:\\n$&#123;NC&#125;&quot;read GATE_IPecho &quot;Gateway=&#x27;$&#123;GATE_IP&#125;&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your DNS IP address:\\n$&#123;NC&#125;&quot;read DNS_IPecho &quot;DNS=(&#x27;$&#123;DNS_IP&#125;&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -e &quot;$&#123;COLOR2&#125;Enable EXT0$&#123;NC&#125;&quot;netctl enable EXT0.serviceecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot;#Root Passwordecho -e &quot;$&#123;COLOR1&#125;Set your root password$&#123;NC&#125;&quot;passwdchsh -s /bin/zshecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#add Userecho -e &quot;$&#123;COLOR1&#125;Add user account:$&#123;NC&#125;&quot;echo -n &quot;$&#123;COLOR1&#125;What ID you want:$&#123;NC&#125;&quot;read YOURIDuseradd -m -g root -s /bin/zsh $&#123;YOURID&#125;passwd $&#123;YOURID&#125;echo -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Add $YOURID into sudo list$&#123;NC&#125;&quot;pacman -Syu sudoecho &quot;$&#123;YOURID&#125; ALL=(ALL) ALL&quot; &gt;&gt; /etc/sudoersecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#install Toolsecho -e &quot;$&#123;COLOR1&#125;Install Packages$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;screen$&#123;NC&#125;&quot;pacman -Sy screen v2ray certbot certbot-nginx nginxecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#install Bootloaderecho -e &quot;$&#123;COLOR1&#125;Install grub Boot Loader into /dev/sda$&#123;NC&#125;&quot;grub-install --target=i386-pc /dev/sdagrub-mkconfig -o /boot/grub/grub.cfgecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#Finished installsyncsyncsyncexit","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Arch Linux","slug":"Linux/Arch-Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Arch-Linux/"},{"name":"Scripts","slug":"Linux/Arch-Linux/Scripts","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Arch-Linux/Scripts/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Archlinux","slug":"Archlinux","permalink":"http://kiwi0093.github.io/wiki/tags/Archlinux/"}]},{"title":"整合型Archlinux安裝Script - 7.arch_v2ray_gate.sh說明","slug":"Linux/Arch Linux/Scripts/7-arch_v2ray_gate","date":"2020-12-03T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Arch Linux/Scripts/7-arch_v2ray_gate/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Arch%20Linux/Scripts/7-arch_v2ray_gate/","excerpt":"使用前 這個script預設是自動帶出來跑的,但是也是可以手動自己跑 這個script是用在有兩張網路卡的條件下的 Script的直接位置如下： https://Kiwi0093.github.io/script/Arch/arch_v2ray_gate.sh","text":"使用前 這個script預設是自動帶出來跑的,但是也是可以手動自己跑 這個script是用在有兩張網路卡的條件下的 Script的直接位置如下： https://Kiwi0093.github.io/script/Arch/arch_v2ray_gate.sh Script內容 Script內容說明 基本定義 12345#!/bin/zsh#Parmeter Pre-DefineCOLOR1=&#x27;\\e[94m&#x27;COLOR2=&#x27;\\e[32m&#x27;NC=&#x27;\\e[0m&#x27; 定義Script中字串的顏色 設定時區與硬體時間 1234567891011121314151617181920212223242526#change Timezone to CTS(Taipei)echo -e &quot;$&#123;COLOR1&#125;Please select your time zone\\n1)Taipei\\n2)Shanghai\\n*)Whatever..I don&#x27;t care\\n$&#123;NC&#125;&quot;while :do read ZONE case $ZONE in 1) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Taipei$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime hwclock --systohc --utc break ;; 2) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Shanghai$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime hwclock --systohc --utc break ;; *) echo -e &quot;$&#123;COLOR1&#125;Nobody cares the local time!!$&#123;NC&#125;&quot; hwclock --systohc --utc break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 網路設定 Hostname設定 123456#Hostnameecho -e &quot;$&#123;COLOR1&#125;Please input your hostname\\n$&#123;NC&#125;&quot;read HOSTNAMEecho $&#123;HOSTNAME&#125; &gt; /etc/hostnameecho &quot;127.0.0.1 localhost $&#123;HOSTNAME&#125;&quot; &gt;&gt; /etc/hostsecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 輸入卡號定義NIC名稱 123456789#Set Mac Addressecho -e &quot;$&#123;COLOR1&#125;Define your NIC by Mac address$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Please input your EXT Mac Address:\\n$&#123;NC&#125;&quot;read OUTSIDEecho &#x27;SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, ATTR&#123;address&#125;==&quot;&#x27;$&#123;OUTSIDE&#125;&#x27;&quot;, NAME=&quot;EXT0&quot;&#x27; &gt; /etc/udev/rules.d/10-network.rulesecho -e &quot;$&#123;COLOR1&#125;Please input your INT Mac Address:\\n$&#123;NC&#125;&quot;read INSIDEecho &#x27;SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, ATTR&#123;address&#125;==&quot;&#x27;$&#123;INSIDE&#125;&#x27;&quot;, NAME=&quot;INT0&quot;&#x27; &gt;&gt; /etc/udev/rules.d/10-network.rulesecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 這個設定是利用固定的**Mac Address來定義NIC Interface的名字為EXT0** 設定對內固定IP 123456789101112# Set INT networkecho -e &quot;$&#123;COLOR1&#125;Setting your INT0$&#123;NC&#125;&quot;echo &quot;Description=&#x27;INT0 IP SETTING&#x27;&quot; &gt; /etc/netctl/INT0.serviceecho &quot;Interface=INT0&quot; &gt;&gt; /etc/netctl/INT0.serviceecho &quot;Connection=ethernet&quot; &gt;&gt; /etc/netctl/INT0.serviceecho &quot;IP=static&quot; &gt;&gt; /etc/netctl/INT0.serviceecho -e &quot;$&#123;COLOR1&#125;Please input your INT IP:\\n$&#123;NC&#125;&quot;read INT_IPecho &quot;Address=(&#x27;$&#123;INT_IP&#125;/24&#x27;)&quot; &gt;&gt; /etc/netctl/INT0.serviceecho -e &quot;$&#123;COLOR2&#125;Enable INT0$&#123;NC&#125;&quot;netctl enable INT0.serviceecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot; IP請設定在192.168/16的範圍內 設定對外網路,可選固定IP或是PPPOE方式連線 123456789101112131415161718192021222324252627282930313233343536373839404142434445# Set EXT networkecho -e &quot;$&#123;COLOR1&#125;Please select your connection\\n1)PPPOE\\n2)Static IP\\n&quot;whiledo read CONNECT case $CONNECT in 1) echo -e &quot;$&#123;COLOR1&#125;Setting your PPPOE$&#123;NC&#125;&quot; echo &quot;Description=&#x27;EXT0 PPPOE SETTING&#x27;&quot; &gt; /etc/netctl/EXT0.service echo &quot;Interface=EXT0&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;Connection=pppoe&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input your PPPOE Account:\\n:$&#123;NC&#125;&quot; read ISP echo &quot;User=&#x27;$&#123;ISP&#125;&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input your PPPOE password:\\n$&#123;NC&#125;&quot; read ISPPW echo &quot;Password=&#x27;$&#123;ISPPW&#125;&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;ConnectionMode=&#x27;persist&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;UsePeerDNS=false&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Enable EXT0&#123;NC&#125;&quot; netctl enable EXT0.service break ;; 2) echo -e &quot;$&#123;COLOR1&#125;Setting your Static IP$&#123;NC&#125;&quot; echo &quot;Description=&#x27;EXT0 IP SETTING&#x27;&quot; &gt; /etc/netctl/EXT0.service echo &quot;Interface=EXT0&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;Connection=ethernet&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;IP=static&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input your IP address:\\n$&#123;NC&#125;&quot; read EXT_IP echo &quot;Address=(&#x27;$&#123;EXT_IP&#125;/24&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input Gateway IP address:\\n$&#123;NC&#125;&quot; read GATE_IP echo &quot;Gateway=&#x27;$&#123;GATE_IP&#125;&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input DNS IP address:\\n$&#123;NC&#125;&quot; read DNS_IP echo &quot;DNS=(&#x27;$&#123;DNS_IP&#125;&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR2&#125;Enable EXT0$&#123;NC&#125;&quot; netctl enable EXT0.service break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;EXT set completed.$&#123;NC&#125;&quot; 設定Gateway Routing 1234#Set Natecho -e &quot;$&#123;COLOR1&#125;Open package fowrading$&#123;NC&#125;&quot;echo &quot;net.ipv4.ip_forward=1&quot; &gt; /etc/sysctl/30-ipforward.confecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot; iptable設定與systemd 12345678910111213141516171819# iptable scriptecho -e &quot;$&#123;COLOR1&#125;Create Iptable start script$&#123;NC&#125;&quot;echo &quot;#Natd&quot; &gt; /etc/iptables/iptable.shecho &quot;iptables -t nat -A POSTROUTING -s 192.168/16 -j MASQUERADE&quot; &gt;&gt; /etc/iptables/iptable.shchmod 750 /etc/iptables/iptable.shecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot;# systemdecho -e &quot;$&#123;COLOR1&#125;Create Systemd Service$&#123;NC&#125;&quot;echo &quot;[Unit] &gt; /etc/systemd/system/iptables.serviceecho &quot;Description=iptables rules &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot; &quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;[Service]&quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;ExecStart=/bin/sh /etc/iptables/iptable.sh&quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot; &quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;[Install]&quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;WantedBy=multi-user.target&quot; &gt;&gt; /etc/systemd/system/iptables.servicesystemctl enable iptables.serviceecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot; 變更root密碼與建立其他帳號 123456789101112131415161718#Root Passwordecho -e &quot;$&#123;COLOR1&#125;Set your root password$&#123;NC&#125;&quot;passwdchsh -s /bin/zshecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#add Userecho -e &quot;$&#123;COLOR1&#125;Add user account:$&#123;NC&#125;&quot;echo -n &quot;$&#123;COLOR1&#125;What ID you want:$&#123;NC&#125;&quot;read YOURIDuseradd -m -g root -s /bin/zsh $&#123;YOURID&#125;passwd $&#123;YOURID&#125;echo -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Add $YOURID into sudo list$&#123;NC&#125;&quot;pacman -Syu sudoecho &quot;$&#123;YOURID&#125; ALL=(ALL) ALL&quot; &gt;&gt; /etc/sudoersecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 安裝程式 12345#install Toolsecho -e &quot;$&#123;COLOR1&#125;Install Packages$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;screen$&#123;NC&#125;&quot;pacman -Sy screen v2rayecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 裝上screen,v2ray, certbot,python3-certbot-nginx,因為不想直接放config.json也不想盜用別人的一鍵安裝script所以只有把基本的裝上,其他的設定還是參考其他資料自己手工來吧 安裝Bootloader 12345#install Bootloaderecho -e &quot;$&#123;COLOR1&#125;Install grub Boot Loader into /dev/sda$&#123;NC&#125;&quot;grub-install --target=i386-pc /dev/sdagrub-mkconfig -o /boot/grub/grub.cfgecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 同步後離開Arch-chroot 12345#Finished installsyncsyncsyncexit 完整版的script 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173#------------------------------------------------------------------------------#(所有動作都是在change root內完成的)#------------------------------------------------------------------------------#!/bin/zsh#Parmeter Pre-DefineCOLOR1=&#x27;\\e[94m&#x27;COLOR2=&#x27;\\e[32m&#x27;NC=&#x27;\\e[0m&#x27;#change Timezone to CTS(Taipei)echo -e &quot;$&#123;COLOR1&#125;Please select your time zone\\n1)Taipei\\n2)Shanghai\\n*)Whatever..I don&#x27;t care\\n$&#123;NC&#125;&quot;while :do read ZONE case $ZONE in 1) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Taipei$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime hwclock --systohc --utc break ;; 2) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Shanghai$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime hwclock --systohc --utc break ;; *) echo -e &quot;$&#123;COLOR1&#125;Nobody cares the local time!!$&#123;NC&#125;&quot; hwclock --systohc --utc break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#Hostnameecho -e &quot;$&#123;COLOR1&#125;Please input your hostname\\n$&#123;NC&#125;&quot;read HOSTNAMEecho $&#123;HOSTNAME&#125; &gt; /etc/hostnameecho &quot;127.0.0.1 localhost $&#123;HOSTNAME&#125;&quot; &gt;&gt; /etc/hostsecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#Set Mac Addressecho -e &quot;$&#123;COLOR1&#125;Define your NIC by Mac address$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Please input your EXT Mac Address:\\n$&#123;NC&#125;&quot;read OUTSIDEecho &#x27;SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, ATTR&#123;address&#125;==&quot;&#x27;$&#123;OUTSIDE&#125;&#x27;&quot;, NAME=&quot;EXT0&quot;&#x27; &gt; /etc/udev/rules.d/10-network.rulesecho -e &quot;$&#123;COLOR1&#125;Please input your INT Mac Address:\\n$&#123;NC&#125;&quot;read INSIDEecho &#x27;SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, ATTR&#123;address&#125;==&quot;&#x27;$&#123;INSIDE&#125;&#x27;&quot;, NAME=&quot;INT0&quot;&#x27; &gt;&gt; /etc/udev/rules.d/10-network.rulesecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;# Set INT networkecho -e &quot;$&#123;COLOR1&#125;Setting your INT0$&#123;NC&#125;&quot;echo &quot;Description=&#x27;INT0 IP SETTING&#x27;&quot; &gt; /etc/netctl/INT0.serviceecho &quot;Interface=INT0&quot; &gt;&gt; /etc/netctl/INT0.serviceecho &quot;Connection=ethernet&quot; &gt;&gt; /etc/netctl/INT0.serviceecho &quot;IP=static&quot; &gt;&gt; /etc/netctl/INT0.serviceecho -e &quot;$&#123;COLOR1&#125;Please input your INT IP:\\n$&#123;NC&#125;&quot;read INT_IPecho &quot;Address=(&#x27;$&#123;INT_IP&#125;/24&#x27;)&quot; &gt;&gt; /etc/netctl/INT0.serviceecho -e &quot;$&#123;COLOR2&#125;Enable INT0$&#123;NC&#125;&quot;netctl enable INT0.serviceecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot;# Set EXT networkecho -e &quot;$&#123;COLOR1&#125;Please select your connection\\n1)PPPOE\\n2)Static IP\\n&quot;whiledo read CONNECT case $CONNECT in 1) echo -e &quot;$&#123;COLOR1&#125;Setting your PPPOE$&#123;NC&#125;&quot; echo &quot;Description=&#x27;EXT0 PPPOE SETTING&#x27;&quot; &gt; /etc/netctl/EXT0.service echo &quot;Interface=EXT0&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;Connection=pppoe&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input your PPPOE Account:\\n:$&#123;NC&#125;&quot; read ISP echo &quot;User=&#x27;$&#123;ISP&#125;&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input your PPPOE password:\\n$&#123;NC&#125;&quot; read ISPPW echo &quot;Password=&#x27;$&#123;ISPPW&#125;&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;ConnectionMode=&#x27;persist&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;UsePeerDNS=false&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Enable EXT0&#123;NC&#125;&quot; netctl enable EXT0.service break ;; 2) echo -e &quot;$&#123;COLOR1&#125;Setting your Static IP$&#123;NC&#125;&quot; echo &quot;Description=&#x27;EXT0 IP SETTING&#x27;&quot; &gt; /etc/netctl/EXT0.service echo &quot;Interface=EXT0&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;Connection=ethernet&quot; &gt;&gt; /etc/netctl/EXT0.service echo &quot;IP=static&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input your IP address:\\n$&#123;NC&#125;&quot; read EXT_IP echo &quot;Address=(&#x27;$&#123;EXT_IP&#125;/24&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input Gateway IP address:\\n$&#123;NC&#125;&quot; read GATE_IP echo &quot;Gateway=&#x27;$&#123;GATE_IP&#125;&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR1&#125;Please input DNS IP address:\\n$&#123;NC&#125;&quot; read DNS_IP echo &quot;DNS=(&#x27;$&#123;DNS_IP&#125;&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.service echo -e &quot;$&#123;COLOR2&#125;Enable EXT0$&#123;NC&#125;&quot; netctl enable EXT0.service break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;EXT set completed.$&#123;NC&#125;&quot;#Set Natecho -e &quot;$&#123;COLOR1&#125;Open package fowrading$&#123;NC&#125;&quot;echo &quot;net.ipv4.ip_forward=1&quot; &gt; /etc/sysctl/30-ipforward.confecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot;# iptable scriptecho -e &quot;$&#123;COLOR1&#125;Create Iptable start script$&#123;NC&#125;&quot;echo &quot;#Natd&quot; &gt; /etc/iptables/iptable.shecho &quot;iptables -t nat -A POSTROUTING -s 192.168/16 -j MASQUERADE&quot; &gt;&gt; /etc/iptables/iptable.shchmod 750 /etc/iptables/iptable.shecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot;# systemdecho -e &quot;$&#123;COLOR1&#125;Create Systemd Service$&#123;NC&#125;&quot;echo &quot;[Unit] &gt; /etc/systemd/system/iptables.serviceecho &quot;Description=iptables rules &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot; &quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;[Service]&quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;ExecStart=/bin/sh /etc/iptables/iptable.sh&quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot; &quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;[Install]&quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;WantedBy=multi-user.target&quot; &gt;&gt; /etc/systemd/system/iptables.servicesystemctl enable iptables.serviceecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot;#Root Passwordecho -e &quot;$&#123;COLOR1&#125;Set your root password$&#123;NC&#125;&quot;passwdchsh -s /bin/zshecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#add Userecho -e &quot;$&#123;COLOR1&#125;Add user account:$&#123;NC&#125;&quot;echo -n &quot;$&#123;COLOR1&#125;What ID you want:$&#123;NC&#125;&quot;read YOURIDuseradd -m -g root -s /bin/zsh $&#123;YOURID&#125;passwd $&#123;YOURID&#125;echo -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Add $YOURID into sudo list$&#123;NC&#125;&quot;pacman -Syu sudoecho &quot;$&#123;YOURID&#125; ALL=(ALL) ALL&quot; &gt;&gt; /etc/sudoersecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#install Toolsecho -e &quot;$&#123;COLOR1&#125;Install Packages$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;screen$&#123;NC&#125;&quot;pacman -Sy screen v2rayecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#install Bootloaderecho -e &quot;$&#123;COLOR1&#125;Install grub Boot Loader into /dev/sda$&#123;NC&#125;&quot;grub-install --target=i386-pc /dev/sdagrub-mkconfig -o /boot/grub/grub.cfgecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#Finished installsyncsyncsyncexit","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Arch Linux","slug":"Linux/Arch-Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Arch-Linux/"},{"name":"Scripts","slug":"Linux/Arch-Linux/Scripts","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Arch-Linux/Scripts/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Archlinux","slug":"Archlinux","permalink":"http://kiwi0093.github.io/wiki/tags/Archlinux/"}]},{"title":"VLESS Client Config","slug":"Network/V2Ray/3-VLESS_Client_config","date":"2020-11-26T16:00:00.000Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/Network/V2Ray/3-VLESS_Client_config/","permalink":"http://kiwi0093.github.io/wiki/wiki/Network/V2Ray/3-VLESS_Client_config/","excerpt":"前言 VLESS的Client設定其實很簡單只需要把原來VMESS的稍微改一下就好了, 因為Client的設定通常會包含Local DNS還有其他的相關設定,所以就不放完整的版本","text":"前言 VLESS的Client設定其實很簡單只需要把原來VMESS的稍微改一下就好了, 因為Client的設定通常會包含Local DNS還有其他的相關設定,所以就不放完整的版本 參考資料 這篇的內容基本上就是直接拿V2Ray團隊的範例直接用,後續有更新再說 V2fly官方文件 V2fly範例Github Config.json - 差異部份 12345678910111213141516171819202122232425262728293031 &quot;outbounds&quot;: [ &#123; &quot;protocol&quot;: &quot;vless&quot;, &quot;settings&quot;: &#123; &quot;vnext&quot;: [ &#123; &quot;address&quot;: &quot;example.com&quot;, // 换成你的域名或服务器 IP（发起请求时无需解析域名了） &quot;port&quot;: 443, &quot;users&quot;: [ &#123; &quot;id&quot;: &quot;&quot;, // 填写你的 UUID &quot;encryption&quot;: &quot;none&quot;, &quot;level&quot;: 0 &#125; ] &#125; ] &#125;, &quot;streamSettings&quot;: &#123; &quot;network&quot;: &quot;ws&quot;, &quot;security&quot;: &quot;tls&quot;, &quot;tlsSettings&quot;: &#123; &quot;serverName&quot;: &quot;example.com&quot; // 换成你的域名 &#125;, &quot;wsSettings&quot;: &#123; &quot;path&quot;: &quot;/websocket&quot; // 必须换成自定义的 PATH，需要和服务端的一致 &#125; &#125; &#125; ]&#125;","categories":[{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/categories/Network/"},{"name":"V2Ray","slug":"Network/V2Ray","permalink":"http://kiwi0093.github.io/wiki/categories/Network/V2Ray/"}],"tags":[{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/tags/Network/"},{"name":"V2Ray","slug":"V2Ray","permalink":"http://kiwi0093.github.io/wiki/tags/V2Ray/"},{"name":"VPN","slug":"VPN","permalink":"http://kiwi0093.github.io/wiki/tags/VPN/"}]},{"title":"VLESS Server Config","slug":"Network/V2Ray/2-VLESS_Server_config","date":"2020-11-26T16:00:00.000Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/Network/V2Ray/2-VLESS_Server_config/","permalink":"http://kiwi0093.github.io/wiki/wiki/Network/V2Ray/2-VLESS_Server_config/","excerpt":"前言 VLESS的Server設定裡面已經包括了WS+TLS,所以設定後可以不需要另外設定Web Server(Nginx/Apache)","text":"前言 VLESS的Server設定裡面已經包括了WS+TLS,所以設定後可以不需要另外設定Web Server(Nginx/Apache) 參考資料 這篇的內容基本上就是直接拿V2Ray團隊的範例直接用,後續有更新再說 V2fly官方文件 V2fly範例Github Config.json 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&#123; &quot;log&quot;: &#123; &quot;loglevel&quot;: &quot;warning&quot; &#125;, &quot;inbounds&quot;: [ &#123; &quot;port&quot;: 443, &quot;protocol&quot;: &quot;vless&quot;, &quot;settings&quot;: &#123; &quot;clients&quot;: [ &#123; &quot;id&quot;: &quot;&quot;, // 填写你的 UUID &quot;level&quot;: 0, &quot;email&quot;: &quot;love@v2fly.org&quot; //你可以改自己的Email-Address 同上面 &#125; ], &quot;decryption&quot;: &quot;none&quot;, &quot;fallbacks&quot;: [ &#123; &quot;dest&quot;: 80 &#125;, &#123; &quot;path&quot;: &quot;/websocket&quot;, // 必须换成自定义的 PATH &quot;dest&quot;: 1234, //內部轉的PORT要與上面的一致 &quot;xver&quot;: 1 &#125; ] &#125;, &quot;streamSettings&quot;: &#123; &quot;network&quot;: &quot;tcp&quot;, &quot;security&quot;: &quot;tls&quot;, &quot;tlsSettings&quot;: &#123; &quot;alpn&quot;: [ &quot;http/1.1&quot; ], &quot;certificates&quot;: [ &#123; &quot;certificateFile&quot;: &quot;/path/to/fullchain.crt&quot;, // 换成你的证书，绝对路径 &quot;keyFile&quot;: &quot;/path/to/private.key&quot; // 换成你的私钥，绝对路径 &#125; ] &#125; &#125; &#125;, &#123; &quot;port&quot;: 1234, //內部轉的PORT要與上面的一致 &quot;listen&quot;: &quot;127.0.0.1&quot;, &quot;protocol&quot;: &quot;vless&quot;, &quot;settings&quot;: &#123; &quot;clients&quot;: [ &#123; &quot;id&quot;: &quot;&quot;, // 填写你的 UUID &quot;level&quot;: 0, &quot;email&quot;: &quot;love@v2fly.org&quot; //你可以改自己的Email-Address 同上面 &#125; ], &quot;decryption&quot;: &quot;none&quot; &#125;, &quot;streamSettings&quot;: &#123; &quot;network&quot;: &quot;ws&quot;, &quot;security&quot;: &quot;none&quot;, &quot;wsSettings&quot;: &#123; &quot;acceptProxyProtocol&quot;: true, // 提醒：若你用 Nginx/Caddy 等反代 WS，需要删掉这行 &quot;path&quot;: &quot;/websocket&quot; // 必须换成自定义的 PATH，需要和上面的一致 &#125; &#125; &#125; ], &quot;outbounds&quot;: [ &#123; &quot;protocol&quot;: &quot;freedom&quot; &#125; ]&#125;","categories":[{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/categories/Network/"},{"name":"V2Ray","slug":"Network/V2Ray","permalink":"http://kiwi0093.github.io/wiki/categories/Network/V2Ray/"}],"tags":[{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/tags/Network/"},{"name":"V2Ray","slug":"V2Ray","permalink":"http://kiwi0093.github.io/wiki/tags/V2Ray/"},{"name":"VPN","slug":"VPN","permalink":"http://kiwi0093.github.io/wiki/tags/VPN/"}]},{"title":"V2Ray With VLESS安裝","slug":"Network/V2Ray/1-VLESS_install","date":"2020-11-25T16:00:00.000Z","updated":"2024-03-21T02:36:21.146Z","comments":true,"path":"wiki/Network/V2Ray/1-VLESS_install/","permalink":"http://kiwi0093.github.io/wiki/wiki/Network/V2Ray/1-VLESS_install/","excerpt":"前提 因為VMESS被發現有漏洞很容易被偵測,所以V2Ray團隊開發了另一個更輕量的通訊協定 - VLESS 另外這個新版的VLESS協議因為沒有自身的加密,所以目前都是強制要加掛TLS(其實就是希望把加密都改成依靠TLS達到加密的安全性)","text":"前提 因為VMESS被發現有漏洞很容易被偵測,所以V2Ray團隊開發了另一個更輕量的通訊協定 - VLESS 另外這個新版的VLESS協議因為沒有自身的加密,所以目前都是強制要加掛TLS(其實就是希望把加密都改成依靠TLS達到加密的安全性) 參考資料 v2fly在Github上的安裝說明 v2fly對於使用VLESS的SOP 解析 Certbot（Let’s encrypt） 使用方式 安裝 新版V2Ray安裝 Software Installation 因為VLESS已經被包括到新版的V2Ray之中(4.27以後),所以只要安裝新版的V2Ray就可以進行相關設定,一般都會改用變更後的安裝script(for Debian/Ubuntu) Archlinux可以用pacman直接安裝與更新 1sudo pacman -S v2ray 其他的請用下述的script 1bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh) Setup與啟動 因為需要證書的關係,所以會建議創建v2ray帳號 1sudo useradd -s /usr/sbin/nologin v2ray 並且修改systemd裡面的Service檔 1sudo systemctl edit v2ray.service 內容改為 123[Service]#將nobody改成v2rayuser=v2ray 若是使用systemctl edit指令無法修改（會變成一片白之類的),請直接使用vi指令進行修改如下 1sudo vi /etc/systemd/system/v2ray.service 用這個修改的話必須update Service不然不會做數 1234#先disablesudo systemctl disable v2ray.service#再重新enablesudo systemctl enable v2ray.service Certbot與相關組件安裝 因為VLESS需要跟TLS綁在一起,所以設定檔內需要fullchain.pem &amp; private.pem的ssl key,所以以往很方便的caddy自動https作法瞬間變成沒辦法使用(應該還是可以只是得要先確定caddy的SSL Key放哪) 一般的教程會採用Certbot+Nginx或是Certbot+Apache的方式進行 Certbot安裝 Archlinux 1sudo pacman -S certbot Debian/Ubuntu 1sudo apt install certbot python-nginx 這個部份安裝的時候就會連同Nginx/Apache一起安裝了 Archlinux 1sudo pacman -S python3-certbot-nginx Debian/Ubuntu 1sudo apt install python3-certbot-nginx Certbot證書簽發與Key 這裡假設都以經將Domain與IP做好連結,所以才能簽發,這也代表VLESS的方案中Domain成為必要的前提條件之一 12345# 自動簽發模式for nginxsudo certbot --nginx# 自動簽發模式for Apachesudo cerbot --apache 過程中會需要輸入 Email address Domain 沒有異常自動模式會自動啟動Nginx或Apache進行認證,順著跑完就好了 部屬V2Ray用的SSL Key 確認Certbot建立的證書有以下 /etc/letsencrypt/live/example.com/fullchain.pem /etc/letsencrypt/live/example.com/privkey.pem example.com是你的Domain Renew證書設定 Archlinux 利用systemd timer進行renewal 先建立一個service for renewal 1sudo vi /lib/systemd/system/certbot.service 12345678[Unit]Description=CertbotDocumentation=file:///usr/share/doc/python-certbot-doc/html/index.htmlDocumentation=https://letsencrypt.readthedocs.io/en/latest/[Service]Type=oneshotExecStart=/usr/bin/certbot -q renewPrivateTmp=true 之後在做一個timer檔讓systemd定時執行certbot.service 1sudo vi /etc/systemd/system/timers.target.wants/certbot.timer 12345678910[Unit]Description=Run certbot twice daily[Timer]OnCalendar=*-*-* 00,12:00:00RandomizedDelaySec=43200Persistent=true[Install]WantedBy=timers.target 然後執行 1sudo systemctl enable certbot.timer 1sudo systemctl start certbot.timer Debian 安裝Certbot後已經自動建好了上面的service/timer,所以不用自己來 建立V2Ray專用目錄 1sudo install -d -o v2ray -g v2ray /etc/ssl/v2ray/ 部屬到專用目錄 12sudo install -m 644 -o v2ray -g v2ray /etc/letsencrypt/live/example.com/fullchain.pem -t /etc/ssl/v2ray/sudo install -m 600 -o v2ray -g v2ray /etc/letsencrypt/live/example.com/privkey.pem -t /etc/ssl/v2ray/ 建立Renew後的自動script 1sudo vi /etc/letsencrypt/renewal-hooks/deploy/v2ray.sh 其內容如下 1234567891011#!/bin/bashV2RAY_DOMAIN=&#x27;example.com&#x27;if [[ &quot;$RENEWED_LINEAGE&quot; == &quot;/etc/letsencrypt/live/$V2RAY_DOMAIN&quot; ]]; then install -m 644 -o v2ray -g v2ray &quot;/etc/letsencrypt/live/$V2RAY_DOMAIN/fullchain.pem&quot; -t /etc/ssl/v2ray/ install -m 600 -o v2ray -g v2ray &quot;/etc/letsencrypt/live/$V2RAY_DOMAIN/privkey.pem&quot; -t /etc/ssl/v2ray/ sleep &quot;$((RANDOM % 2048))&quot; systemctl restart v2ray.servicefi 不要忘記修改example.com為自己的DN 之後給予權限 1sudo chmod +x /etc/letsencrypt/renewal-hooks/deploy/v2ray.sh BBR Archlinux Archlinux開啟BBR 123echo &quot;tcp_bbr&quot; &gt; /etc/modules-load.d/80-bbr.confecho &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.d/80-bbr.confecho &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.d/80-bbr.conf 接著 1sysctl -p Debian Debian9/10有內建BBR只要打開就可以了 12echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.confecho &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf 接著 1sysctl -p","categories":[{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/categories/Network/"},{"name":"V2Ray","slug":"Network/V2Ray","permalink":"http://kiwi0093.github.io/wiki/categories/Network/V2Ray/"}],"tags":[{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/tags/Network/"},{"name":"V2Ray","slug":"V2Ray","permalink":"http://kiwi0093.github.io/wiki/tags/V2Ray/"},{"name":"VPN","slug":"VPN","permalink":"http://kiwi0093.github.io/wiki/tags/VPN/"}]},{"title":"Pathfinder:Kingmaker - Save檔修改技巧","slug":"Game/PC/Pathfinder Kingmaker/1-Save file modding","date":"2020-11-16T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Game/PC/Pathfinder Kingmaker/1-Save file modding/","permalink":"http://kiwi0093.github.io/wiki/wiki/Game/PC/Pathfinder%20Kingmaker/1-Save%20file%20modding/","excerpt":"前言 我很喜歡D&amp;D類型的RPG,也很喜歡這種類冰風谷的CRPG,然而更大的樂趣,卻是亂搞遊戲本身…","text":"前言 我很喜歡D&amp;D類型的RPG,也很喜歡這種類冰風谷的CRPG,然而更大的樂趣,卻是亂搞遊戲本身… Save檔所在位置 C:\\Users\\&#123;Username&#125;\\AppData\\LocalLow\\Owlcat Games\\Pathfinder Kingmaker\\Saved Games 因為AppData是隱藏目錄.所以需要手動進入 記錄檔為*.zks可以當作一般的Zip解開,解開後的檔案有兩個重點檔案 party.json 這個檔案紀錄了整個隊伍裡面每一個角色(包括隊友跟寵物)的資訊,我們想要變更跟班的外貌與種族請編輯這個 player.json 這個檔案主要是紀錄主角的一些訊息 Json file好用的Editor 可以使用notepad++加上JstoolPlug-in,再讀入json file的時候可以利用Jstool裡的JSFormat功能把json對齊成好看的樣子 Party.json 在使用CoTW這個mod之後,有一些職業會帶有跟班,例如牧師的Undead Lord或是Summoner 這樣的跟班在系統中與動物夥伴一樣都被視作Pet,不會佔夥伴的人數,CoTW內的跟班預設是寫死的模型 沒有像傭兵一樣的紙娃娃系統可以變更外貌,但是可以透過修改save檔的方式把Pet變成跟傭兵一樣效果(不過升級的部分還是同Pet沒有自己的經驗值,這點可以靠Bag of Tricks來解決) 修改跟班 文件說明 在party.json內用來定義一個角色的內容在&quot;Descriptor&quot;這個大section內,我們只要修改這個Section內用來控制相關部分就好 1234567&quot;UISettings&quot;: &#123;...&quot;m_CustomPortrait&quot;: &#123; &quot;$id&quot;: &quot;582&quot;, &quot;m_CustomPortraitId&quot;: &quot;aa28&quot; //使用aa28頭像 &#125; &#125; 這段定義的是角色的頭像照片 123&quot;CustomGender&quot;: &quot;Male&quot;, //定義這個角色的性別&quot;LeftHandedOverride&quot;: false, //定義是不是左撇子&quot;CustomName&quot;: &quot;Kiwi Von Hohenzollen&quot;, //角色的名字,基本上可以利用這個找到想修改的角色 這段定義角色名字與性別 12345678910111213141516171819202122232425262728//這一整段是定義這個角色的外型&quot;Doll&quot;: &#123; &quot;$id&quot;: &quot;644&quot;, &quot;Gender&quot;: &quot;Male&quot;, &quot;RacePreset&quot;: &quot;7f4584a1e1ad4135aef72ebd41462271&quot;, &quot;EquipmentEntityIds&quot;: [&quot;ee_head_face02_m_dp&quot;, &quot;ee_eyebrows_face03_m_dp&quot;, &quot;24c5b0a90952b8843a93ec33feacb78b&quot;, &quot;ee_facialandhair_empty_u_dp&quot;], &quot;EntityRampIdices&quot;: [&#123; &quot;Key&quot;: &quot;24c5b0a90952b8843a93ec33feacb78b&quot;, &quot;Value&quot;: 1 &#125;, &#123; &quot;Key&quot;: &quot;ee_naked_m_dp&quot;, &quot;Value&quot;: 2 &#125;, &#123; &quot;Key&quot;: &quot;ee_head_face02_m_dp&quot;, &quot;Value&quot;: 2 &#125;, &#123; &quot;Key&quot;: &quot;ee_facialandhair_empty_u_dp&quot;, &quot;Value&quot;: 1 &#125;, &#123; &quot;Key&quot;: &quot;ee_eyebrows_face03_m_dp&quot;, &quot;Value&quot;: 1 &#125; ], &quot;EntitySecondaryRampIdices&quot;: [], &quot;LeftHanded&quot;: false, &quot;ClothesPrimaryIndex&quot;: 31, &quot;ClothesSecondaryIndex&quot;: 19 &#125;, 這段定義角色的3D model也就是紙娃娃的外型,定義了種族,身體,頭,髮型,鬍子等 1234//這段是定義對應的Pet UUID&quot;m_Pet&quot;: &#123; &quot;m_UniqueId&quot;: &quot;81851e9f-0723-4290-91ab-3cd29ab6e731&quot; &#125;, 與 1234//這是定義主人&quot;Master&quot;: &#123; &quot;m_UniqueId&quot;: null &#125;, 是要對應的,也就是說主人定義的Pet要定義pet角色的UUID, 而Pet的Master段要定義主人的UUID 這樣才不會有問題 1&quot;Blueprint&quot;: &quot;4391e8b9afbb0cf43aeba700c089f56d&quot;, 在&quot;Descriptor&quot;階層下的’Blueprint是指這個角色的UUID,要注意對應階層的角色 相關作法 Pet角色的UUID不能使用原先遊戲檔案內藍圖創好的UUID,例如直接copy某NPC的UUID,這樣會因為UUID重複的關係產生錯誤 為了有一個獨特的UUID,建議可以另外開一個新檔案,然後使用遊戲的角色建立工具建立新角色後 再把該角色的UUID, doll section,m_CustomPortrait copy對應到想要的Pet對應位置去 最後要確認的是所有Copy的條目內若有id的都不能跟文件內的其他id重複,可以不照順序增加就好了 後遺症 這個方法改出來的角色不知道為什麼都沒穿衣服…應該是沒看到衣服的定義區塊後面有找到再更新","categories":[{"name":"Game","slug":"Game","permalink":"http://kiwi0093.github.io/wiki/categories/Game/"},{"name":"PC","slug":"Game/PC","permalink":"http://kiwi0093.github.io/wiki/categories/Game/PC/"},{"name":"Pathfinder Kingmaker","slug":"Game/PC/Pathfinder-Kingmaker","permalink":"http://kiwi0093.github.io/wiki/categories/Game/PC/Pathfinder-Kingmaker/"}],"tags":[{"name":"Game","slug":"Game","permalink":"http://kiwi0093.github.io/wiki/tags/Game/"},{"name":"PC-Game","slug":"PC-Game","permalink":"http://kiwi0093.github.io/wiki/tags/PC-Game/"},{"name":"RPG","slug":"RPG","permalink":"http://kiwi0093.github.io/wiki/tags/RPG/"}]},{"title":"整合型Archlinux安裝Script - 5.nextc_arch.sh說明","slug":"Linux/Arch Linux/Scripts/5-nextc_arch","date":"2020-06-15T16:00:00.000Z","updated":"2024-03-21T02:36:21.136Z","comments":true,"path":"wiki/Linux/Arch Linux/Scripts/5-nextc_arch/","permalink":"http://kiwi0093.github.io/wiki/wiki/Linux/Arch%20Linux/Scripts/5-nextc_arch/","excerpt":"前言 這個文件反而是這個系列最後寫的…但是寫完之後就遇上了準備全面改用PhotoOS+Docker,所以…就當練習囉","text":"前言 這個文件反而是這個系列最後寫的…但是寫完之後就遇上了準備全面改用PhotoOS+Docker,所以…就當練習囉 使用前 這個script預設是自動帶出來跑的,但是也是可以手動自己跑 Script的直接位置如下： https://Kiwi0093.github.com/script/Arch/nextc_arch.sh 開機設定網路 *Update 2021/06/16 因為我自己的Nextcloud要架設在沒有DHCP服務的DMZ區域,所以開機使用arch.sh前須要先設定網路 123456789#開機後先確認你的網路卡名稱ip link#除了lo以外的那張ens...就是你的卡號,以下假設為ens160#設定ip(假設是192.168.10.1)ip address add 192.168.10.1/24 dev ens160#設定route(假設是192.168.10.254)ip route add default via 192.168.10.254 dev ens160 好了之後Ping一下會通就好了 其實不用這個,直接用Docker搞不好還比較快 Script內容 Script內容說明 基本定義 1234567891011#!/bin/sh#Parmeter Pre-Define#Color for warningCOLOR_W=&#x27;\\e[35m&#x27;#Color for descriptionCOLOR1=&#x27;\\e[94m&#x27;COLOR2=&#x27;\\e[32m&#x27;# Color for Highlight packageCOLOR_H1=&#x27;\\e[96m&#x27;COLOR_H2=&#x27;\\e[34m&#x27;NC=&#x27;\\e[0m&#x27; 定義Script中字串的顏色 警告標語與版號 123456789#Notice before useecho -e &quot;$&#123;COLOR_W&#125;=====================Warning=======================\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= Kiwi&#x27;s Arch linux Auto install script Ver.1.1 =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= Arch + Nextcloud Install script Ver.1.0 =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= This Script for Kiwi private use. =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= If you have any issue on usage, =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= Please DON&#x27;T Feedback to Kiwi =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= And you should take your own responsibility =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;===================================================\\n$&#123;NC&#125;&quot; 設定時區與硬體時間 1234567891011121314151617181920212223242526#change Timezoneecho -e &quot;$&#123;COLOR1&#125;Please select your time zone\\n$&#123;NC&#125;$&#123;COLOR_H1&#125;1)Taipei\\n2)Shanghai\\n*)Whatever..I don&#x27;t care\\n$&#123;NC&#125;&quot;while :do read ZONE case $ZONE in 1) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Taipei$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime hwclock --systohc --utc break ;; 2) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Shanghai$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime hwclock --systohc --utc break ;; *) echo -e &quot;$&#123;COLOR1&#125;Nobody cares the local time!!$&#123;NC&#125;&quot; hwclock --systohc --utc break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 系統語系設定為UTF-8 12345678910#locale-gen to add en_US &amp; zh_TWecho -e &quot;$&#123;COLOR1&#125;Setting local file$&#123;NC&#125;&quot;echo &quot;en_US.UTF-8 UTF-8&quot; &gt;&gt; /etc/locale.genecho &quot;zh_TW.UTF-8 UTF-8&quot; &gt;&gt; /etc/locale.genecho -e &quot;$&#123;COLOR1&#125;Generate locale.conf$&#123;NC&#125;&quot;locale-genecho -e &quot;$&#123;COLOR1&#125;Setting locale.conf$&#123;NC&#125;&quot;echo LANG=en_US.UTF-8 &gt; /etc/locale.confexport LANG=en_US.UTF-8echo -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 網路設定 123456789101112131415161718192021222324252627282930#Hostnameecho -e &quot;$&#123;COLOR1&#125;Please input your hostname\\n$&#123;NC&#125;&quot;read HOSTNAMEecho $&#123;HOSTNAME&#125; &gt; /etc/hostnameecho &quot;127.0.0.1 localhost $&#123;HOSTNAME&#125;&quot; &gt;&gt; /etc/hostsecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Define your NIC by Mac address$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Please input your MAC Address(need to be lowcase):\\n$&#123;NC&#125;&quot;read OUTSIDEecho &#x27;SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, ATTR&#123;address&#125;==&quot;&#x27;$&#123;OUTSIDE&#125;&#x27;&quot;, NAME=&quot;EXT0&quot;&#x27; &gt; /etc/udev/rules.d/10-network.rulesecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Define your IP for EXT0:$&#123;NC&#125;&quot;echo &quot;Description=&#x27;EXT0 IP SETTING&#x27;&quot; &gt; /etc/netctl/EXT0.serviceecho &quot;Interface=EXT0&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho &quot;Connection=ethernet&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho &quot;IP=static&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your IP address:\\n$&#123;NC&#125;&quot;read EXT_IPecho &quot;Address=(&#x27;$&#123;EXT_IP&#125;/24&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your Gateway IP address:\\n$&#123;NC&#125;&quot;read GATE_IPecho &quot;Gateway=&#x27;$&#123;GATE_IP&#125;&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your DNS IP address:\\n$&#123;NC&#125;&quot;read DNS_IPecho &quot;DNS=(&#x27;$&#123;DNS_IP&#125;&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -e &quot;$&#123;COLOR2&#125;Enable EXT0$&#123;NC&#125;&quot;netctl enable EXT0.serviceecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot; 這個設定是利用固定的**Mac Address來定義NIC Interface的名字為EXT0** 這個設定是使用netctl進行的 變更root密碼與建立其他帳號 123456789101112131415161718#Root Passwordecho -e &quot;$&#123;COLOR1&#125;Set your root password$&#123;NC&#125;&quot;passwdchsh -s /bin/zshecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#add Userecho -e &quot;$&#123;COLOR1&#125;Add user account:$&#123;NC&#125;&quot;echo -n &quot;$&#123;COLOR1&#125;What ID you want:$&#123;NC&#125;&quot;read YOURIDuseradd -m -g root -s /bin/zsh $&#123;YOURID&#125;passwd $&#123;YOURID&#125;echo -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Add $YOURID into sudo list$&#123;NC&#125;&quot;pacman -Syu sudoecho &quot;$&#123;YOURID&#125; ALL=(ALL) ALL&quot; &gt;&gt; /etc/sudoersecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 安裝程式 12345678910111213#install Toolsecho -e &quot;$&#123;COLOR1&#125;Install Packages$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;tmux$&#123;NC&#125;&quot;pacman -Syu --noconfirm git go base-devel tmux mariadb php php-apcu php-fpm php-gd php-imap php-intl php-imagick nginx certbot certbot-nginx nextcloudecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Install yay$&#123;NC&#125;&quot;cd /rootgit clone https://aur.archlinux.org/yay.gitchomd 777 yaycd yaysudo -u kiwi makepkg -sirm -rf yaysudo -u kiwi yay -S php-smbclient *Update 2021/06/16 Nextcloud Server基本上需要Database - MariaDB, PHP, Web Server - Nginx,所以就一口氣裝上 相關服務社定 Mariadb 12345678910111213141516171819202122232425262728#Setup service#setup MariaDBecho -e &quot;$&#123;COLOR1&#125;Start to Setup MariaDB$&#123;NC&#125;&quot;mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysqlmkdir -pv /var/lib/mysqltmpchown mysql:mysql /var/lib/mysqltmpecho &quot;tmpfs /var/lib/mysqltmp tmpfs rw,gid=mysql,uid=mysql,size=100M,mode=0750,noatime 0 0&quot; &gt;&gt; /etc/fstabecho &quot;[client]&quot; &gt;&gt; /etc/my.cnfecho &quot;default-character-set = utf8mb4&quot; &gt;&gt; /etc/my.cnfecho &quot;&quot; &gt;&gt; /etc/my.cnfecho &quot;[mysql]&quot; &gt;&gt; /etc/my.cnfecho &quot;default-character-set = utf8mb4&quot; &gt;&gt; /etc/my.cnfecho &quot;&quot; &gt;&gt; /etc/my.cnfecho &quot;[mysqld]&quot; &gt;&gt; /etc/my.cnfecho &quot;collation_server = utf8mb4_unicode_ci&quot; &gt;&gt; /etc/my.cnfecho &quot;character_set_server = utf8mb4&quot; &gt;&gt; /etc/my.cnfecho &quot;tmpdir = /var/lib/mysqltmp&quot; &gt;&gt; /etc/my.cnfmount /var/lib/mysqltmpsystemctl enable mariadb.servicesudo -u mysql /usr/bin/mariadbd &amp;mysql_secure_installationecho -n &quot;$&#123;COLOR1&#125;Please input your Username for Nextcloud Database:\\n$&#123;NC&#125;&quot;read NCUSERecho -n &quot;$&#123;COLOR1&#125;Please input your Password for Nextcloud Database User:\\n$&#123;NC&#125;&quot;read NCPASSWDmysql -u root -p -e&quot;CREATE DATABASE nextcloud DEFAULT CHARACTER SET &#x27;utf8mb4&#x27; COLLATE &#x27;utf8mb4_general_ci&#x27;;GRANT ALL PRIVILEGES ON nextcloud.* TO &#x27;$&#123;NCUSER&#125;&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;$&#123;NCPASSWD&#125;&#x27;;FLUSH PRIVILEGES;&quot;echo -e &quot;$&#123;COLOR2&#125;MariaDB setup compleated$&#123;NC&#125;&quot; PHP 1234#Setup PHPecho -e &quot;$&#123;COLOR1&#125;change PHP setting$$&#123;NC&#125;&quot;curl -o /etc/php/php.ini https://kiwi0093.github.io/script/Arch/php.iniecho -e &quot;$&#123;COLOR2&#125;PHP setting completed$&#123;NC&#125;&quot; Nextcloud 123456#Setup nextcloudecho -e &quot;$&#123;COLOR1&#125;Set up Nextcloud$&#123;NC&#125;&quot;echo &quot;nexcloud ALL=(ALL) ALL&quot; &gt;&gt; /etc/sudoerssudo -u nextcloud occ maintenance:install --database mysql --database-name nextcloud --database-host localhost --database-user $&#123;NCUSER&#125; --database-pass=&lt;$&#123;NCPASSWD&#125;&gt; --data-dir /var/lib/nextcloud/data/curl -o /usr/share/webapps/nextcloud/config/config.php https://kiwi0093.github.io/script/Arch/config.phpecho -e &quot;$&#123;COLOR2&#125;nexcloud set up compleated$&#123;NC&#125;&quot; PHP-FPM 1234567891011121314151617181920212223242526272829303132333435#Set up PHP-FPMecho -e &quot;$&#123;COLOR1&#125;Set up PHP-FPM$&#123;NC&#125;&quot;echo &quot;[nextcloud]&quot; &gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;user = nextcloud&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;group = nextcloud&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;listen = /run/nextcloud/nextcloud.sock&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;env[PATH] = /usr/local/bin:/usr/bin:/bin&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;env[TMP] = /tmp&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;; should be accessible by your web server&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;listen.owner = http&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;listen.group = http&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;pm = dynamic&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;pm.max_children = 15&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;pm.start_servers = 2&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;pm.min_spare_servers = 1&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;pm.max_spare_servers = 3&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confmkdir /etc/systemd/system/php-fpm.service.d/echo &quot;[Service]&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;# Your data directory&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;ReadWritePaths=/var/lib/nextcloud/data&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;# Optional: add if you&#x27;ve set the default apps directory to be writable in config.php&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;ReadWritePaths=/usr/share/webapps/nextcloud/apps&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;# Optional: unnecessary if you&#x27;ve set &#x27;config_is_read_only&#x27; =&gt; true in your config.php&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;ReadWritePaths=/usr/share/webapps/nextcloud/config&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;ReadWritePaths=/etc/webapps/nextcloud/config&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;# Optional: add if you want to use Nextcloud&#x27;s internal update process&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;# ReadWritePaths=/usr/share/webapps/nextcloud&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confsystemctl enable php-fpm.serviceecho -e &quot;$&#123;COLOR2&#125;PHP-FPM setting completed$&#123;NC&#125;&quot; Nginx 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158#set up nginxecho -e &quot;$&#123;COLOR1&#125;Set up Nginx$&#123;NC&#125;&quot;echo -n &quot;$&#123;COLOR1&#125;Please input you Domain for your Nextcloud Server$&#123;NC&#125;&quot;read NCDOMAINmv /etc/nginx/nginx.conf /etc/nginx.conf.oldmkdir /etc/nginx/conf.dmkdir /etc/nginx/sites-enabledecho &quot;user http;&quot; &gt; /etc/nginx/nginx.confecho &quot;worker_processes auto;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;worker_cpu_affinity auto;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;events &#123;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; multi_accept on;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; worker_connections 1024;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;&#125;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;http &#123;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; charset utf-8;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; sendfile on;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; tcp_nopush on;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; tcp_nodelay on;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; server_tokens off;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; log_not_found off;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; types_hash_max_size 4096;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; client_max_body_size 16M;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; # MIME&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; include mime.types;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; default_type application/octet-stream;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; # logging&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; access_log /var/log/nginx/access.log;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; error_log /var/log/nginx/error.log warn;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; # load configs&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; include /etc/nginx/conf.d/*.conf;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; include /etc/nginx/sites-enabled/*;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;&#125;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;upstream php-handler &#123;&quot; &gt; /etc/nginx/sites-enabled/nextcloudecho &quot; server 127.0.0.1:9000;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; #server unix:/var/run/php/php7.4-fpm.sock;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;server &#123;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; listen 80;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; listen [::]:80;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; server_name $&#123;NCDOMAIN&#125;;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # Enforce HTTPS&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; return 301 https://$server_name$request_uri;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;server &#123;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; listen 443 ssl http2;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; listen [::]:443 ssl http2;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; server_name $&#123;NCDOMAIN&#125;;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; ssl_certificate /etc/ssl/nginx/$&#123;NCDOMAIN&#125;.crt;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; ssl_certificate_key /etc/ssl/nginx/$&#123;NCDOMAIN&#125;.key;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # set max upload size&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; client_max_body_size 16G;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_buffers 64 4K;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # Enable gzip but do not remove ETag headers&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; gzip on;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; gzip_vary on;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; gzip_comp_level 4;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; gzip_min_length 256;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # HTTP response headers borrowed from Nextcloud \\`.htaccess\\`&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; add_header Referrer-Policy \\&quot;no-referrer\\&quot; always;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; add_header X-Content-Type-Options \\&quot;nosniff\\&quot; always;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; add_header X-Download-Options \\&quot;noopen\\&quot; always;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; add_header X-Frame-Options \\&quot;SAMEORIGIN\\&quot; always;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; add_header X-Permitted-Cross-Domain-Policies \\&quot;none\\&quot; always;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; add_header X-Robots-Tag \\&quot;none\\&quot; always;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; add_header X-XSS-Protection \\&quot;1; mode=block\\&quot; always;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # Remove X-Powered-By, which is an information leak&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_hide_header X-Powered-By;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # Path to the root of your installation&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; root /var/www/nextcloud;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; index index.php index.html /index.php$request_uri;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location = / &#123;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; if ( $http_user_agent ~ ^DavClnt ) &#123;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; return 302 /remote.php/webdav/$is_args$args;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location = /robots.txt &#123;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; allow all;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; log_not_found off;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; access_log off;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; location ^~ /.well-known &#123;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location = /.well-known/carddav &#123; return 301 /remote.php/dav/; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location = /.well-known/caldav &#123; return 301 /remote.php/dav/; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; location /.well-known/acme-challenge &#123; try_files $uri $uri/ =404; &#125;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; location /.well-known/pki-validation &#123; try_files $uri $uri/ =404; &#125;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; return 301 /index.php$request_uri;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/) &#123; return 404; &#125;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) &#123; return 404; &#125;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; location ~ \\.php(?:$|/) &#123;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; fastcgi_split_path_info ^(.+?\\.php)(/.*)$;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; set $path_info $fastcgi_path_info;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; try_files $fastcgi_script_name =404;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; include fastcgi_params;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; fastcgi_param PATH_INFO $path_info;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_param HTTPS on;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_param modHeadersAvailable true; # Avoid sending the security headers twice&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_param front_controller_active true; # Enable pretty urls&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_pass php-handler;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_intercept_errors on;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_request_buffering off;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; location ~ \\.(?:css|js|svg|gif)$ &#123;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; try_files $uri /index.php$request_uri;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; expires 6M; # Cache-Control policy borrowed from \\`.htaccess\\`&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; access_log off; # Optional: Don&#x27;t log access to assets&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; location ~ \\.woff2?$ &#123;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; try_files $uri /index.php$request_uri;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; expires 7d; # Cache-Control policy borrowed from \\`.htaccess\\`&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; access_log off; # Optional: Don&#x27;t log access to assets&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location /remote &#123;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &#x27; return 301 /remote.php$request_uri;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location / &#123;&quot; &gt;&gt; /etc/nginx/sitqes-enabled/nextcloudecho &#x27; try_files $uri $uri/ /index.php$request_uri;&#x27; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudsystemctl enable nginx.serviceecho -e &quot;$&#123;COLOR2&#125;Nginx setup complted$&#123;NC&#125;&quot; 這裡要特別注意設定檔內有特殊符號的要把**&quot; &quot;換成’ '**不然會有問題 Certbot 1234#set up certbotecho -e &quot;$&#123;COLOR1&#125;Set up Cetbot for SSL$&#123;NC&#125;&quot;certbot --nginx -d $&#123;NCDOMAIN&#125;echo -e &quot;$&#123;COLOR2&#125;SSL set up Completed$&#123;NC&#125;&quot; sshd 1234#sshdecho -e &quot;$&#123;COLOR1&#125; Enable sshd$&#123;NC&#125;&quot;systemctl enable sshd.serviceecho -e &quot;$&#123;COLOR2&#125;sshd enabled$&#123;NC&#125;&quot; 安裝Bootloader 12345#install Bootloaderecho -e &quot;$&#123;COLOR1&#125;Install grub Boot Loader into /dev/sda$&#123;NC&#125;&quot;grub-install --target=i386-pc /dev/sdagrub-mkconfig -o /boot/grub/grub.cfgecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot; 同步後離開Arch-chroot 12345#Finished installsyncsyncsyncexit 完整版的scriptbin/sh#Parmeter Pre-Define#Color for warningCOLOR_W=&#x27;\\e[35m&#x27;#Color for descriptionCOLOR1=&#x27;\\e[94m&#x27;COLOR2=&#x27;\\e[32m&#x27;# Color for Highlight packageCOLOR_H1=&#x27;\\e[96m&#x27;COLOR_H2=&#x27;\\e[34m&#x27;NC=&#x27;\\e[0m&#x27;#Notice before useecho -e &quot;$&#123;COLOR_W&#125;=====================Warning=======================\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= Kiwi&#x27;s Arch linux Auto install script Ver.1.1 =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= Arch + Nextcloud Install script Ver.1.0 =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= This Script for Kiwi private use. =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= If you have any issue on usage, =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= Please DON&#x27;T Feedback to Kiwi =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;= And you should take your own responsibility =\\n$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR_W&#125;===================================================\\n$&#123;NC&#125;&quot;#change Timezoneecho -e &quot;$&#123;COLOR1&#125;Please select your time zone\\n$&#123;NC&#125;$&#123;COLOR_H1&#125;1)Taipei\\n2)Shanghai\\n*)Whatever..I don&#x27;t care\\n$&#123;NC&#125;&quot;while :do read ZONE case $ZONE in 1) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Taipei$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime hwclock --systohc --utc break ;; 2) echo -e &quot;$&#123;COLOR1&#125;Set Time Zone to Asia/Shanghai$&#123;NC&#125;&quot; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime hwclock --systohc --utc break ;; *) echo -e &quot;$&#123;COLOR1&#125;Nobody cares the local time!!$&#123;NC&#125;&quot; hwclock --systohc --utc break ;; esacdoneecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#locale-gen to add en_US &amp; zh_TWecho -e &quot;$&#123;COLOR1&#125;Setting local file$&#123;NC&#125;&quot;echo &quot;en_US.UTF-8 UTF-8&quot; &gt;&gt; /etc/locale.genecho &quot;zh_TW.UTF-8 UTF-8&quot; &gt;&gt; /etc/locale.genecho -e &quot;$&#123;COLOR1&#125;Generate locale.conf$&#123;NC&#125;&quot;locale-genecho -e &quot;$&#123;COLOR1&#125;Setting locale.conf$&#123;NC&#125;&quot;echo LANG=en_US.UTF-8 &gt; /etc/locale.confexport LANG=en_US.UTF-8echo -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#Hostnameecho -e &quot;$&#123;COLOR1&#125;Please input your hostname\\n$&#123;NC&#125;&quot;read HOSTNAMEecho $&#123;HOSTNAME&#125; &gt; /etc/hostnameecho &quot;127.0.0.1 localhost $&#123;HOSTNAME&#125;&quot; &gt;&gt; /etc/hostsecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Define your NIC by Mac address$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Please input your MAC Address(need to be lowcase):\\n$&#123;NC&#125;&quot;read OUTSIDEecho &#x27;SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, ATTR&#123;address&#125;==&quot;&#x27;$&#123;OUTSIDE&#125;&#x27;&quot;, NAME=&quot;EXT0&quot;&#x27; &gt; /etc/udev/rules.d/10-network.rulesecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Define your IP for EXT0:$&#123;NC&#125;&quot;echo &quot;Description=&#x27;EXT0 IP SETTING&#x27;&quot; &gt; /etc/netctl/EXT0.serviceecho &quot;Interface=EXT0&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho &quot;Connection=ethernet&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho &quot;IP=static&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your IP address:\\n$&#123;NC&#125;&quot;read EXT_IPecho &quot;Address=(&#x27;$&#123;EXT_IP&#125;/24&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your Gateway IP address:\\n$&#123;NC&#125;&quot;read GATE_IPecho &quot;Gateway=&#x27;$&#123;GATE_IP&#125;&#x27;&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your DNS IP address:\\n$&#123;NC&#125;&quot;read DNS_IPecho &quot;DNS=(&#x27;$&#123;DNS_IP&#125;&#x27;)&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -e &quot;$&#123;COLOR2&#125;Enable EXT0$&#123;NC&#125;&quot;netctl enable EXT0.serviceecho -e &quot;$&#123;COLOR2&#125;Finished.$&#123;NC&#125;&quot;#Root Passwordecho -e &quot;$&#123;COLOR1&#125;Set your root password$&#123;NC&#125;&quot;passwdchsh -s /bin/zshecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#add Userecho -e &quot;$&#123;COLOR1&#125;Add user account:$&#123;NC&#125;&quot;echo -n &quot;$&#123;COLOR1&#125;What ID you want:$&#123;NC&#125;&quot;read YOURIDuseradd -m -g root -s /bin/zsh $&#123;YOURID&#125;passwd $&#123;YOURID&#125;echo -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Add $YOURID into sudo list$&#123;NC&#125;&quot;pacman -Syu sudoecho &quot;$&#123;YOURID&#125; ALL=(ALL) ALL&quot; &gt;&gt; /etc/sudoersecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#install Toolsecho -e &quot;$&#123;COLOR1&#125;Install Packages$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;tmux$&#123;NC&#125;&quot;pacman -Syu --noconfirm git go base-devel tmux mariadb php php-apcu php-fpm php-gd php-imap php-intl php-imagick nginx certbot certbot-nginx nextcloudecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR1&#125;Install yay$&#123;NC&#125;&quot;git clone https://aur.archlinux.org/yay.gitchomd 777 yaycd yaysudo -u kiwi makepkg -sirm -rf yaysudo -u kiwi yay -S php-smbclient#Setup service#setup MariaDBecho -e &quot;$&#123;COLOR1&#125;Start to Setup MariaDB$&#123;NC&#125;&quot;mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysqlmkdir -pv /var/lib/mysqltmpchown mysql:mysql /var/lib/mysqltmpecho &quot;tmpfs /var/lib/mysqltmp tmpfs rw,gid=mysql,uid=mysql,size=100M,mode=0750,noatime 0 0&quot; &gt;&gt; /etc/fstabecho &quot;[client]&quot; &gt;&gt; /etc/my.cnfecho &quot;default-character-set = utf8mb4&quot; &gt;&gt; /etc/my.cnfecho &quot;&quot; &gt;&gt; /etc/my.cnfecho &quot;[mysql]&quot; &gt;&gt; /etc/my.cnfecho &quot;default-character-set = utf8mb4&quot; &gt;&gt; /etc/my.cnfecho &quot;&quot; &gt;&gt; /etc/my.cnfecho &quot;[mysqld]&quot; &gt;&gt; /etc/my.cnfecho &quot;collation_server = utf8mb4_unicode_ci&quot; &gt;&gt; /etc/my.cnfecho &quot;character_set_server = utf8mb4&quot; &gt;&gt; /etc/my.cnfecho &quot;tmpdir = /var/lib/mysqltmp&quot; &gt;&gt; /etc/my.cnfmount /var/lib/mysqltmpmysql_secure_installationsystemctl enable mariadb.servicesystemctl start mariadb.serviceecho -n &quot;$&#123;COLOR1&#125;Please input your Username for Nextcloud Database:\\n$&#123;NC&#125;&quot;read NCUSERecho -n &quot;$&#123;COLOR1&#125;Please input your Password for Nextcloud Database User:\\n$&#123;NC&#125;&quot;read NCPASSWDmysql -u root -p -e&quot;CREATE DATABASE nextcloud DEFAULT CHARACTER SET &#x27;utf8mb4&#x27; COLLATE &#x27;utf8mb4_general_ci&#x27;;GRANT ALL PRIVILEGES ON nextcloud.* TO &#x27;$&#123;NCUSER&#125;&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;$&#123;NCPASSWD&#125;&#x27;;FLUSH PRIVILEGES;&quot;echo -e &quot;$&#123;COLOR2&#125;MariaDB setup compleated$&#123;NC&#125;&quot;#Setup PHPecho -e &quot;$&#123;COLOR1&#125;change PHP setting$$&#123;NC&#125;&quot;curl -o /etc/php/php.ini https://kiwi0093.github.io/script/Arch/php.iniecho -e &quot;$&#123;COLOR2&#125;PHP setting completed$&#123;NC&#125;&quot;#Setup nextcloudecho -e &quot;$&#123;COLOR1&#125;Set up Nextcloud$&#123;NC&#125;&quot;echo &quot;nexcloud ALL=(ALL) ALL&quot; &gt;&gt; /etc/sudoerssudo -u nextcloud occ maintenance:install --database mysql --database-name nextcloud --database-host localhost --database-user $&#123;NCUSER&#125; --database-pass=&lt;$&#123;NCPASSWD&#125;&gt; --data-dir /var/lib/nextcloud/data/curl -o /usr/share/webapps/nextcloud/config/config.php https://kiwi0093.github.io/script/Arch/config.phpecho -e &quot;$&#123;COLOR2&#125;nexcloud set up compleated$&#123;NC&#125;&quot;#Set up PHP-FPMecho -e &quot;$&#123;COLOR1&#125;Set up PHP-FPM$&#123;NC&#125;&quot;echo &quot;[nextcloud]&quot; &gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;user = nextcloud&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;group = nextcloud&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;listen = /run/nextcloud/nextcloud.sock&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;env[PATH] = /usr/local/bin:/usr/bin:/bin&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;env[TMP] = /tmp&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;; should be accessible by your web server&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;listen.owner = http&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;listen.group = http&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;pm = dynamic&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;pm.max_children = 15&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;pm.start_servers = 2&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;pm.min_spare_servers = 1&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confecho &quot;pm.max_spare_servers = 3&quot; &gt;&gt; /etc/php/php-fpm.d/nextcloud.confmkdir /etc/systemd/system/php-fpm.service.d/echo &quot;[Service]&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;# Your data directory&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;ReadWritePaths=/var/lib/nextcloud/data&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;# Optional: add if you&#x27;ve set the default apps directory to be writable in config.php&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;ReadWritePaths=/usr/share/webapps/nextcloud/apps&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;# Optional: unnecessary if you&#x27;ve set &#x27;config_is_read_only&#x27; =&gt; true in your config.php&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;ReadWritePaths=/usr/share/webapps/nextcloud/config&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;ReadWritePaths=/etc/webapps/nextcloud/config&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;# Optional: add if you want to use Nextcloud&#x27;s internal update process&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confecho &quot;# ReadWritePaths=/usr/share/webapps/nextcloud&quot; &gt; /etc/systemd/system/php-fpm.service.d/override.confsystemctl enable php-fpm.serviceecho -e &quot;$&#123;COLOR2&#125;PHP-FPM setting completed$&#123;NC&#125;&quot;#set up nginxecho -e &quot;$&#123;COLOR1&#125;Set up Nginx$&#123;NC&#125;&quot;echo -n &quot;$&#123;COLOR1&#125;Please input you Domain for your Nextcloud Server$&#123;NC&#125;&quot;read NCDOMAINmv /etc/nginx/nginx.conf /etc/nginx.conf.oldmkdir /etc/nginx/conf.dmkdir /etc/nginx/sites-enableecho &quot;user http;&quot; &gt; /etc/nginx/nginx.confecho &quot;worker_processes auto;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;worker_cpu_affinity auto;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;events &#123;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; multi_accept on;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; worker_connections 1024;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;&#125;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;http &#123;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; charset utf-8;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; sendfile on;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; tcp_nopush on;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; tcp_nodelay on;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; server_tokens off;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; log_not_found off;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; types_hash_max_size 4096;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; client_max_body_size 16M;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; # MIME&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; include mime.types;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; default_type application/octet-stream;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; # logging&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; access_log /var/log/nginx/access.log;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; error_log /var/log/nginx/error.log warn;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; # load configs&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; include /etc/nginx/conf.d/*.conf;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot; include /etc/nginx/sites-enabled/*;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;&#125;&quot; &gt;&gt; /etc/nginx/nginx.confecho &quot;upstream php-handler &#123;&quot; &gt; /etc/nginx/sites-enabled/nextcloudecho &quot; server 127.0.0.1:9000;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; #server unix:/var/run/php/php7.4-fpm.sock;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;server &#123;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; listen 80;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; listen [::]:80;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; server_name $&#123;NCDOMAIN&#125;;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # Enforce HTTPS&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; return 301 https://$server_name$request_uri;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;server &#123;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; listen 443 ssl http2;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; listen [::]:443 ssl http2;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; server_name $&#123;NCDOMAIN&#125;;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # Use Mozilla&#x27;s guidelines for SSL/TLS settings&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # https://mozilla.github.io/server-side-tls/ssl-config-generator/&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; ssl_certificate /etc/ssl/nginx/$&#123;NCDOMAIN&#125;.crt;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; ssl_certificate_key /etc/ssl/nginx/$&#123;NCDOMAIN&#125;.key;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # HSTS settings&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # WARNING: Only add the preload option once you read about&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # the consequences in https://hstspreload.org/. This option&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # will add the domain to a hardcoded list that is shipped&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # in all major browsers and getting removed from this list&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # could take several months.&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; #add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot; always;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # set max upload size&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; client_max_body_size 16G;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_buffers 64 4K;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # Enable gzip but do not remove ETag headers&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; gzip on;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; gzip_vary on;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; gzip_comp_level 4;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; gzip_min_length 256;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # Pagespeed is not supported by Nextcloud, so if your server is built&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # with the `ngx_pagespeed` module, uncomment this line to disable it.&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; #pagespeed off;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # HTTP response headers borrowed from Nextcloud `.htaccess`&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; add_header Referrer-Policy &quot;no-referrer&quot; always;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; add_header X-Content-Type-Options &quot;nosniff&quot; always;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; add_header X-Download-Options &quot;noopen&quot; always;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; add_header X-Frame-Options &quot;SAMEORIGIN&quot; always;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; add_header X-Permitted-Cross-Domain-Policies &quot;none&quot; always;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; add_header X-Robots-Tag &quot;none&quot; always;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; add_header X-XSS-Protection &quot;1; mode=block&quot; always;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # Remove X-Powered-By, which is an information leak&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_hide_header X-Powered-By;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # Path to the root of your installation&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; root /var/www/nextcloud;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # Specify how to handle directories -- specifying `/index.php$request_uri`&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # here as the fallback means that Nginx always exhibits the desired behaviour&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # when a client requests a path that corresponds to a directory that exists&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # on the server. In particular, if that directory contains an index.php file,&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # that file is correctly served; if it doesn&#x27;t, then the request is passed to&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # the front-end controller. This consistent behaviour means that we don&#x27;t need&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # to specify custom rules for certain paths (e.g. images and other assets,&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # `/updater`, `/ocm-provider`, `/ocs-provider`), and thus&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # `try_files $uri $uri/ /index.php$request_uri`&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # always provides the desired behaviour.&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; index index.php index.html /index.php$request_uri;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # Rule borrowed from `.htaccess` to handle Microsoft DAV clients&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location = / &#123;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; if ( $http_user_agent ~ ^DavClnt ) &#123;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; return 302 /remote.php/webdav/$is_args$args;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location = /robots.txt &#123;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; allow all;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; log_not_found off;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; access_log off;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # Make a regex exception for `/.well-known` so that clients can still&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # access it despite the existence of the regex rule&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # `location ~ /(\\.|autotest|...)` which would otherwise handle requests&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # for `/.well-known`.&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location ^~ /.well-known &#123;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # The rules in this block are an adaptation of the rules&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # in `.htaccess` that concern `/.well-known`.&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location = /.well-known/carddav &#123; return 301 /remote.php/dav/; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location = /.well-known/caldav &#123; return 301 /remote.php/dav/; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location /.well-known/acme-challenge &#123; try_files $uri $uri/ =404; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location /.well-known/pki-validation &#123; try_files $uri $uri/ =404; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # Let Nextcloud&#x27;s API for `/.well-known` URIs handle all other&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # requests by passing them to the front-end controller.&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; return 301 /index.php$request_uri;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # Rules borrowed from `.htaccess` to hide certain paths from clients&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/) &#123; return 404; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) &#123; return 404; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # Ensure this block, which passes PHP files to the PHP process, is above the blocks&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # which handle static assets (as seen below). If this block is not declared first,&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # then Nginx will encounter an infinite rewriting loop when it prepends `/index.php`&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # to the URI, resulting in a HTTP 500 error response.&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location ~ \\.php(?:$|/) &#123;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_split_path_info ^(.+?\\.php)(/.*)$;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; set $path_info $fastcgi_path_info;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; try_files $fastcgi_script_name =404;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; include fastcgi_params;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_param PATH_INFO $path_info;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_param HTTPS on;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_param modHeadersAvailable true; # Avoid sending the security headers twice&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_param front_controller_active true; # Enable pretty urls&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_pass php-handler;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_intercept_errors on;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; fastcgi_request_buffering off;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location ~ \\.(?:css|js|svg|gif)$ &#123;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; try_files $uri /index.php$request_uri;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; expires 6M; # Cache-Control policy borrowed from `.htaccess`&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; access_log off; # Optional: Don&#x27;t log access to assets&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location ~ \\.woff2?$ &#123;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; try_files $uri /index.php$request_uri;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; expires 7d; # Cache-Control policy borrowed from `.htaccess`&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; access_log off; # Optional: Don&#x27;t log access to assets&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; # Rule borrowed from `.htaccess`&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location /remote &#123;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; return 301 /remote.php$request_uri;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; location / &#123;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; try_files $uri $uri/ /index.php$request_uri;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot; &#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudecho &quot;&#125;&quot; &gt;&gt; /etc/nginx/sites-enabled/nextcloudsystemctl enable nginx.serviceecho -e &quot;$&#123;COLOR2&#125;Nginx setup complted$&#123;NC&#125;&quot;#set up certbotecho -e &quot;$&#123;COLOR1&#125;Set up Cetbot for SSL$&#123;NC&#125;&quot;certbot --nginx -d $&#123;NCDOMAIN&#125;echo -e &quot;$&#123;COLOR2&#125;SSL set up Completed$&#123;NC&#125;&quot;#sshdecho -e &quot;$&#123;COLOR1&#125; Enable sshd$&#123;NC&#125;&quot;systemctl enable sshd.serviceecho -e &quot;$&#123;COLOR2&#125;sshd enabled$&#123;NC&#125;&quot;#install Bootloaderecho -e &quot;$&#123;COLOR1&#125;Install grub Boot Loader into /dev/sda$&#123;NC&#125;&quot;grub-install --target=i386-pc /dev/sdagrub-mkconfig -o /boot/grub/grub.cfgecho -e &quot;$&#123;COLOR2&#125;Completed$&#123;NC&#125;&quot;#Finished installsyncsyncsyncexit","categories":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"Arch Linux","slug":"Linux/Arch-Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Arch-Linux/"},{"name":"Scripts","slug":"Linux/Arch-Linux/Scripts","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Arch-Linux/Scripts/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Archlinux","slug":"Archlinux","permalink":"http://kiwi0093.github.io/wiki/tags/Archlinux/"}]}],"categories":[{"name":"Misc","slug":"Misc","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/"},{"name":"Tmux","slug":"Misc/Tmux","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Tmux/"},{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/"},{"name":"WSL","slug":"Linux/WSL","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/WSL/"},{"name":"VM&Container","slug":"VM-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/"},{"name":"Service Container","slug":"VM-Container/Service-Container","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/"},{"name":"Common","slug":"VM-Container/Service-Container/Common","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/Common/"},{"name":"Zsh","slug":"Misc/Zsh","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Zsh/"},{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/categories/Network/"},{"name":"Hexo","slug":"Network/Hexo","permalink":"http://kiwi0093.github.io/wiki/categories/Network/Hexo/"},{"name":"V2Ray","slug":"Network/V2Ray","permalink":"http://kiwi0093.github.io/wiki/categories/Network/V2Ray/"},{"name":"PhotonOS & Docker Basic","slug":"VM-Container/PhotonOS-Docker-Basic","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/PhotonOS-Docker-Basic/"},{"name":"Ansible","slug":"Network/Ansible","permalink":"http://kiwi0093.github.io/wiki/categories/Network/Ansible/"},{"name":"Basic configuration","slug":"Network/Ansible/Basic-configuration","permalink":"http://kiwi0093.github.io/wiki/categories/Network/Ansible/Basic-configuration/"},{"name":"Playbook","slug":"Network/Ansible/Playbook","permalink":"http://kiwi0093.github.io/wiki/categories/Network/Ansible/Playbook/"},{"name":"Home Lab","slug":"VM-Container/Service-Container/Home-Lab","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/Home-Lab/"},{"name":"Other","slug":"VM-Container/Service-Container/Other","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/Other/"},{"name":"VPS","slug":"VM-Container/Service-Container/VPS","permalink":"http://kiwi0093.github.io/wiki/categories/VM-Container/Service-Container/VPS/"},{"name":"FreeBSD","slug":"FreeBSD","permalink":"http://kiwi0093.github.io/wiki/categories/FreeBSD/"},{"name":"Manjaro","slug":"Linux/Manjaro","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Manjaro/"},{"name":"Oracle Linux","slug":"Linux/Oracle-Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Oracle-Linux/"},{"name":"Tips","slug":"Linux/Tips","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Tips/"},{"name":"SSH","slug":"Misc/SSH","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/SSH/"},{"name":"Shell Script","slug":"Misc/Shell-Script","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Shell-Script/"},{"name":"Vim","slug":"Misc/Vim","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Vim/"},{"name":"ManjaroWSL","slug":"Linux/WSL/ManjaroWSL","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/WSL/ManjaroWSL/"},{"name":"NeoVim + NvChad","slug":"Misc/Vim/NeoVim-NvChad","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Vim/NeoVim-NvChad/"},{"name":"Input Method","slug":"Misc/Input-Method","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Input-Method/"},{"name":"Markdown","slug":"Misc/Markdown","permalink":"http://kiwi0093.github.io/wiki/categories/Misc/Markdown/"},{"name":"Game","slug":"Game","permalink":"http://kiwi0093.github.io/wiki/categories/Game/"},{"name":"PC","slug":"Game/PC","permalink":"http://kiwi0093.github.io/wiki/categories/Game/PC/"},{"name":"Pathfinder WoTR","slug":"Game/PC/Pathfinder-WoTR","permalink":"http://kiwi0093.github.io/wiki/categories/Game/PC/Pathfinder-WoTR/"},{"name":"Arch Linux","slug":"Linux/Arch-Linux","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Arch-Linux/"},{"name":"Scripts","slug":"Linux/Arch-Linux/Scripts","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Arch-Linux/Scripts/"},{"name":"Battletech","slug":"Game/PC/Battletech","permalink":"http://kiwi0093.github.io/wiki/categories/Game/PC/Battletech/"},{"name":"Scripts","slug":"Linux/Manjaro/Scripts","permalink":"http://kiwi0093.github.io/wiki/categories/Linux/Manjaro/Scripts/"},{"name":"Pathfinder Kingmaker","slug":"Game/PC/Pathfinder-Kingmaker","permalink":"http://kiwi0093.github.io/wiki/categories/Game/PC/Pathfinder-Kingmaker/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://kiwi0093.github.io/wiki/tags/Markdown/"},{"name":"Linunx","slug":"Linunx","permalink":"http://kiwi0093.github.io/wiki/tags/Linunx/"},{"name":"Windows","slug":"Windows","permalink":"http://kiwi0093.github.io/wiki/tags/Windows/"},{"name":"VM","slug":"VM","permalink":"http://kiwi0093.github.io/wiki/tags/VM/"},{"name":"Container","slug":"Container","permalink":"http://kiwi0093.github.io/wiki/tags/Container/"},{"name":"FreeBSD","slug":"FreeBSD","permalink":"http://kiwi0093.github.io/wiki/tags/FreeBSD/"},{"name":"Linux","slug":"Linux","permalink":"http://kiwi0093.github.io/wiki/tags/Linux/"},{"name":"Git","slug":"Git","permalink":"http://kiwi0093.github.io/wiki/tags/Git/"},{"name":"Network","slug":"Network","permalink":"http://kiwi0093.github.io/wiki/tags/Network/"},{"name":"Server","slug":"Server","permalink":"http://kiwi0093.github.io/wiki/tags/Server/"},{"name":"Blog","slug":"Blog","permalink":"http://kiwi0093.github.io/wiki/tags/Blog/"},{"name":"Wiki","slug":"Wiki","permalink":"http://kiwi0093.github.io/wiki/tags/Wiki/"},{"name":"V2Ray","slug":"V2Ray","permalink":"http://kiwi0093.github.io/wiki/tags/V2Ray/"},{"name":"VPN","slug":"VPN","permalink":"http://kiwi0093.github.io/wiki/tags/VPN/"},{"name":"VPS","slug":"VPS","permalink":"http://kiwi0093.github.io/wiki/tags/VPS/"},{"name":"Ansible","slug":"Ansible","permalink":"http://kiwi0093.github.io/wiki/tags/Ansible/"},{"name":"Microsoft","slug":"Microsoft","permalink":"http://kiwi0093.github.io/wiki/tags/Microsoft/"},{"name":"Manjaro","slug":"Manjaro","permalink":"http://kiwi0093.github.io/wiki/tags/Manjaro/"},{"name":"Arch","slug":"Arch","permalink":"http://kiwi0093.github.io/wiki/tags/Arch/"},{"name":"PhotonOS","slug":"PhotonOS","permalink":"http://kiwi0093.github.io/wiki/tags/PhotonOS/"},{"name":"SSH","slug":"SSH","permalink":"http://kiwi0093.github.io/wiki/tags/SSH/"},{"name":"script","slug":"script","permalink":"http://kiwi0093.github.io/wiki/tags/script/"},{"name":"Editor","slug":"Editor","permalink":"http://kiwi0093.github.io/wiki/tags/Editor/"},{"name":"Unix","slug":"Unix","permalink":"http://kiwi0093.github.io/wiki/tags/Unix/"},{"name":"Game","slug":"Game","permalink":"http://kiwi0093.github.io/wiki/tags/Game/"},{"name":"PC-Game","slug":"PC-Game","permalink":"http://kiwi0093.github.io/wiki/tags/PC-Game/"},{"name":"RPG","slug":"RPG","permalink":"http://kiwi0093.github.io/wiki/tags/RPG/"},{"name":"Archlinux","slug":"Archlinux","permalink":"http://kiwi0093.github.io/wiki/tags/Archlinux/"},{"name":"SLG","slug":"SLG","permalink":"http://kiwi0093.github.io/wiki/tags/SLG/"}]}